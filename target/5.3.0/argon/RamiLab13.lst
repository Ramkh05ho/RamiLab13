
/Users/ramikhosho/RamiLab13/target/5.3.0/argon/RamiLab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000076c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb6e0  000bb6e0  0000b6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001dc  2003e3dc  000bb704  0000e3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000238  2003e5b8  2003e5b8  0001e5b8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bb8e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bb8e4  000bb8e4  0001b8e4  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bb8ea  000bb8ea  0001b8ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bb90e  000bb90e  0001b90e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00149a36  00000000  00000000  0001b912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016cb2  00000000  00000000  00165348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000493ba  00000000  00000000  0017bffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003550  00000000  00000000  001c53b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ba40  00000000  00000000  001c8904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040f1f  00000000  00000000  001d4344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005193e  00000000  00000000  00215263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141bde  00000000  00000000  00266ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a644  00000000  00000000  003a8780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_d2ulz>:
   b4a28:	b5d0      	push	{r4, r6, r7, lr}
   b4a2a:	4b0c      	ldr	r3, [pc, #48]	; (b4a5c <__aeabi_d2ulz+0x34>)
   b4a2c:	2200      	movs	r2, #0
   b4a2e:	4606      	mov	r6, r0
   b4a30:	460f      	mov	r7, r1
   b4a32:	f7ff fcb1 	bl	b4398 <__aeabi_dmul>
   b4a36:	f7ff ff87 	bl	b4948 <__aeabi_d2uiz>
   b4a3a:	4604      	mov	r4, r0
   b4a3c:	f7ff fc32 	bl	b42a4 <__aeabi_ui2d>
   b4a40:	4b07      	ldr	r3, [pc, #28]	; (b4a60 <__aeabi_d2ulz+0x38>)
   b4a42:	2200      	movs	r2, #0
   b4a44:	f7ff fca8 	bl	b4398 <__aeabi_dmul>
   b4a48:	4602      	mov	r2, r0
   b4a4a:	460b      	mov	r3, r1
   b4a4c:	4630      	mov	r0, r6
   b4a4e:	4639      	mov	r1, r7
   b4a50:	f7ff faea 	bl	b4028 <__aeabi_dsub>
   b4a54:	f7ff ff78 	bl	b4948 <__aeabi_d2uiz>
   b4a58:	4621      	mov	r1, r4
   b4a5a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a5c:	3df00000 	.word	0x3df00000
   b4a60:	41f00000 	.word	0x41f00000

000b4a64 <strcmp>:
   b4a64:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a68:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a6c:	2a01      	cmp	r2, #1
   b4a6e:	bf28      	it	cs
   b4a70:	429a      	cmpcs	r2, r3
   b4a72:	d0f7      	beq.n	b4a64 <strcmp>
   b4a74:	1ad0      	subs	r0, r2, r3
   b4a76:	4770      	bx	lr

000b4a78 <strlen>:
   b4a78:	4603      	mov	r3, r0
   b4a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a7e:	2a00      	cmp	r2, #0
   b4a80:	d1fb      	bne.n	b4a7a <strlen+0x2>
   b4a82:	1a18      	subs	r0, r3, r0
   b4a84:	3801      	subs	r0, #1
   b4a86:	4770      	bx	lr

000b4a88 <__aeabi_d2lz>:
   b4a88:	b538      	push	{r3, r4, r5, lr}
   b4a8a:	2200      	movs	r2, #0
   b4a8c:	2300      	movs	r3, #0
   b4a8e:	4604      	mov	r4, r0
   b4a90:	460d      	mov	r5, r1
   b4a92:	f7ff fef3 	bl	b487c <__aeabi_dcmplt>
   b4a96:	b928      	cbnz	r0, b4aa4 <__aeabi_d2lz+0x1c>
   b4a98:	4620      	mov	r0, r4
   b4a9a:	4629      	mov	r1, r5
   b4a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4aa0:	f7ff bfc2 	b.w	b4a28 <__aeabi_d2ulz>
   b4aa4:	4620      	mov	r0, r4
   b4aa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4aaa:	f7ff ffbd 	bl	b4a28 <__aeabi_d2ulz>
   b4aae:	4240      	negs	r0, r0
   b4ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4ab4:	bd38      	pop	{r3, r4, r5, pc}
   b4ab6:	bf00      	nop

000b4ab8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ab8:	4809      	ldr	r0, [pc, #36]	; (b4ae0 <module_user_pre_init+0x28>)
   b4aba:	490a      	ldr	r1, [pc, #40]	; (b4ae4 <module_user_pre_init+0x2c>)
   b4abc:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4abe:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ac0:	d005      	beq.n	b4ace <module_user_pre_init+0x16>
   b4ac2:	4a09      	ldr	r2, [pc, #36]	; (b4ae8 <module_user_pre_init+0x30>)
   b4ac4:	4282      	cmp	r2, r0
   b4ac6:	d002      	beq.n	b4ace <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4ac8:	1a12      	subs	r2, r2, r0
   b4aca:	f003 fd5c 	bl	b8586 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4ace:	4807      	ldr	r0, [pc, #28]	; (b4aec <module_user_pre_init+0x34>)
   b4ad0:	4a07      	ldr	r2, [pc, #28]	; (b4af0 <module_user_pre_init+0x38>)
   b4ad2:	2100      	movs	r1, #0
   b4ad4:	1a12      	subs	r2, r2, r0
   b4ad6:	f003 fd64 	bl	b85a2 <memset>
    return &link_global_data_start;
}
   b4ada:	4801      	ldr	r0, [pc, #4]	; (b4ae0 <module_user_pre_init+0x28>)
   b4adc:	bd08      	pop	{r3, pc}
   b4ade:	bf00      	nop
   b4ae0:	2003e3dc 	.word	0x2003e3dc
   b4ae4:	000bb704 	.word	0x000bb704
   b4ae8:	2003e5b8 	.word	0x2003e5b8
   b4aec:	2003e5b8 	.word	0x2003e5b8
   b4af0:	2003e7f0 	.word	0x2003e7f0

000b4af4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4af4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4af6:	4e07      	ldr	r6, [pc, #28]	; (b4b14 <module_user_init+0x20>)
   b4af8:	4c07      	ldr	r4, [pc, #28]	; (b4b18 <module_user_init+0x24>)
    module_user_init_hook();
   b4afa:	f003 fafb 	bl	b80f4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4afe:	1ba4      	subs	r4, r4, r6
   b4b00:	08a4      	lsrs	r4, r4, #2
   b4b02:	2500      	movs	r5, #0
   b4b04:	42ac      	cmp	r4, r5
   b4b06:	d100      	bne.n	b4b0a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b08:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b0a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b0e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b10:	3501      	adds	r5, #1
   b4b12:	e7f7      	b.n	b4b04 <module_user_init+0x10>
   b4b14:	000bb6bc 	.word	0x000bb6bc
   b4b18:	000bb6e0 	.word	0x000bb6e0

000b4b1c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b1c:	f000 b884 	b.w	b4c28 <setup>

000b4b20 <module_user_loop>:
}

void module_user_loop() {
   b4b20:	b508      	push	{r3, lr}
    loop();
   b4b22:	f000 f82f 	bl	b4b84 <loop>
    _post_loop();
}
   b4b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b2a:	f003 ba9b 	b.w	b8064 <_post_loop>

000b4b2e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b2e:	f002 b96b 	b.w	b6e08 <malloc>

000b4b32 <_Znaj>:
   b4b32:	f002 b969 	b.w	b6e08 <malloc>

000b4b36 <_ZdaPv>:
   b4b36:	f002 b96f 	b.w	b6e18 <free>

000b4b3a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b3a:	f002 b96d 	b.w	b6e18 <free>
	...

000b4b40 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4b40:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4b42:	4a03      	ldr	r2, [pc, #12]	; (b4b50 <__cxa_pure_virtual+0x10>)
   b4b44:	4903      	ldr	r1, [pc, #12]	; (b4b54 <__cxa_pure_virtual+0x14>)
   b4b46:	200c      	movs	r0, #12
   b4b48:	f002 f8ba 	bl	b6cc0 <panic_>
  while (1);
   b4b4c:	e7fe      	b.n	b4b4c <__cxa_pure_virtual+0xc>
   b4b4e:	bf00      	nop
   b4b50:	000b6981 	.word	0x000b6981
   b4b54:	000ba458 	.word	0x000ba458

000b4b58 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b58:	7800      	ldrb	r0, [r0, #0]
   b4b5a:	fab0 f080 	clz	r0, r0
   b4b5e:	0940      	lsrs	r0, r0, #5
   b4b60:	4770      	bx	lr

000b4b62 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4b62:	2301      	movs	r3, #1
   b4b64:	7003      	strb	r3, [r0, #0]
   b4b66:	4770      	bx	lr

000b4b68 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b68:	b40e      	push	{r1, r2, r3}
   b4b6a:	b503      	push	{r0, r1, lr}
   b4b6c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4b6e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b70:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b74:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4b76:	f002 fcb2 	bl	b74de <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4b7a:	b002      	add	sp, #8
   b4b7c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b80:	b003      	add	sp, #12
   b4b82:	4770      	bx	lr

000b4b84 <loop>:

    client.subscribe("testtopic/RamiCool2");
    client.subscribe("testtopic/RamiCool1");
}
void loop()
{
   b4b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    display.loop();
   b4b86:	4818      	ldr	r0, [pc, #96]	; (b4be8 <loop+0x64>)
   b4b88:	f001 feb1 	bl	b68ee <_ZN16OledWingAdafruit4loopEv>
    if (client.isConnected())
   b4b8c:	4817      	ldr	r0, [pc, #92]	; (b4bec <loop+0x68>)
   b4b8e:	f001 fb1b 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b4b92:	b170      	cbz	r0, b4bb2 <loop+0x2e>
    {
        client.loop();
   b4b94:	4815      	ldr	r0, [pc, #84]	; (b4bec <loop+0x68>)
   b4b96:	f001 fcee 	bl	b6576 <_ZN4MQTT4loopEv>
        client.publish("testtopic/RamiCool", "Send");
   b4b9a:	4a15      	ldr	r2, [pc, #84]	; (b4bf0 <loop+0x6c>)
   b4b9c:	4915      	ldr	r1, [pc, #84]	; (b4bf4 <loop+0x70>)
   b4b9e:	4813      	ldr	r0, [pc, #76]	; (b4bec <loop+0x68>)
   b4ba0:	f001 fc8d 	bl	b64be <_ZN4MQTT7publishEPKcS1_>
        delay(10000);
   b4ba4:	f242 7010 	movw	r0, #10000	; 0x2710
        client.subscribe("testtopic/RamiCool2");
        client.subscribe("testtopic/RamiCool1");
        Serial.println("DIDN'T WORK");
    }
   
}
   b4ba8:	b005      	add	sp, #20
   b4baa:	f85d eb04 	ldr.w	lr, [sp], #4
        delay(10000);
   b4bae:	f002 b96b 	b.w	b6e88 <delay>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4bb2:	4668      	mov	r0, sp
   b4bb4:	f002 f8b8 	bl	b6d28 <spark_deviceID>
        client.connect(System.deviceID());
   b4bb8:	9900      	ldr	r1, [sp, #0]
   b4bba:	480c      	ldr	r0, [pc, #48]	; (b4bec <loop+0x68>)
   b4bbc:	f001 fbf4 	bl	b63a8 <_ZN4MQTT7connectEPKc>
   b4bc0:	4668      	mov	r0, sp
   b4bc2:	f002 fd75 	bl	b76b0 <_ZN6StringD1Ev>
        client.subscribe("testtopic/RamiCool2");
   b4bc6:	490c      	ldr	r1, [pc, #48]	; (b4bf8 <loop+0x74>)
   b4bc8:	4808      	ldr	r0, [pc, #32]	; (b4bec <loop+0x68>)
   b4bca:	f001 fe1c 	bl	b6806 <_ZN4MQTT9subscribeEPKc>
        client.subscribe("testtopic/RamiCool1");
   b4bce:	490b      	ldr	r1, [pc, #44]	; (b4bfc <loop+0x78>)
   b4bd0:	4806      	ldr	r0, [pc, #24]	; (b4bec <loop+0x68>)
   b4bd2:	f001 fe18 	bl	b6806 <_ZN4MQTT9subscribeEPKc>
        Serial.println("DIDN'T WORK");
   b4bd6:	f003 f9bf 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4bda:	4909      	ldr	r1, [pc, #36]	; (b4c00 <loop+0x7c>)
}
   b4bdc:	b005      	add	sp, #20
   b4bde:	f85d eb04 	ldr.w	lr, [sp], #4
        Serial.println("DIDN'T WORK");
   b4be2:	f002 bb80 	b.w	b72e6 <_ZN5Print7printlnEPKc>
   b4be6:	bf00      	nop
   b4be8:	2003e618 	.word	0x2003e618
   b4bec:	2003e5b8 	.word	0x2003e5b8
   b4bf0:	000ba46d 	.word	0x000ba46d
   b4bf4:	000ba472 	.word	0x000ba472
   b4bf8:	000ba485 	.word	0x000ba485
   b4bfc:	000ba499 	.word	0x000ba499
   b4c00:	000ba4ad 	.word	0x000ba4ad

000b4c04 <_Z12resetDisplayv>:
void resetDisplay()
{
   b4c04:	b510      	push	{r4, lr}
    display.clearDisplay();
   b4c06:	4c07      	ldr	r4, [pc, #28]	; (b4c24 <_Z12resetDisplayv+0x20>)
   b4c08:	4620      	mov	r0, r4
   b4c0a:	f000 fe63 	bl	b58d4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4c0e:	2200      	movs	r2, #0
   b4c10:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4c14:	e9c4 2304 	strd	r2, r3, [r4, #16]
    display.setCursor(0, 0);
    display.setTextColor(WHITE);
    display.setTextSize(1);
   b4c18:	4620      	mov	r0, r4
   b4c1a:	2101      	movs	r1, #1
}
   b4c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    display.setTextSize(1);
   b4c20:	f000 bcad 	b.w	b557e <_ZN12Adafruit_GFX11setTextSizeEh>
   b4c24:	2003e618 	.word	0x2003e618

000b4c28 <setup>:
{
   b4c28:	b510      	push	{r4, lr}
    Serial.begin(9600);
   b4c2a:	f003 f995 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4c2e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4c32:	f003 f985 	bl	b7f40 <_ZN9USBSerial5beginEl>
    client.subscribe("testtopic/RamiCool2");
   b4c36:	4c09      	ldr	r4, [pc, #36]	; (b4c5c <setup+0x34>)
    display.setup();
   b4c38:	4809      	ldr	r0, [pc, #36]	; (b4c60 <setup+0x38>)
   b4c3a:	f001 fe2f 	bl	b689c <_ZN16OledWingAdafruit5setupEv>
    resetDisplay();
   b4c3e:	f7ff ffe1 	bl	b4c04 <_Z12resetDisplayv>
    display.display();
   b4c42:	4807      	ldr	r0, [pc, #28]	; (b4c60 <setup+0x38>)
   b4c44:	f001 f8b4 	bl	b5db0 <_ZN16Adafruit_SSD13067displayEv>
    client.subscribe("testtopic/RamiCool2");
   b4c48:	4906      	ldr	r1, [pc, #24]	; (b4c64 <setup+0x3c>)
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	f001 fddb 	bl	b6806 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("testtopic/RamiCool1");
   b4c50:	4620      	mov	r0, r4
   b4c52:	4905      	ldr	r1, [pc, #20]	; (b4c68 <setup+0x40>)
}
   b4c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    client.subscribe("testtopic/RamiCool1");
   b4c58:	f001 bdd5 	b.w	b6806 <_ZN4MQTT9subscribeEPKc>
   b4c5c:	2003e5b8 	.word	0x2003e5b8
   b4c60:	2003e618 	.word	0x2003e618
   b4c64:	000ba485 	.word	0x000ba485
   b4c68:	000ba499 	.word	0x000ba499

000b4c6c <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length)
{
   b4c6c:	b5b0      	push	{r4, r5, r7, lr}
   b4c6e:	ed2d 8b02 	vpush	{d8}
    char p[length + 1];
   b4c72:	f102 0308 	add.w	r3, r2, #8
{
   b4c76:	b088      	sub	sp, #32
    char p[length + 1];
   b4c78:	f023 0307 	bic.w	r3, r3, #7
{
   b4c7c:	af00      	add	r7, sp, #0
    char p[length + 1];
   b4c7e:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4c82:	4614      	mov	r4, r2
   b4c84:	4605      	mov	r5, r0
    memcpy(p, payload, length);
   b4c86:	4668      	mov	r0, sp
   b4c88:	f003 fc7d 	bl	b8586 <memcpy>
    p[length] = NULL;
   b4c8c:	2300      	movs	r3, #0
    String s = p;
   b4c8e:	4669      	mov	r1, sp
   b4c90:	4638      	mov	r0, r7
    p[length] = NULL;
   b4c92:	f80d 3004 	strb.w	r3, [sp, r4]
    String s = p;
   b4c96:	f002 fd56 	bl	b7746 <_ZN6StringC1EPK19__FlashStringHelper>
    double value = s.toFloat();
   b4c9a:	4638      	mov	r0, r7
   b4c9c:	f002 fd8e 	bl	b77bc <_ZNK6String7toFloatEv>
   b4ca0:	ee10 0a10 	vmov	r0, s0
   b4ca4:	f7ff fb20 	bl	b42e8 <__aeabi_f2d>
   b4ca8:	ec41 0b18 	vmov	d8, r0, r1

    String callbackTopic = String(topic);
   b4cac:	4629      	mov	r1, r5
   b4cae:	f107 0010 	add.w	r0, r7, #16
   b4cb2:	f002 fd48 	bl	b7746 <_ZN6StringC1EPK19__FlashStringHelper>

    Serial.printf("%s", p);
   b4cb6:	f003 f94f 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4cba:	466a      	mov	r2, sp
   b4cbc:	4924      	ldr	r1, [pc, #144]	; (b4d50 <_Z8callbackPcPhj+0xe4>)
   b4cbe:	4d25      	ldr	r5, [pc, #148]	; (b4d54 <_Z8callbackPcPhj+0xe8>)
   b4cc0:	f7ff ff52 	bl	b4b68 <_ZN5Print6printfEPKcz>
    Serial.println();
   b4cc4:	f003 f948 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4cc8:	f002 fb01 	bl	b72ce <_ZN5Print7printlnEv>
    Serial.println(value);
   b4ccc:	f003 f944 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4cd0:	eeb0 0a48 	vmov.f32	s0, s16
   b4cd4:	eef0 0a68 	vmov.f32	s1, s17
   b4cd8:	2102      	movs	r1, #2
   b4cda:	f002 fbf5 	bl	b74c8 <_ZN5Print7printlnEdi>
    if (callbackTopic.compareTo(eTopicOne))
   b4cde:	491e      	ldr	r1, [pc, #120]	; (b4d58 <_Z8callbackPcPhj+0xec>)
   b4ce0:	f107 0010 	add.w	r0, r7, #16
   b4ce4:	f002 fd55 	bl	b7792 <_ZNK6String9compareToERKS_>
   b4ce8:	b130      	cbz	r0, b4cf8 <_Z8callbackPcPhj+0x8c>
    {
        Serial.println("LAT");
   b4cea:	f003 f935 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4cee:	491b      	ldr	r1, [pc, #108]	; (b4d5c <_Z8callbackPcPhj+0xf0>)
   b4cf0:	f002 faf9 	bl	b72e6 <_ZN5Print7printlnEPKc>
        latitude = value;
   b4cf4:	ed85 8b00 	vstr	d8, [r5]
    }
    if (callbackTopic.compareTo(eTopicTwo))
   b4cf8:	4919      	ldr	r1, [pc, #100]	; (b4d60 <_Z8callbackPcPhj+0xf4>)
   b4cfa:	4c1a      	ldr	r4, [pc, #104]	; (b4d64 <_Z8callbackPcPhj+0xf8>)
   b4cfc:	f107 0010 	add.w	r0, r7, #16
   b4d00:	f002 fd47 	bl	b7792 <_ZNK6String9compareToERKS_>
   b4d04:	b130      	cbz	r0, b4d14 <_Z8callbackPcPhj+0xa8>
    {
        Serial.println("LONG");
   b4d06:	f003 f927 	bl	b7f58 <_Z16_fetch_usbserialv>
   b4d0a:	4917      	ldr	r1, [pc, #92]	; (b4d68 <_Z8callbackPcPhj+0xfc>)
   b4d0c:	f002 faeb 	bl	b72e6 <_ZN5Print7printlnEPKc>
        longitude = value;
   b4d10:	ed84 8b00 	vstr	d8, [r4]
    }
    resetDisplay();
   b4d14:	f7ff ff76 	bl	b4c04 <_Z12resetDisplayv>
    display.println(latitude);
   b4d18:	ed95 0b00 	vldr	d0, [r5]
   b4d1c:	2102      	movs	r1, #2
   b4d1e:	4813      	ldr	r0, [pc, #76]	; (b4d6c <_Z8callbackPcPhj+0x100>)
   b4d20:	f002 fbd2 	bl	b74c8 <_ZN5Print7printlnEdi>
    display.println(longitude);
   b4d24:	ed94 0b00 	vldr	d0, [r4]
   b4d28:	2102      	movs	r1, #2
   b4d2a:	4810      	ldr	r0, [pc, #64]	; (b4d6c <_Z8callbackPcPhj+0x100>)
   b4d2c:	f002 fbcc 	bl	b74c8 <_ZN5Print7printlnEdi>
    display.display();
   b4d30:	480e      	ldr	r0, [pc, #56]	; (b4d6c <_Z8callbackPcPhj+0x100>)
   b4d32:	f001 f83d 	bl	b5db0 <_ZN16Adafruit_SSD13067displayEv>
    String callbackTopic = String(topic);
   b4d36:	f107 0010 	add.w	r0, r7, #16
   b4d3a:	f002 fcb9 	bl	b76b0 <_ZN6StringD1Ev>
    String s = p;
   b4d3e:	4638      	mov	r0, r7
   b4d40:	f002 fcb6 	bl	b76b0 <_ZN6StringD1Ev>
}
   b4d44:	3720      	adds	r7, #32
   b4d46:	46bd      	mov	sp, r7
   b4d48:	ecbd 8b02 	vpop	{d8}
   b4d4c:	bdb0      	pop	{r4, r5, r7, pc}
   b4d4e:	bf00      	nop
   b4d50:	000ba4b9 	.word	0x000ba4b9
   b4d54:	2003e6a8 	.word	0x2003e6a8
   b4d58:	2003e688 	.word	0x2003e688
   b4d5c:	000ba4bc 	.word	0x000ba4bc
   b4d60:	2003e698 	.word	0x2003e698
   b4d64:	2003e6b0 	.word	0x2003e6b0
   b4d68:	000ba4c0 	.word	0x000ba4c0
   b4d6c:	2003e618 	.word	0x2003e618

000b4d70 <_GLOBAL__sub_I_client>:
void caller()
{
    client.publish("testtopic/RamiCool", "Send");
   b4d70:	b507      	push	{r0, r1, r2, lr}
MQTT client("lab.thewcl.com", 1883, callback);
   b4d72:	2300      	movs	r3, #0
   b4d74:	f240 725b 	movw	r2, #1883	; 0x75b
   b4d78:	9300      	str	r3, [sp, #0]
   b4d7a:	490a      	ldr	r1, [pc, #40]	; (b4da4 <_GLOBAL__sub_I_client+0x34>)
   b4d7c:	4b0a      	ldr	r3, [pc, #40]	; (b4da8 <_GLOBAL__sub_I_client+0x38>)
   b4d7e:	480b      	ldr	r0, [pc, #44]	; (b4dac <_GLOBAL__sub_I_client+0x3c>)
   b4d80:	f001 f946 	bl	b6010 <_ZN4MQTTC1EPKctPFvPcPhjEb>
OledWingAdafruit display;
   b4d84:	2107      	movs	r1, #7
   b4d86:	480a      	ldr	r0, [pc, #40]	; (b4db0 <_GLOBAL__sub_I_client+0x40>)
   b4d88:	f001 fd5a 	bl	b6840 <_ZN16OledWingAdafruitC1Ei>
String eTopicOne = "testtopic/RamiCool2";
   b4d8c:	4909      	ldr	r1, [pc, #36]	; (b4db4 <_GLOBAL__sub_I_client+0x44>)
   b4d8e:	480a      	ldr	r0, [pc, #40]	; (b4db8 <_GLOBAL__sub_I_client+0x48>)
   b4d90:	f002 fcd9 	bl	b7746 <_ZN6StringC1EPK19__FlashStringHelper>
String eTopicTwo = "testtopic/RamiCool1";
   b4d94:	4909      	ldr	r1, [pc, #36]	; (b4dbc <_GLOBAL__sub_I_client+0x4c>)
   b4d96:	480a      	ldr	r0, [pc, #40]	; (b4dc0 <_GLOBAL__sub_I_client+0x50>)
   b4d98:	b003      	add	sp, #12
   b4d9a:	f85d eb04 	ldr.w	lr, [sp], #4
String eTopicTwo = "testtopic/RamiCool1";
   b4d9e:	f002 bcd2 	b.w	b7746 <_ZN6StringC1EPK19__FlashStringHelper>
   b4da2:	bf00      	nop
   b4da4:	000ba4c5 	.word	0x000ba4c5
   b4da8:	000b4c6d 	.word	0x000b4c6d
   b4dac:	2003e5b8 	.word	0x2003e5b8
   b4db0:	2003e618 	.word	0x2003e618
   b4db4:	000ba485 	.word	0x000ba485
   b4db8:	2003e688 	.word	0x2003e688
   b4dbc:	000ba499 	.word	0x000ba499
   b4dc0:	2003e698 	.word	0x2003e698

000b4dc4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4dc8:	b085      	sub	sp, #20
   b4dca:	461f      	mov	r7, r3
   b4dcc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4dd0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4dd4:	eba8 0902 	sub.w	r9, r8, r2
   b4dd8:	eba7 0a01 	sub.w	sl, r7, r1
   b4ddc:	f1b9 0f00 	cmp.w	r9, #0
   b4de0:	bfb8      	it	lt
   b4de2:	f1c9 0900 	rsblt	r9, r9, #0
   b4de6:	f1ba 0f00 	cmp.w	sl, #0
   b4dea:	bfb8      	it	lt
   b4dec:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4df0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4df2:	4683      	mov	fp, r0
   b4df4:	460c      	mov	r4, r1
   b4df6:	4615      	mov	r5, r2
    if (steep) {
   b4df8:	dd04      	ble.n	b4e04 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4dfa:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4dfc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4dfe:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4e00:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4e02:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4e04:	42bc      	cmp	r4, r7
   b4e06:	dd05      	ble.n	b4e14 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4e08:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4e0a:	4645      	mov	r5, r8
   b4e0c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4e0e:	4622      	mov	r2, r4
   b4e10:	463c      	mov	r4, r7
   b4e12:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4e14:	1b3e      	subs	r6, r7, r4
   b4e16:	b2b2      	uxth	r2, r6
   b4e18:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4e1a:	eba8 0205 	sub.w	r2, r8, r5
   b4e1e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4e22:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4e26:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4e2a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4e2e:	4545      	cmp	r5, r8
   b4e30:	bfb4      	ite	lt
   b4e32:	2201      	movlt	r2, #1
   b4e34:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4e38:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4e3a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4e3c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4e3e:	42bc      	cmp	r4, r7
   b4e40:	dc1c      	bgt.n	b4e7c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4e42:	f8db 2000 	ldr.w	r2, [fp]
   b4e46:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4e48:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4e4a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4e4e:	bfc7      	ittee	gt
   b4e50:	4629      	movgt	r1, r5
   b4e52:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4e54:	462a      	movle	r2, r5
   b4e56:	4621      	movle	r1, r4
   b4e58:	4658      	mov	r0, fp
   b4e5a:	47c0      	blx	r8
        }
        err -= dy;
   b4e5c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4e5e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4e60:	1ab6      	subs	r6, r6, r2
   b4e62:	b2b1      	uxth	r1, r6
   b4e64:	b236      	sxth	r6, r6
        if (err < 0) {
   b4e66:	2e00      	cmp	r6, #0
   b4e68:	da05      	bge.n	b4e76 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4e6a:	9a02      	ldr	r2, [sp, #8]
   b4e6c:	4415      	add	r5, r2
            err += dx;
   b4e6e:	9a00      	ldr	r2, [sp, #0]
   b4e70:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4e72:	b22d      	sxth	r5, r5
            err += dx;
   b4e74:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4e76:	3401      	adds	r4, #1
   b4e78:	b224      	sxth	r4, r4
   b4e7a:	e7e0      	b.n	b4e3e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4e7c:	b005      	add	sp, #20
   b4e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4e82 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4e82:	4770      	bx	lr

000b4e84 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4e84:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4e86:	6804      	ldr	r4, [r0, #0]
   b4e88:	6924      	ldr	r4, [r4, #16]
   b4e8a:	46a4      	mov	ip, r4
}
   b4e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4e90:	4760      	bx	ip

000b4e92 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4e92:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4e94:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4e96:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4e9a:	9502      	str	r5, [sp, #8]
   b4e9c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4e9e:	46a4      	mov	ip, r4
}
   b4ea0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4ea2:	4760      	bx	ip

000b4ea4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4ea4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4ea6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4ea8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4eac:	9502      	str	r5, [sp, #8]
   b4eae:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4eb0:	46a4      	mov	ip, r4
}
   b4eb2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4eb4:	4760      	bx	ip

000b4eb6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4eb6:	b470      	push	{r4, r5, r6}
   b4eb8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4ebc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4ec0:	6804      	ldr	r4, [r0, #0]
   b4ec2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4ec6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4ec8:	46a4      	mov	ip, r4
}
   b4eca:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4ecc:	4760      	bx	ip

000b4ece <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4ece:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4ed2:	461c      	mov	r4, r3
    startWrite();
   b4ed4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4ed6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4eda:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4edc:	4605      	mov	r5, r0
   b4ede:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4ee0:	3c01      	subs	r4, #1
   b4ee2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4ee4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4ee6:	b224      	sxth	r4, r4
    startWrite();
   b4ee8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4eea:	682b      	ldr	r3, [r5, #0]
   b4eec:	f8cd 8004 	str.w	r8, [sp, #4]
   b4ef0:	9400      	str	r4, [sp, #0]
   b4ef2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4ef4:	4628      	mov	r0, r5
   b4ef6:	463b      	mov	r3, r7
   b4ef8:	4632      	mov	r2, r6
   b4efa:	4639      	mov	r1, r7
   b4efc:	47a0      	blx	r4
    endWrite();
   b4efe:	682b      	ldr	r3, [r5, #0]
   b4f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f02:	4628      	mov	r0, r5
}
   b4f04:	b002      	add	sp, #8
   b4f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4f0a:	4718      	bx	r3

000b4f0c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4f0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4f10:	461d      	mov	r5, r3
    startWrite();
   b4f12:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4f14:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4f18:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4f1a:	4604      	mov	r4, r0
   b4f1c:	4617      	mov	r7, r2
   b4f1e:	460e      	mov	r6, r1
    startWrite();
   b4f20:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4f22:	e9cd 7800 	strd	r7, r8, [sp]
   b4f26:	6822      	ldr	r2, [r4, #0]
   b4f28:	1e6b      	subs	r3, r5, #1
   b4f2a:	4433      	add	r3, r6
   b4f2c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4f2e:	4620      	mov	r0, r4
   b4f30:	b21b      	sxth	r3, r3
   b4f32:	463a      	mov	r2, r7
   b4f34:	4631      	mov	r1, r6
   b4f36:	47a8      	blx	r5
    endWrite();
   b4f38:	6823      	ldr	r3, [r4, #0]
   b4f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f3c:	4620      	mov	r0, r4
}
   b4f3e:	b002      	add	sp, #8
   b4f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4f44:	4718      	bx	r3

000b4f46 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4f46:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f4a:	461e      	mov	r6, r3
    startWrite();
   b4f4c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4f4e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4f52:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4f54:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4f58:	460c      	mov	r4, r1
   b4f5a:	4605      	mov	r5, r0
   b4f5c:	4617      	mov	r7, r2
    startWrite();
   b4f5e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4f60:	4426      	add	r6, r4
   b4f62:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4f64:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4f66:	da0b      	bge.n	b4f80 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4f68:	f8cd 8000 	str.w	r8, [sp]
   b4f6c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4f70:	4621      	mov	r1, r4
   b4f72:	464b      	mov	r3, r9
   b4f74:	463a      	mov	r2, r7
   b4f76:	4628      	mov	r0, r5
   b4f78:	3401      	adds	r4, #1
   b4f7a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4f7c:	b224      	sxth	r4, r4
   b4f7e:	e7f0      	b.n	b4f62 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f82:	4628      	mov	r0, r5
}
   b4f84:	b002      	add	sp, #8
   b4f86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4f8a:	4718      	bx	r3

000b4f8c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4f8c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4f8e:	6802      	ldr	r2, [r0, #0]
   b4f90:	9101      	str	r1, [sp, #4]
   b4f92:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4f96:	9100      	str	r1, [sp, #0]
   b4f98:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4f9a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4f9e:	2200      	movs	r2, #0
   b4fa0:	4611      	mov	r1, r2
   b4fa2:	47a0      	blx	r4
}
   b4fa4:	b002      	add	sp, #8
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4fac:	4299      	cmp	r1, r3
        uint16_t color) {
   b4fae:	4616      	mov	r6, r2
   b4fb0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4fb4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4fb8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4fba:	4680      	mov	r8, r0
   b4fbc:	460d      	mov	r5, r1
   b4fbe:	461c      	mov	r4, r3
    if(x0 == x1){
   b4fc0:	d113      	bne.n	b4fea <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4fc2:	42be      	cmp	r6, r7
   b4fc4:	bfc8      	it	gt
   b4fc6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4fc8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4fcc:	bfc4      	itt	gt
   b4fce:	463e      	movgt	r6, r7
   b4fd0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4fd2:	1c7b      	adds	r3, r7, #1
   b4fd4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4fd6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4fd8:	b21b      	sxth	r3, r3
   b4fda:	4632      	mov	r2, r6
   b4fdc:	4629      	mov	r1, r5
   b4fde:	4640      	mov	r0, r8
   b4fe0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4fe2:	b003      	add	sp, #12
   b4fe4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4fe8:	4760      	bx	ip
    } else if(y0 == y1){
   b4fea:	42be      	cmp	r6, r7
   b4fec:	d10a      	bne.n	b5004 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4fee:	4299      	cmp	r1, r3
   b4ff0:	bfc2      	ittt	gt
   b4ff2:	460b      	movgt	r3, r1
   b4ff4:	4625      	movgt	r5, r4
   b4ff6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ff8:	1c63      	adds	r3, r4, #1
   b4ffa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4ffe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5000:	1b5b      	subs	r3, r3, r5
   b5002:	e7e9      	b.n	b4fd8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5004:	6953      	ldr	r3, [r2, #20]
   b5006:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5008:	e9cd 7900 	strd	r7, r9, [sp]
   b500c:	f8d8 3000 	ldr.w	r3, [r8]
   b5010:	4640      	mov	r0, r8
   b5012:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5014:	4632      	mov	r2, r6
   b5016:	4623      	mov	r3, r4
   b5018:	4629      	mov	r1, r5
   b501a:	47b8      	blx	r7
        endWrite();
   b501c:	f8d8 3000 	ldr.w	r3, [r8]
   b5020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5022:	4640      	mov	r0, r8
}
   b5024:	b003      	add	sp, #12
   b5026:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b502a:	4718      	bx	r3

000b502c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b502c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5030:	461d      	mov	r5, r3
    startWrite();
   b5032:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5034:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5038:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b503a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b503e:	4604      	mov	r4, r0
   b5040:	460f      	mov	r7, r1
   b5042:	4616      	mov	r6, r2
    startWrite();
   b5044:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5046:	6823      	ldr	r3, [r4, #0]
   b5048:	f8cd 8000 	str.w	r8, [sp]
   b504c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5050:	4632      	mov	r2, r6
   b5052:	462b      	mov	r3, r5
   b5054:	4639      	mov	r1, r7
   b5056:	4620      	mov	r0, r4
   b5058:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b505a:	6823      	ldr	r3, [r4, #0]
   b505c:	f8cd 8000 	str.w	r8, [sp]
   b5060:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5064:	4432      	add	r2, r6
   b5066:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b506a:	4639      	mov	r1, r7
   b506c:	462b      	mov	r3, r5
   b506e:	4620      	mov	r0, r4
   b5070:	b212      	sxth	r2, r2
   b5072:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5074:	6823      	ldr	r3, [r4, #0]
   b5076:	f8cd 8000 	str.w	r8, [sp]
   b507a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b507e:	4632      	mov	r2, r6
   b5080:	464b      	mov	r3, r9
   b5082:	4639      	mov	r1, r7
   b5084:	4620      	mov	r0, r4
   b5086:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5088:	1e6b      	subs	r3, r5, #1
   b508a:	19d9      	adds	r1, r3, r7
   b508c:	6823      	ldr	r3, [r4, #0]
   b508e:	f8cd 8000 	str.w	r8, [sp]
   b5092:	6a1d      	ldr	r5, [r3, #32]
   b5094:	4620      	mov	r0, r4
   b5096:	464b      	mov	r3, r9
   b5098:	4632      	mov	r2, r6
   b509a:	b209      	sxth	r1, r1
   b509c:	47a8      	blx	r5
    endWrite();
   b509e:	6823      	ldr	r3, [r4, #0]
   b50a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50a2:	4620      	mov	r0, r4
}
   b50a4:	b002      	add	sp, #8
   b50a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b50aa:	4718      	bx	r3

000b50ac <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b50ac:	4770      	bx	lr

000b50ae <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b50ae:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b50b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b50b6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b50b8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b50ba:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b50be:	bf59      	ittee	pl
   b50c0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b50c2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b50c4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b50c6:	81c3      	strhmi	r3, [r0, #14]
}
   b50c8:	4770      	bx	lr
	...

000b50cc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b50cc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b50ce:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b50d0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b50d2:	4a07      	ldr	r2, [pc, #28]	; (b50f0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b50d4:	4d07      	ldr	r5, [pc, #28]	; (b50f4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b50d6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b50d8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b50da:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b50dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b50e0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b50e4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b50e6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b50e8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b50ea:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b50ec:	6204      	str	r4, [r0, #32]
}
   b50ee:	bd30      	pop	{r4, r5, pc}
   b50f0:	01000101 	.word	0x01000101
   b50f4:	000ba9dc 	.word	0x000ba9dc

000b50f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b50f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50fc:	b089      	sub	sp, #36	; 0x24
   b50fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5102:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5104:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5108:	9304      	str	r3, [sp, #16]
   b510a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b510e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5110:	9305      	str	r3, [sp, #20]
   b5112:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5116:	4604      	mov	r4, r0
    startWrite();
   b5118:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b511a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b511e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5122:	bf48      	it	mi
   b5124:	f108 020e 	addmi.w	r2, r8, #14
   b5128:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b512c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b512e:	4635      	mov	r5, r6
   b5130:	9b03      	ldr	r3, [sp, #12]
   b5132:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5134:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5138:	189a      	adds	r2, r3, r2
   b513a:	9b05      	ldr	r3, [sp, #20]
   b513c:	428b      	cmp	r3, r1
   b513e:	b212      	sxth	r2, r2
   b5140:	dd27      	ble.n	b5192 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5142:	9b04      	ldr	r3, [sp, #16]
   b5144:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5146:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b514a:	9306      	str	r3, [sp, #24]
   b514c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5150:	4580      	cmp	r8, r0
   b5152:	fa1f f189 	uxth.w	r1, r9
   b5156:	dd17      	ble.n	b5188 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5158:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b515a:	bf05      	ittet	eq
   b515c:	9b06      	ldreq	r3, [sp, #24]
   b515e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5160:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5162:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5164:	bf18      	it	ne
   b5166:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5168:	062b      	lsls	r3, r5, #24
   b516a:	d50a      	bpl.n	b5182 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b516c:	9b02      	ldr	r3, [sp, #8]
   b516e:	6820      	ldr	r0, [r4, #0]
   b5170:	9207      	str	r2, [sp, #28]
   b5172:	4419      	add	r1, r3
   b5174:	6983      	ldr	r3, [r0, #24]
   b5176:	b209      	sxth	r1, r1
   b5178:	461f      	mov	r7, r3
   b517a:	4620      	mov	r0, r4
   b517c:	4653      	mov	r3, sl
   b517e:	47b8      	blx	r7
   b5180:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5182:	f109 0901 	add.w	r9, r9, #1
   b5186:	e7e1      	b.n	b514c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5188:	9b01      	ldr	r3, [sp, #4]
   b518a:	3301      	adds	r3, #1
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	445e      	add	r6, fp
   b5190:	e7ce      	b.n	b5130 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5192:	6823      	ldr	r3, [r4, #0]
   b5194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5196:	4620      	mov	r0, r4
}
   b5198:	b009      	add	sp, #36	; 0x24
   b519a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b519e:	4718      	bx	r3

000b51a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b51a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51a4:	ed2d 8b02 	vpush	{d8}
   b51a8:	b091      	sub	sp, #68	; 0x44
   b51aa:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b51ac:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b51ae:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b51b2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b51b6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b51ba:	9103      	str	r1, [sp, #12]
   b51bc:	461f      	mov	r7, r3
   b51be:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b51c2:	9304      	str	r3, [sp, #16]
   b51c4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b51c6:	2a00      	cmp	r2, #0
   b51c8:	f040 80c5 	bne.w	b5356 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b51cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b51d0:	428b      	cmp	r3, r1
   b51d2:	f340 814c 	ble.w	b546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b51d6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b51da:	42b3      	cmp	r3, r6
   b51dc:	f340 8147 	ble.w	b546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b51e0:	2306      	movs	r3, #6
   b51e2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b51e6:	2b00      	cmp	r3, #0
   b51e8:	f340 8141 	ble.w	b546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b51ec:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b51f0:	2b00      	cmp	r3, #0
   b51f2:	f340 813c 	ble.w	b546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b51f6:	7f03      	ldrb	r3, [r0, #28]
   b51f8:	b91b      	cbnz	r3, b5202 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b51fa:	2faf      	cmp	r7, #175	; 0xaf
   b51fc:	bf84      	itt	hi
   b51fe:	3701      	addhi	r7, #1
   b5200:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5202:	f8db 3000 	ldr.w	r3, [fp]
   b5206:	4658      	mov	r0, fp
   b5208:	695b      	ldr	r3, [r3, #20]
   b520a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b520c:	2205      	movs	r2, #5
   b520e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5210:	2200      	movs	r2, #0
   b5212:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5214:	4a98      	ldr	r2, [pc, #608]	; (b5478 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5216:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b521a:	18d3      	adds	r3, r2, r3
   b521c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b521e:	b2b3      	uxth	r3, r6
   b5220:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5222:	9a05      	ldr	r2, [sp, #20]
   b5224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5226:	5c9b      	ldrb	r3, [r3, r2]
   b5228:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b522a:	b2ab      	uxth	r3, r5
   b522c:	930b      	str	r3, [sp, #44]	; 0x2c
   b522e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5232:	9308      	str	r3, [sp, #32]
   b5234:	9b03      	ldr	r3, [sp, #12]
   b5236:	fb02 f905 	mul.w	r9, r2, r5
   b523a:	fa19 f983 	uxtah	r9, r9, r3
   b523e:	fa0f f389 	sxth.w	r3, r9
   b5242:	ee08 3a10 	vmov	s16, r3
   b5246:	2308      	movs	r3, #8
   b5248:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b524a:	9b03      	ldr	r3, [sp, #12]
   b524c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5250:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5254:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5258:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b525a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b525e:	07d2      	lsls	r2, r2, #31
   b5260:	d552      	bpl.n	b5308 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5262:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5264:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5268:	d13e      	bne.n	b52e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b526a:	2c01      	cmp	r4, #1
   b526c:	d13c      	bne.n	b52e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b526e:	699b      	ldr	r3, [r3, #24]
   b5270:	9906      	ldr	r1, [sp, #24]
   b5272:	461f      	mov	r7, r3
   b5274:	9b04      	ldr	r3, [sp, #16]
   b5276:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5278:	b212      	sxth	r2, r2
   b527a:	4651      	mov	r1, sl
   b527c:	4658      	mov	r0, fp
   b527e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5280:	f109 0301 	add.w	r3, r9, #1
   b5284:	fa4f f983 	sxtb.w	r9, r3
   b5288:	9b07      	ldr	r3, [sp, #28]
   b528a:	085b      	lsrs	r3, r3, #1
   b528c:	9307      	str	r3, [sp, #28]
   b528e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5290:	3b01      	subs	r3, #1
   b5292:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5296:	930a      	str	r3, [sp, #40]	; 0x28
   b5298:	d1de      	bne.n	b5258 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b529a:	9f05      	ldr	r7, [sp, #20]
   b529c:	3701      	adds	r7, #1
   b529e:	b27b      	sxtb	r3, r7
   b52a0:	9305      	str	r3, [sp, #20]
   b52a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b52a4:	3b01      	subs	r3, #1
   b52a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b52aa:	9309      	str	r3, [sp, #36]	; 0x24
   b52ac:	d1b9      	bne.n	b5222 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b52ae:	9b04      	ldr	r3, [sp, #16]
   b52b0:	4543      	cmp	r3, r8
   b52b2:	d00f      	beq.n	b52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b52b4:	2d01      	cmp	r5, #1
   b52b6:	f8db 3000 	ldr.w	r3, [fp]
   b52ba:	d13b      	bne.n	b5334 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b52bc:	2c01      	cmp	r4, #1
   b52be:	d139      	bne.n	b5334 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b52c0:	9908      	ldr	r1, [sp, #32]
   b52c2:	f8cd 8000 	str.w	r8, [sp]
   b52c6:	3105      	adds	r1, #5
   b52c8:	6a1c      	ldr	r4, [r3, #32]
   b52ca:	4632      	mov	r2, r6
   b52cc:	2308      	movs	r3, #8
   b52ce:	b209      	sxth	r1, r1
   b52d0:	4658      	mov	r0, fp
   b52d2:	47a0      	blx	r4
        endWrite();
   b52d4:	f8db 3000 	ldr.w	r3, [fp]
   b52d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52da:	4658      	mov	r0, fp
}
   b52dc:	b011      	add	sp, #68	; 0x44
   b52de:	ecbd 8b02 	vpop	{d8}
   b52e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b52e6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b52e8:	9906      	ldr	r1, [sp, #24]
   b52ea:	fb14 f202 	smulbb	r2, r4, r2
   b52ee:	440a      	add	r2, r1
   b52f0:	9904      	ldr	r1, [sp, #16]
   b52f2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52f4:	9400      	str	r4, [sp, #0]
   b52f6:	69db      	ldr	r3, [r3, #28]
   b52f8:	ee18 1a10 	vmov	r1, s16
   b52fc:	461f      	mov	r7, r3
   b52fe:	b212      	sxth	r2, r2
   b5300:	462b      	mov	r3, r5
   b5302:	4658      	mov	r0, fp
   b5304:	47b8      	blx	r7
   b5306:	e7bb      	b.n	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5308:	9a04      	ldr	r2, [sp, #16]
   b530a:	4542      	cmp	r2, r8
   b530c:	d0b8      	beq.n	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b530e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5310:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5314:	d107      	bne.n	b5326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5316:	2c01      	cmp	r4, #1
   b5318:	d105      	bne.n	b5326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b531a:	699b      	ldr	r3, [r3, #24]
   b531c:	9906      	ldr	r1, [sp, #24]
   b531e:	461f      	mov	r7, r3
   b5320:	440a      	add	r2, r1
   b5322:	4643      	mov	r3, r8
   b5324:	e7a8      	b.n	b5278 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5326:	9906      	ldr	r1, [sp, #24]
   b5328:	f8cd 8004 	str.w	r8, [sp, #4]
   b532c:	fb14 f202 	smulbb	r2, r4, r2
   b5330:	440a      	add	r2, r1
   b5332:	e7df      	b.n	b52f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5336:	f8cd 8004 	str.w	r8, [sp, #4]
   b533a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b533e:	9a08      	ldr	r2, [sp, #32]
   b5340:	00e4      	lsls	r4, r4, #3
   b5342:	440a      	add	r2, r1
   b5344:	4611      	mov	r1, r2
   b5346:	9400      	str	r4, [sp, #0]
   b5348:	69dc      	ldr	r4, [r3, #28]
   b534a:	4632      	mov	r2, r6
   b534c:	462b      	mov	r3, r5
   b534e:	b209      	sxth	r1, r1
   b5350:	4658      	mov	r0, fp
   b5352:	47a0      	blx	r4
        endWrite();
   b5354:	e7be      	b.n	b52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5356:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5358:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b535a:	6812      	ldr	r2, [r2, #0]
   b535c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b535e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5360:	b2ff      	uxtb	r7, r7
   b5362:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5366:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b536a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b536c:	789a      	ldrb	r2, [r3, #2]
   b536e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5370:	78da      	ldrb	r2, [r3, #3]
   b5372:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5374:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5376:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b537a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b537e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5380:	d801      	bhi.n	b5386 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5382:	2c01      	cmp	r4, #1
   b5384:	d957      	bls.n	b5436 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5386:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b538a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b538c:	fa0f f38a 	sxth.w	r3, sl
   b5390:	9307      	str	r3, [sp, #28]
        startWrite();
   b5392:	f8db 3000 	ldr.w	r3, [fp]
   b5396:	4658      	mov	r0, fp
   b5398:	695b      	ldr	r3, [r3, #20]
   b539a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b539c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b539e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53a2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53a4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b53a8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b53aa:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53ac:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b53ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b53b0:	429f      	cmp	r7, r3
   b53b2:	d28f      	bcs.n	b52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53b4:	9b07      	ldr	r3, [sp, #28]
   b53b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b53b8:	443b      	add	r3, r7
   b53ba:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b53be:	2200      	movs	r2, #0
   b53c0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53c4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53c6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53ca:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53ce:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53d2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b53d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b53d6:	9905      	ldr	r1, [sp, #20]
   b53d8:	4291      	cmp	r1, r2
   b53da:	d241      	bcs.n	b5460 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b53dc:	1c5a      	adds	r2, r3, #1
   b53de:	b2d2      	uxtb	r2, r2
   b53e0:	075b      	lsls	r3, r3, #29
   b53e2:	920d      	str	r2, [sp, #52]	; 0x34
   b53e4:	d107      	bne.n	b53f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b53e6:	9b06      	ldr	r3, [sp, #24]
   b53e8:	9906      	ldr	r1, [sp, #24]
   b53ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b53ec:	3301      	adds	r3, #1
   b53ee:	b29b      	uxth	r3, r3
   b53f0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b53f4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b53f6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b53fa:	d012      	beq.n	b5422 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b53fc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53fe:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5402:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5406:	d11a      	bne.n	b543e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5408:	2c01      	cmp	r4, #1
   b540a:	d118      	bne.n	b543e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b540c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b540e:	699b      	ldr	r3, [r3, #24]
   b5410:	4411      	add	r1, r2
   b5412:	9a05      	ldr	r2, [sp, #20]
   b5414:	4411      	add	r1, r2
   b5416:	461e      	mov	r6, r3
   b5418:	4652      	mov	r2, sl
   b541a:	9b04      	ldr	r3, [sp, #16]
   b541c:	b209      	sxth	r1, r1
   b541e:	4658      	mov	r0, fp
   b5420:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5422:	9e05      	ldr	r6, [sp, #20]
   b5424:	3601      	adds	r6, #1
   b5426:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5428:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b542c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b542e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5434:	e7ce      	b.n	b53d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5436:	2300      	movs	r3, #0
   b5438:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b543c:	e7a9      	b.n	b5392 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b543e:	9805      	ldr	r0, [sp, #20]
   b5440:	9a08      	ldr	r2, [sp, #32]
   b5442:	4402      	add	r2, r0
   b5444:	fb02 1105 	mla	r1, r2, r5, r1
   b5448:	9a04      	ldr	r2, [sp, #16]
   b544a:	e9cd 4200 	strd	r4, r2, [sp]
   b544e:	69db      	ldr	r3, [r3, #28]
   b5450:	ee18 2a10 	vmov	r2, s16
   b5454:	461e      	mov	r6, r3
   b5456:	b209      	sxth	r1, r1
   b5458:	462b      	mov	r3, r5
   b545a:	4658      	mov	r0, fp
   b545c:	47b0      	blx	r6
   b545e:	e7e0      	b.n	b5422 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5460:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5462:	3701      	adds	r7, #1
   b5464:	4498      	add	r8, r3
   b5466:	fa5f f888 	uxtb.w	r8, r8
   b546a:	b2ff      	uxtb	r7, r7
   b546c:	e79f      	b.n	b53ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b546e:	b011      	add	sp, #68	; 0x44
   b5470:	ecbd 8b02 	vpop	{d8}
   b5474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5478:	000ba4d4 	.word	0x000ba4d4

000b547c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b547c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b547e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5480:	b085      	sub	sp, #20
   b5482:	4604      	mov	r4, r0
   b5484:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5486:	2a00      	cmp	r2, #0
   b5488:	d134      	bne.n	b54f4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b548a:	290a      	cmp	r1, #10
   b548c:	d108      	bne.n	b54a0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b548e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5490:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5492:	7e42      	ldrb	r2, [r0, #25]
   b5494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5498:	8263      	strh	r3, [r4, #18]
}
   b549a:	2001      	movs	r0, #1
   b549c:	b005      	add	sp, #20
   b549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b54a0:	290d      	cmp	r1, #13
   b54a2:	d0fa      	beq.n	b549a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b54a4:	7ee1      	ldrb	r1, [r4, #27]
   b54a6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b54a8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b54aa:	b171      	cbz	r1, b54ca <_ZN12Adafruit_GFX5writeEh+0x4e>
   b54ac:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b54b0:	2106      	movs	r1, #6
   b54b2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b54b6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b54ba:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b54bc:	bfc1      	itttt	gt
   b54be:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b54c2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b54c4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b54c8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b54ca:	8ae2      	ldrh	r2, [r4, #22]
   b54cc:	9201      	str	r2, [sp, #4]
   b54ce:	8aa2      	ldrh	r2, [r4, #20]
   b54d0:	9200      	str	r2, [sp, #0]
   b54d2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b54d6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b54da:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b54de:	4620      	mov	r0, r4
   b54e0:	f7ff fe5e 	bl	b51a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b54e4:	7e23      	ldrb	r3, [r4, #24]
   b54e6:	8a22      	ldrh	r2, [r4, #16]
   b54e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b54ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b54f0:	8223      	strh	r3, [r4, #16]
   b54f2:	e7d2      	b.n	b549a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b54f4:	290a      	cmp	r1, #10
   b54f6:	d107      	bne.n	b5508 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b54f8:	2300      	movs	r3, #0
   b54fa:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b54fc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b54fe:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5500:	8a43      	ldrh	r3, [r0, #18]
   b5502:	fb01 3302 	mla	r3, r1, r2, r3
   b5506:	e7c7      	b.n	b5498 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5508:	290d      	cmp	r1, #13
   b550a:	d0c6      	beq.n	b549a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b550c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b550e:	42a9      	cmp	r1, r5
   b5510:	d3c3      	bcc.n	b549a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5512:	7a51      	ldrb	r1, [r2, #9]
   b5514:	4299      	cmp	r1, r3
   b5516:	d3c0      	bcc.n	b549a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5518:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b551a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b551c:	b2ed      	uxtb	r5, r5
   b551e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5522:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5524:	b328      	cbz	r0, b5572 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5526:	78e9      	ldrb	r1, [r5, #3]
   b5528:	b319      	cbz	r1, b5572 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b552a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b552c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b552e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5530:	b191      	cbz	r1, b5558 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5532:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5536:	4408      	add	r0, r1
   b5538:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b553c:	fb06 1100 	mla	r1, r6, r0, r1
   b5540:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5544:	4281      	cmp	r1, r0
   b5546:	dd07      	ble.n	b5558 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5548:	2000      	movs	r0, #0
   b554a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b554c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5550:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5552:	fb02 1207 	mla	r2, r2, r7, r1
   b5556:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5558:	8ae2      	ldrh	r2, [r4, #22]
   b555a:	9201      	str	r2, [sp, #4]
   b555c:	8aa2      	ldrh	r2, [r4, #20]
   b555e:	9200      	str	r2, [sp, #0]
   b5560:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5564:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5568:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b556c:	4620      	mov	r0, r4
   b556e:	f7ff fe17 	bl	b51a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5572:	7929      	ldrb	r1, [r5, #4]
   b5574:	7e22      	ldrb	r2, [r4, #24]
   b5576:	8a23      	ldrh	r3, [r4, #16]
   b5578:	fb01 3302 	mla	r3, r1, r2, r3
   b557c:	e7b8      	b.n	b54f0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b557e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b557e:	2901      	cmp	r1, #1
   b5580:	bf38      	it	cc
   b5582:	2101      	movcc	r1, #1
   b5584:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5586:	7641      	strb	r1, [r0, #25]
}
   b5588:	4770      	bx	lr

000b558a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b558a:	4770      	bx	lr

000b558c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b558c:	b510      	push	{r4, lr}
  }
   b558e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5590:	4604      	mov	r4, r0
  }
   b5592:	f7ff fad2 	bl	b4b3a <_ZdlPvj>
   b5596:	4620      	mov	r0, r4
   b5598:	bd10      	pop	{r4, pc}
	...

000b559c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b559c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b559e:	4604      	mov	r4, r0
   b55a0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b55a2:	7922      	ldrb	r2, [r4, #4]
   b55a4:	68a3      	ldr	r3, [r4, #8]
   b55a6:	b132      	cbz	r2, b55b6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b55a8:	b9a3      	cbnz	r3, b55d4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b55aa:	490b      	ldr	r1, [pc, #44]	; (b55d8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b55ac:	b002      	add	sp, #8
   b55ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b55b2:	f001 be85 	b.w	b72c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b55b6:	4a09      	ldr	r2, [pc, #36]	; (b55dc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b55b8:	7b26      	ldrb	r6, [r4, #12]
   b55ba:	4d09      	ldr	r5, [pc, #36]	; (b55e0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b55bc:	4909      	ldr	r1, [pc, #36]	; (b55e4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b55be:	7b64      	ldrb	r4, [r4, #13]
   b55c0:	2e01      	cmp	r6, #1
   b55c2:	bf18      	it	ne
   b55c4:	4629      	movne	r1, r5
   b55c6:	e9cd 1400 	strd	r1, r4, [sp]
   b55ca:	4907      	ldr	r1, [pc, #28]	; (b55e8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b55cc:	f7ff facc 	bl	b4b68 <_ZN5Print6printfEPKcz>
  }
   b55d0:	b002      	add	sp, #8
   b55d2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b55d4:	4a05      	ldr	r2, [pc, #20]	; (b55ec <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b55d6:	e7ef      	b.n	b55b8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b55d8:	000baa3d 	.word	0x000baa3d
   b55dc:	000baa34 	.word	0x000baa34
   b55e0:	000baa39 	.word	0x000baa39
   b55e4:	000baa35 	.word	0x000baa35
   b55e8:	000baa53 	.word	0x000baa53
   b55ec:	000baa2c 	.word	0x000baa2c

000b55f0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b55f0:	b510      	push	{r4, lr}
   b55f2:	4b04      	ldr	r3, [pc, #16]	; (b5604 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b55f4:	6003      	str	r3, [r0, #0]
   b55f6:	4604      	mov	r4, r0
  if(buffer) {
   b55f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b55fa:	b108      	cbz	r0, b5600 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b55fc:	f001 fc0c 	bl	b6e18 <free>
    buffer = NULL;
  }
}
   b5600:	4620      	mov	r0, r4
   b5602:	bd10      	pop	{r4, pc}
   b5604:	000baf2c 	.word	0x000baf2c

000b5608 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5608:	b510      	push	{r4, lr}
   b560a:	4604      	mov	r4, r0
}
   b560c:	f7ff fff0 	bl	b55f0 <_ZN16Adafruit_SSD1306D1Ev>
   b5610:	4620      	mov	r0, r4
   b5612:	2150      	movs	r1, #80	; 0x50
   b5614:	f7ff fa91 	bl	b4b3a <_ZdlPvj>
   b5618:	4620      	mov	r0, r4
   b561a:	bd10      	pop	{r4, pc}

000b561c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b561c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b561e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5620:	db4b      	blt.n	b56ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5622:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5626:	428c      	cmp	r4, r1
   b5628:	dd47      	ble.n	b56ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b562a:	2a00      	cmp	r2, #0
   b562c:	db45      	blt.n	b56ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b562e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5632:	4294      	cmp	r4, r2
   b5634:	dd41      	ble.n	b56ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5636:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5638:	2c02      	cmp	r4, #2
   b563a:	d01f      	beq.n	b567c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b563c:	2c03      	cmp	r4, #3
   b563e:	d026      	beq.n	b568e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5640:	2c01      	cmp	r4, #1
   b5642:	d104      	bne.n	b564e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5644:	8904      	ldrh	r4, [r0, #8]
   b5646:	43d2      	mvns	r2, r2
   b5648:	4414      	add	r4, r2
      break;
   b564a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b564c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b564e:	2b01      	cmp	r3, #1
   b5650:	d023      	beq.n	b569a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5652:	2b02      	cmp	r3, #2
   b5654:	d032      	beq.n	b56bc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5656:	bb83      	cbnz	r3, b56ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5658:	2a00      	cmp	r2, #0
   b565a:	4613      	mov	r3, r2
   b565c:	8904      	ldrh	r4, [r0, #8]
   b565e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5660:	bfb8      	it	lt
   b5662:	1dd3      	addlt	r3, r2, #7
   b5664:	10db      	asrs	r3, r3, #3
   b5666:	fb13 1104 	smlabb	r1, r3, r4, r1
   b566a:	f002 0207 	and.w	r2, r2, #7
   b566e:	2301      	movs	r3, #1
   b5670:	4093      	lsls	r3, r2
   b5672:	5c42      	ldrb	r2, [r0, r1]
   b5674:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5678:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b567a:	e01e      	b.n	b56ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b567c:	8904      	ldrh	r4, [r0, #8]
   b567e:	3c01      	subs	r4, #1
   b5680:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5682:	8944      	ldrh	r4, [r0, #10]
   b5684:	43d2      	mvns	r2, r2
   b5686:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5688:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b568a:	b212      	sxth	r2, r2
      break;
   b568c:	e7df      	b.n	b564e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b568e:	8944      	ldrh	r4, [r0, #10]
   b5690:	3c01      	subs	r4, #1
   b5692:	1a64      	subs	r4, r4, r1
      break;
   b5694:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5696:	b222      	sxth	r2, r4
      break;
   b5698:	e7d9      	b.n	b564e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b569a:	2a00      	cmp	r2, #0
   b569c:	8904      	ldrh	r4, [r0, #8]
   b569e:	4613      	mov	r3, r2
   b56a0:	bfb8      	it	lt
   b56a2:	1dd3      	addlt	r3, r2, #7
   b56a4:	10db      	asrs	r3, r3, #3
   b56a6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b56aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b56ac:	f002 0007 	and.w	r0, r2, #7
   b56b0:	2201      	movs	r2, #1
   b56b2:	4082      	lsls	r2, r0
   b56b4:	5c58      	ldrb	r0, [r3, r1]
   b56b6:	4302      	orrs	r2, r0
   b56b8:	545a      	strb	r2, [r3, r1]
}
   b56ba:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b56bc:	2a00      	cmp	r2, #0
   b56be:	4613      	mov	r3, r2
   b56c0:	8904      	ldrh	r4, [r0, #8]
   b56c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b56c4:	bfb8      	it	lt
   b56c6:	1dd3      	addlt	r3, r2, #7
   b56c8:	10db      	asrs	r3, r3, #3
   b56ca:	fb13 1104 	smlabb	r1, r3, r4, r1
   b56ce:	f002 0207 	and.w	r2, r2, #7
   b56d2:	2301      	movs	r3, #1
   b56d4:	fa03 f202 	lsl.w	r2, r3, r2
   b56d8:	5c43      	ldrb	r3, [r0, r1]
   b56da:	405a      	eors	r2, r3
   b56dc:	e7cc      	b.n	b5678 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b56e0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b56e0:	b570      	push	{r4, r5, r6, lr}
   b56e2:	4604      	mov	r4, r0
   b56e4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b56e6:	2600      	movs	r6, #0
   b56e8:	f7ff fcf0 	bl	b50cc <_ZN12Adafruit_GFXC1Ess>
   b56ec:	4b11      	ldr	r3, [pc, #68]	; (b5734 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b56ee:	6023      	str	r3, [r4, #0]
   b56f0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b56f2:	b915      	cbnz	r5, b56fa <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b56f4:	f002 fdc6 	bl	b8284 <_Z19__fetch_global_Wirev>
   b56f8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b56fa:	23ff      	movs	r3, #255	; 0xff
   b56fc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5700:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5704:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5708:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b570c:	4b0a      	ldr	r3, [pc, #40]	; (b5738 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b570e:	63a3      	str	r3, [r4, #56]	; 0x38
   b5710:	2301      	movs	r3, #1
   b5712:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5716:	9b05      	ldr	r3, [sp, #20]
   b5718:	64a3      	str	r3, [r4, #72]	; 0x48
   b571a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b571e:	9b06      	ldr	r3, [sp, #24]
   b5720:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5722:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5726:	6426      	str	r6, [r4, #64]	; 0x40
   b5728:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b572c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b572e:	4620      	mov	r0, r4
   b5730:	bd70      	pop	{r4, r5, r6, pc}
   b5732:	bf00      	nop
   b5734:	000baf2c 	.word	0x000baf2c
   b5738:	000baa78 	.word	0x000baa78

000b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b573e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5740:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5742:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5744:	b190      	cbz	r0, b576c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5746:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b574a:	f001 fc3f 	bl	b6fcc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b574e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5750:	6803      	ldr	r3, [r0, #0]
   b5752:	2100      	movs	r1, #0
   b5754:	689b      	ldr	r3, [r3, #8]
   b5756:	4798      	blx	r3
    WIRE_WRITE(c);
   b5758:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b575a:	6803      	ldr	r3, [r0, #0]
   b575c:	4629      	mov	r1, r5
   b575e:	689b      	ldr	r3, [r3, #8]
   b5760:	4798      	blx	r3
    wire->endTransmission();
   b5762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5768:	f001 bc37 	b.w	b6fda <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b576c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5770:	4601      	mov	r1, r0
   b5772:	b298      	uxth	r0, r3
   b5774:	f002 fd3f 	bl	b81f6 <digitalWrite>
  if(spi) {
   b5778:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b577a:	b120      	cbz	r0, b5786 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b577c:	4629      	mov	r1, r5
}
   b577e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5782:	f001 bf8f 	b.w	b76a4 <_ZN8SPIClass8transferEh>
   b5786:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5788:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b578a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b578e:	ea05 0107 	and.w	r1, r5, r7
   b5792:	b280      	uxth	r0, r0
   b5794:	f002 fd2f 	bl	b81f6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5798:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b579c:	2101      	movs	r1, #1
   b579e:	b280      	uxth	r0, r0
   b57a0:	f002 fd29 	bl	b81f6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b57a4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b57a8:	2100      	movs	r1, #0
   b57aa:	b280      	uxth	r0, r0
   b57ac:	f002 fd23 	bl	b81f6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b57b0:	3e01      	subs	r6, #1
   b57b2:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b57b6:	d1e8      	bne.n	b578a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b57b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57ba <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b57ba:	b538      	push	{r3, r4, r5, lr}
   b57bc:	4604      	mov	r4, r0
  TRANSACTION_START
   b57be:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b57c0:	460d      	mov	r5, r1
  TRANSACTION_START
   b57c2:	b180      	cbz	r0, b57e6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b57c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b57c6:	f001 fbf3 	bl	b6fb0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b57ca:	2d00      	cmp	r5, #0
   b57cc:	4620      	mov	r0, r4
   b57ce:	bf14      	ite	ne
   b57d0:	21a7      	movne	r1, #167	; 0xa7
   b57d2:	21a6      	moveq	r1, #166	; 0xa6
   b57d4:	f7ff ffb2 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b57d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57da:	b188      	cbz	r0, b5800 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b57dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b57de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b57e2:	f001 bbe5 	b.w	b6fb0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b57e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b57e8:	b118      	cbz	r0, b57f2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b57ea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b57ee:	f001 feeb 	bl	b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b57f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b57f6:	2100      	movs	r1, #0
   b57f8:	b280      	uxth	r0, r0
   b57fa:	f002 fcfc 	bl	b81f6 <digitalWrite>
   b57fe:	e7e4      	b.n	b57ca <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5800:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5804:	2101      	movs	r1, #1
   b5806:	b280      	uxth	r0, r0
   b5808:	f002 fcf5 	bl	b81f6 <digitalWrite>
   b580c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b580e:	b118      	cbz	r0, b5818 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5814:	f001 bebe 	b.w	b7594 <_ZN8SPIClass14endTransactionEv>
}
   b5818:	bd38      	pop	{r3, r4, r5, pc}

000b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b581a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b581e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5820:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5822:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5824:	188f      	adds	r7, r1, r2
   b5826:	b340      	cbz	r0, b587a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5828:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b582c:	f001 fbce 	bl	b6fcc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5830:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5832:	6803      	ldr	r3, [r0, #0]
   b5834:	2100      	movs	r1, #0
   b5836:	689b      	ldr	r3, [r3, #8]
   b5838:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b583a:	2601      	movs	r6, #1
    while(n--) {
   b583c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b583e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5840:	d017      	beq.n	b5872 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5842:	2e1f      	cmp	r6, #31
   b5844:	d90c      	bls.n	b5860 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5846:	f001 fbc8 	bl	b6fda <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b584a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b584e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5850:	f001 fbbc 	bl	b6fcc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5854:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5856:	6803      	ldr	r3, [r0, #0]
   b5858:	2100      	movs	r1, #0
   b585a:	689b      	ldr	r3, [r3, #8]
   b585c:	4798      	blx	r3
        bytesOut = 1;
   b585e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5860:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5862:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5866:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5868:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b586a:	689b      	ldr	r3, [r3, #8]
   b586c:	4798      	blx	r3
      bytesOut++;
   b586e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5870:	e7e4      	b.n	b583c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5872:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5876:	f001 bbb0 	b.w	b6fda <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b587a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b587e:	4601      	mov	r1, r0
   b5880:	b298      	uxth	r0, r3
   b5882:	f002 fcb8 	bl	b81f6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5886:	42bd      	cmp	r5, r7
   b5888:	d022      	beq.n	b58d0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b588a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b588c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5890:	b118      	cbz	r0, b589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5892:	4649      	mov	r1, r9
   b5894:	f001 ff06 	bl	b76a4 <_ZN8SPIClass8transferEh>
   b5898:	e7f5      	b.n	b5886 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b589a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b589c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b58a0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b58a4:	ea09 0108 	and.w	r1, r9, r8
   b58a8:	b280      	uxth	r0, r0
   b58aa:	f002 fca4 	bl	b81f6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b58ae:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b58b2:	2101      	movs	r1, #1
   b58b4:	b280      	uxth	r0, r0
   b58b6:	f002 fc9e 	bl	b81f6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b58ba:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b58be:	2100      	movs	r1, #0
   b58c0:	b280      	uxth	r0, r0
   b58c2:	f002 fc98 	bl	b81f6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b58c6:	3e01      	subs	r6, #1
   b58c8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b58cc:	d1e8      	bne.n	b58a0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b58ce:	e7da      	b.n	b5886 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b58d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b58d4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b58d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b58d8:	1dda      	adds	r2, r3, #7
   b58da:	bf48      	it	mi
   b58dc:	f103 020e 	addmi.w	r2, r3, #14
   b58e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b58e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b58e6:	10d2      	asrs	r2, r2, #3
   b58e8:	435a      	muls	r2, r3
   b58ea:	2100      	movs	r1, #0
   b58ec:	f002 be59 	b.w	b85a2 <memset>

000b58f0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b58f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b58f4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b58f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b58f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b58fc:	4604      	mov	r4, r0
   b58fe:	460f      	mov	r7, r1
   b5900:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5902:	b1c3      	cbz	r3, b5936 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5904:	4620      	mov	r0, r4
   b5906:	f7ff ffe5 	bl	b58d4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b590a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b590e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5912:	2820      	cmp	r0, #32
   b5914:	dc21      	bgt.n	b595a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5916:	2320      	movs	r3, #32
   b5918:	2201      	movs	r2, #1
   b591a:	3820      	subs	r0, #32
   b591c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5920:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5924:	2373      	movs	r3, #115	; 0x73
   b5926:	3973      	subs	r1, #115	; 0x73
   b5928:	9300      	str	r3, [sp, #0]
   b592a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b592e:	4b89      	ldr	r3, [pc, #548]	; (b5b54 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5930:	f340 024f 	sbfx	r2, r0, #1, #16
   b5934:	e021      	b.n	b597a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5936:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b593a:	1dd8      	adds	r0, r3, #7
   b593c:	bf48      	it	mi
   b593e:	f103 000e 	addmi.w	r0, r3, #14
   b5942:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5946:	10c0      	asrs	r0, r0, #3
   b5948:	4358      	muls	r0, r3
   b594a:	f001 fa5d 	bl	b6e08 <malloc>
   b594e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5950:	2800      	cmp	r0, #0
   b5952:	d1d7      	bne.n	b5904 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5954:	b004      	add	sp, #16
   b5956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b595a:	3840      	subs	r0, #64	; 0x40
   b595c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5960:	fa02 f280 	sxtah	r2, r2, r0
   b5964:	2340      	movs	r3, #64	; 0x40
   b5966:	2001      	movs	r0, #1
   b5968:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b596c:	2352      	movs	r3, #82	; 0x52
   b596e:	3952      	subs	r1, #82	; 0x52
   b5970:	9300      	str	r3, [sp, #0]
   b5972:	4b79      	ldr	r3, [pc, #484]	; (b5b58 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5974:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5978:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b597a:	4620      	mov	r0, r4
   b597c:	f341 014f 	sbfx	r1, r1, #1, #16
   b5980:	f7ff fbba 	bl	b50f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5984:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5986:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b598a:	2800      	cmp	r0, #0
   b598c:	d078      	beq.n	b5a80 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b598e:	2d00      	cmp	r5, #0
   b5990:	d174      	bne.n	b5a7c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5992:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5996:	2b20      	cmp	r3, #32
   b5998:	bf0c      	ite	eq
   b599a:	253c      	moveq	r5, #60	; 0x3c
   b599c:	253d      	movne	r5, #61	; 0x3d
   b599e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b59a2:	f1b8 0f00 	cmp.w	r8, #0
   b59a6:	d001      	beq.n	b59ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b59a8:	f001 fb06 	bl	b6fb8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b59ac:	b1fe      	cbz	r6, b59ee <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b59ae:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b59b2:	2800      	cmp	r0, #0
   b59b4:	db1b      	blt.n	b59ee <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b59b6:	2101      	movs	r1, #1
   b59b8:	b280      	uxth	r0, r0
   b59ba:	f002 fc0b 	bl	b81d4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b59be:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b59c2:	2101      	movs	r1, #1
   b59c4:	b280      	uxth	r0, r0
   b59c6:	f002 fc16 	bl	b81f6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b59ca:	2001      	movs	r0, #1
   b59cc:	f001 fa5c 	bl	b6e88 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b59d0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b59d4:	2100      	movs	r1, #0
   b59d6:	b280      	uxth	r0, r0
   b59d8:	f002 fc0d 	bl	b81f6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b59dc:	200a      	movs	r0, #10
   b59de:	f001 fa53 	bl	b6e88 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b59e2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b59e6:	2101      	movs	r1, #1
   b59e8:	b280      	uxth	r0, r0
   b59ea:	f002 fc04 	bl	b81f6 <digitalWrite>
  TRANSACTION_START
   b59ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b59f0:	2800      	cmp	r0, #0
   b59f2:	d074      	beq.n	b5ade <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b59f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b59f6:	f001 fadb 	bl	b6fb0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b59fa:	2204      	movs	r2, #4
   b59fc:	4957      	ldr	r1, [pc, #348]	; (b5b5c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b59fe:	4620      	mov	r0, r4
   b5a00:	f7ff ff0b 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5a04:	8961      	ldrh	r1, [r4, #10]
   b5a06:	3901      	subs	r1, #1
   b5a08:	b2c9      	uxtb	r1, r1
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	f7ff fe96 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5a10:	4953      	ldr	r1, [pc, #332]	; (b5b60 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5a12:	2204      	movs	r2, #4
   b5a14:	4620      	mov	r0, r4
   b5a16:	f7ff ff00 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5a1a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5a1e:	2b01      	cmp	r3, #1
   b5a20:	bf0c      	ite	eq
   b5a22:	2110      	moveq	r1, #16
   b5a24:	2114      	movne	r1, #20
   b5a26:	4620      	mov	r0, r4
   b5a28:	f7ff fe88 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5a2c:	2204      	movs	r2, #4
   b5a2e:	494d      	ldr	r1, [pc, #308]	; (b5b64 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5a30:	4620      	mov	r0, r4
   b5a32:	f7ff fef2 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5a36:	68a3      	ldr	r3, [r4, #8]
   b5a38:	4a4b      	ldr	r2, [pc, #300]	; (b5b68 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5a3a:	4293      	cmp	r3, r2
   b5a3c:	d15c      	bne.n	b5af8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5a3e:	494b      	ldr	r1, [pc, #300]	; (b5b6c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5a40:	2204      	movs	r2, #4
   b5a42:	4620      	mov	r0, r4
   b5a44:	f7ff fee9 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5a48:	21d9      	movs	r1, #217	; 0xd9
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	f7ff fe76 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5a50:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5a54:	2b01      	cmp	r3, #1
   b5a56:	bf0c      	ite	eq
   b5a58:	2122      	moveq	r1, #34	; 0x22
   b5a5a:	21f1      	movne	r1, #241	; 0xf1
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f7ff fe6d 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5a62:	4620      	mov	r0, r4
   b5a64:	4942      	ldr	r1, [pc, #264]	; (b5b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5a66:	2206      	movs	r2, #6
   b5a68:	f7ff fed7 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5a6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a6e:	2800      	cmp	r0, #0
   b5a70:	d063      	beq.n	b5b3a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5a72:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5a74:	f001 fa9c 	bl	b6fb0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5a78:	2001      	movs	r0, #1
   b5a7a:	e76b      	b.n	b5954 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5a7c:	b26d      	sxtb	r5, r5
   b5a7e:	e78e      	b.n	b599e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5a80:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5a84:	2101      	movs	r1, #1
   b5a86:	b280      	uxth	r0, r0
   b5a88:	f002 fba4 	bl	b81d4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5a8c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a90:	2101      	movs	r1, #1
   b5a92:	b280      	uxth	r0, r0
   b5a94:	f002 fb9e 	bl	b81d4 <pinMode>
    SSD1306_DESELECT
   b5a98:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a9c:	2101      	movs	r1, #1
   b5a9e:	b280      	uxth	r0, r0
   b5aa0:	f002 fba9 	bl	b81f6 <digitalWrite>
    if(spi) { // Hardware SPI
   b5aa4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5aa6:	b13d      	cbz	r5, b5ab8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5aa8:	f1b8 0f00 	cmp.w	r8, #0
   b5aac:	f43f af7e 	beq.w	b59ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5ab0:	4628      	mov	r0, r5
   b5ab2:	f001 fd5b 	bl	b756c <_ZN8SPIClass5beginEv>
   b5ab6:	e779      	b.n	b59ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5ab8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5abc:	2101      	movs	r1, #1
   b5abe:	b280      	uxth	r0, r0
   b5ac0:	f002 fb88 	bl	b81d4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5ac4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ac8:	2101      	movs	r1, #1
   b5aca:	b280      	uxth	r0, r0
   b5acc:	f002 fb82 	bl	b81d4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5ad0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ad4:	4629      	mov	r1, r5
   b5ad6:	b280      	uxth	r0, r0
   b5ad8:	f002 fb8d 	bl	b81f6 <digitalWrite>
   b5adc:	e766      	b.n	b59ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5ade:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ae0:	b118      	cbz	r0, b5aea <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5ae2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5ae6:	f001 fd6f 	bl	b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5aea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5aee:	2100      	movs	r1, #0
   b5af0:	b280      	uxth	r0, r0
   b5af2:	f002 fb80 	bl	b81f6 <digitalWrite>
   b5af6:	e780      	b.n	b59fa <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5af8:	4a1e      	ldr	r2, [pc, #120]	; (b5b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5afa:	4293      	cmp	r3, r2
   b5afc:	d10e      	bne.n	b5b1c <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5afe:	491e      	ldr	r1, [pc, #120]	; (b5b78 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5b00:	2203      	movs	r2, #3
   b5b02:	4620      	mov	r0, r4
   b5b04:	f7ff fe89 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5b08:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5b0c:	2b01      	cmp	r3, #1
   b5b0e:	bf0c      	ite	eq
   b5b10:	219f      	moveq	r1, #159	; 0x9f
   b5b12:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5b14:	4620      	mov	r0, r4
   b5b16:	f7ff fe11 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5b1a:	e795      	b.n	b5a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5b1c:	4a17      	ldr	r2, [pc, #92]	; (b5b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5b1e:	4293      	cmp	r3, r2
   b5b20:	d192      	bne.n	b5a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5b22:	4917      	ldr	r1, [pc, #92]	; (b5b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5b24:	2203      	movs	r2, #3
   b5b26:	4620      	mov	r0, r4
   b5b28:	f7ff fe77 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5b2c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5b30:	2b01      	cmp	r3, #1
   b5b32:	bf0c      	ite	eq
   b5b34:	2110      	moveq	r1, #16
   b5b36:	21af      	movne	r1, #175	; 0xaf
   b5b38:	e7ec      	b.n	b5b14 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5b3a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b3e:	2101      	movs	r1, #1
   b5b40:	b280      	uxth	r0, r0
   b5b42:	f002 fb58 	bl	b81f6 <digitalWrite>
   b5b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b48:	2800      	cmp	r0, #0
   b5b4a:	d095      	beq.n	b5a78 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5b4c:	f001 fd22 	bl	b7594 <_ZN8SPIClass14endTransactionEv>
   b5b50:	e792      	b.n	b5a78 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5b52:	bf00      	nop
   b5b54:	000bad44 	.word	0x000bad44
   b5b58:	000baa84 	.word	0x000baa84
   b5b5c:	000baf8c 	.word	0x000baf8c
   b5b60:	000baf90 	.word	0x000baf90
   b5b64:	000baf94 	.word	0x000baf94
   b5b68:	00200080 	.word	0x00200080
   b5b6c:	000baf9e 	.word	0x000baf9e
   b5b70:	000baf98 	.word	0x000baf98
   b5b74:	00400080 	.word	0x00400080
   b5b78:	000bafa2 	.word	0x000bafa2
   b5b7c:	00100060 	.word	0x00100060
   b5b80:	000bafa5 	.word	0x000bafa5

000b5b84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5b84:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5b86:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5b88:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5b8c:	db3d      	blt.n	b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5b8e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5b92:	4294      	cmp	r4, r2
   b5b94:	dd39      	ble.n	b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5b96:	2900      	cmp	r1, #0
      w += x;
   b5b98:	bfbe      	ittt	lt
   b5b9a:	185b      	addlt	r3, r3, r1
   b5b9c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5b9e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5ba0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5ba4:	18ce      	adds	r6, r1, r3
   b5ba6:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5ba8:	bfc4      	itt	gt
   b5baa:	1a63      	subgt	r3, r4, r1
   b5bac:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5bae:	2b00      	cmp	r3, #0
   b5bb0:	dd2b      	ble.n	b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5bb2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5bb4:	10d6      	asrs	r6, r2, #3
   b5bb6:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5bba:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5bbc:	f002 0007 	and.w	r0, r2, #7
   b5bc0:	2201      	movs	r2, #1
   b5bc2:	4082      	lsls	r2, r0
      switch(color) {
   b5bc4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5bc6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5bc8:	d016      	beq.n	b5bf8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5bca:	2d02      	cmp	r5, #2
   b5bcc:	d00b      	beq.n	b5be6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5bce:	b9e5      	cbnz	r5, b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5bd0:	43d2      	mvns	r2, r2
   b5bd2:	b2d2      	uxtb	r2, r2
   b5bd4:	440b      	add	r3, r1
   b5bd6:	4299      	cmp	r1, r3
   b5bd8:	d017      	beq.n	b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5bda:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5bde:	4010      	ands	r0, r2
   b5be0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5be4:	e7f7      	b.n	b5bd6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5be6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5be8:	4299      	cmp	r1, r3
   b5bea:	d00e      	beq.n	b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5bec:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5bf0:	4050      	eors	r0, r2
   b5bf2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5bf6:	e7f7      	b.n	b5be8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5bf8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5bfa:	4299      	cmp	r1, r3
   b5bfc:	d005      	beq.n	b5c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5bfe:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5c02:	4310      	orrs	r0, r2
   b5c04:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5c08:	e7f7      	b.n	b5bfa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5c0a:	bd70      	pop	{r4, r5, r6, pc}

000b5c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5c0e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5c10:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5c14:	db76      	blt.n	b5d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5c16:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5c1a:	42b1      	cmp	r1, r6
   b5c1c:	da72      	bge.n	b5d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5c1e:	2a00      	cmp	r2, #0
      __h += __y;
   b5c20:	bfbe      	ittt	lt
   b5c22:	189b      	addlt	r3, r3, r2
   b5c24:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5c26:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5c28:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5c2c:	18d7      	adds	r7, r2, r3
   b5c2e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5c30:	bfc4      	itt	gt
   b5c32:	1aa3      	subgt	r3, r4, r2
   b5c34:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5c36:	2b00      	cmp	r3, #0
   b5c38:	dd64      	ble.n	b5d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5c3a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5c3e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5c40:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5c44:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5c48:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5c4a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5c4e:	d023      	beq.n	b5c98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5c50:	f1c2 0208 	rsb	r2, r2, #8
   b5c54:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5c56:	492d      	ldr	r1, [pc, #180]	; (b5d0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5c58:	4293      	cmp	r3, r2
   b5c5a:	bf3c      	itt	cc
   b5c5c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5c60:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5c64:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5c66:	bf3c      	itt	cc
   b5c68:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5c6c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5c70:	2d01      	cmp	r5, #1
   b5c72:	d007      	beq.n	b5c84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5c74:	2d02      	cmp	r5, #2
   b5c76:	d02e      	beq.n	b5cd6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5c78:	b94d      	cbnz	r5, b5c8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5c7a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5c7e:	ea2c 0101 	bic.w	r1, ip, r1
   b5c82:	e003      	b.n	b5c8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5c84:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5c88:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5c8c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5c8e:	4293      	cmp	r3, r2
   b5c90:	d338      	bcc.n	b5d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5c92:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5c96:	440c      	add	r4, r1
        h -= mod;
   b5c98:	1a9a      	subs	r2, r3, r2
   b5c9a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5c9c:	2a07      	cmp	r2, #7
   b5c9e:	d90e      	bls.n	b5cbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5ca0:	2d02      	cmp	r5, #2
   b5ca2:	d11d      	bne.n	b5ce0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5ca4:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5ca6:	7821      	ldrb	r1, [r4, #0]
   b5ca8:	43c9      	mvns	r1, r1
   b5caa:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5cac:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5cae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5cb2:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5cb4:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5cb6:	440c      	add	r4, r1
            } while(h >= 8);
   b5cb8:	d8f5      	bhi.n	b5ca6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5cba:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5cbe:	b30a      	cbz	r2, b5d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5cc0:	4b13      	ldr	r3, [pc, #76]	; (b5d10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5cc2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5cc4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5cc6:	d01a      	beq.n	b5cfe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5cc8:	2d02      	cmp	r5, #2
   b5cca:	d01c      	beq.n	b5d06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5ccc:	b9d5      	cbnz	r5, b5d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5cce:	7822      	ldrb	r2, [r4, #0]
   b5cd0:	ea22 0303 	bic.w	r3, r2, r3
   b5cd4:	e015      	b.n	b5d02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5cd6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5cda:	ea81 010c 	eor.w	r1, r1, ip
   b5cde:	e7d5      	b.n	b5c8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5ce0:	1e29      	subs	r1, r5, #0
   b5ce2:	bf18      	it	ne
   b5ce4:	2101      	movne	r1, #1
   b5ce6:	4249      	negs	r1, r1
   b5ce8:	b2c9      	uxtb	r1, r1
   b5cea:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5cec:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5cee:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5cf0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5cf4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5cf6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5cf8:	4434      	add	r4, r6
            } while(h >= 8);
   b5cfa:	d8f7      	bhi.n	b5cec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5cfc:	e7dd      	b.n	b5cba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5cfe:	7822      	ldrb	r2, [r4, #0]
   b5d00:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5d02:	7023      	strb	r3, [r4, #0]
}
   b5d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5d06:	7822      	ldrb	r2, [r4, #0]
   b5d08:	4053      	eors	r3, r2
   b5d0a:	e7fa      	b.n	b5d02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5d0c:	000baf7c 	.word	0x000baf7c
   b5d10:	000baf84 	.word	0x000baf84

000b5d14 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5d14:	b470      	push	{r4, r5, r6}
   b5d16:	4614      	mov	r4, r2
  switch(rotation) {
   b5d18:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5d1a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5d1e:	2a02      	cmp	r2, #2
   b5d20:	d00d      	beq.n	b5d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5d22:	2a03      	cmp	r2, #3
   b5d24:	d018      	beq.n	b5d58 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5d26:	2a01      	cmp	r2, #1
   b5d28:	d111      	bne.n	b5d4e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5d2a:	8902      	ldrh	r2, [r0, #8]
   b5d2c:	43e4      	mvns	r4, r4
   b5d2e:	4414      	add	r4, r2
   b5d30:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5d32:	9603      	str	r6, [sp, #12]
   b5d34:	460a      	mov	r2, r1
   b5d36:	4621      	mov	r1, r4
}
   b5d38:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5d3a:	f7ff bf67 	b.w	b5c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5d3e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5d40:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5d42:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5d44:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5d46:	4414      	add	r4, r2
    x -= (w-1);
   b5d48:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5d4a:	b224      	sxth	r4, r4
    x -= (w-1);
   b5d4c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5d4e:	9603      	str	r6, [sp, #12]
   b5d50:	4622      	mov	r2, r4
}
   b5d52:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5d54:	f7ff bf16 	b.w	b5b84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5d58:	8945      	ldrh	r5, [r0, #10]
   b5d5a:	4419      	add	r1, r3
   b5d5c:	1a69      	subs	r1, r5, r1
   b5d5e:	b209      	sxth	r1, r1
    break;
   b5d60:	e7e7      	b.n	b5d32 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5d62 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5d62:	b430      	push	{r4, r5}
   b5d64:	4614      	mov	r4, r2
  switch(rotation) {
   b5d66:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5d68:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5d6c:	2a02      	cmp	r2, #2
   b5d6e:	d00d      	beq.n	b5d8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5d70:	2a03      	cmp	r2, #3
   b5d72:	d018      	beq.n	b5da6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5d74:	2a01      	cmp	r2, #1
   b5d76:	d111      	bne.n	b5d9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5d78:	18e2      	adds	r2, r4, r3
   b5d7a:	8904      	ldrh	r4, [r0, #8]
   b5d7c:	1aa4      	subs	r4, r4, r2
   b5d7e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5d80:	9502      	str	r5, [sp, #8]
   b5d82:	460a      	mov	r2, r1
   b5d84:	4621      	mov	r1, r4
}
   b5d86:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5d88:	f7ff befc 	b.w	b5b84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5d8c:	8902      	ldrh	r2, [r0, #8]
   b5d8e:	43c9      	mvns	r1, r1
   b5d90:	4411      	add	r1, r2
    y -= (h-1);
   b5d92:	18e2      	adds	r2, r4, r3
   b5d94:	8944      	ldrh	r4, [r0, #10]
   b5d96:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5d98:	b209      	sxth	r1, r1
    y -= (h-1);
   b5d9a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5d9c:	9502      	str	r5, [sp, #8]
   b5d9e:	4622      	mov	r2, r4
}
   b5da0:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5da2:	f7ff bf33 	b.w	b5c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5da6:	8942      	ldrh	r2, [r0, #10]
   b5da8:	43c9      	mvns	r1, r1
   b5daa:	4411      	add	r1, r2
   b5dac:	b209      	sxth	r1, r1
    break;
   b5dae:	e7e7      	b.n	b5d80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5db0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5db4:	4604      	mov	r4, r0
  TRANSACTION_START
   b5db6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5db8:	2800      	cmp	r0, #0
   b5dba:	d042      	beq.n	b5e42 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5dbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5dbe:	f001 f8f7 	bl	b6fb0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5dc2:	4947      	ldr	r1, [pc, #284]	; (b5ee0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5dc4:	2205      	movs	r2, #5
   b5dc6:	4620      	mov	r0, r4
   b5dc8:	f7ff fd27 	bl	b581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5dcc:	8921      	ldrh	r1, [r4, #8]
   b5dce:	3901      	subs	r1, #1
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	b2c9      	uxtb	r1, r1
   b5dd4:	f7ff fcb2 	bl	b573c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5dd8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5ddc:	1dde      	adds	r6, r3, #7
   b5dde:	bf48      	it	mi
   b5de0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5de4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5de8:	8923      	ldrh	r3, [r4, #8]
   b5dea:	10f6      	asrs	r6, r6, #3
   b5dec:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5df0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5df4:	2800      	cmp	r0, #0
   b5df6:	d03a      	beq.n	b5e6e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5df8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5dfc:	f001 f8e6 	bl	b6fcc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5e00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e02:	6803      	ldr	r3, [r0, #0]
   b5e04:	2140      	movs	r1, #64	; 0x40
   b5e06:	689b      	ldr	r3, [r3, #8]
   b5e08:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5e0a:	2701      	movs	r7, #1
    while(count--) {
   b5e0c:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5e0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5e10:	d024      	beq.n	b5e5c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5e12:	2f1f      	cmp	r7, #31
   b5e14:	d90c      	bls.n	b5e30 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5e16:	f001 f8e0 	bl	b6fda <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5e1a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5e1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e20:	f001 f8d4 	bl	b6fcc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5e24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e26:	6803      	ldr	r3, [r0, #0]
   b5e28:	2140      	movs	r1, #64	; 0x40
   b5e2a:	689b      	ldr	r3, [r3, #8]
   b5e2c:	4798      	blx	r3
        bytesOut = 1;
   b5e2e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5e30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e32:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5e36:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5e38:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5e3a:	689b      	ldr	r3, [r3, #8]
   b5e3c:	4798      	blx	r3
      bytesOut++;
   b5e3e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5e40:	e7e4      	b.n	b5e0c <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e44:	b118      	cbz	r0, b5e4e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5e46:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5e4a:	f001 fbbd 	bl	b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5e4e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e52:	2100      	movs	r1, #0
   b5e54:	b280      	uxth	r0, r0
   b5e56:	f002 f9ce 	bl	b81f6 <digitalWrite>
   b5e5a:	e7b2      	b.n	b5dc2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5e5c:	f001 f8bd 	bl	b6fda <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e62:	b378      	cbz	r0, b5ec4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5e64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5e66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e6a:	f001 b8a1 	b.w	b6fb0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5e6e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5e72:	2101      	movs	r1, #1
   b5e74:	b280      	uxth	r0, r0
   b5e76:	f002 f9be 	bl	b81f6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5e7a:	42ae      	cmp	r6, r5
   b5e7c:	d0f0      	beq.n	b5e60 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5e80:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5e84:	b118      	cbz	r0, b5e8e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5e86:	4649      	mov	r1, r9
   b5e88:	f001 fc0c 	bl	b76a4 <_ZN8SPIClass8transferEh>
   b5e8c:	e7f5      	b.n	b5e7a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5e8e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5e90:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5e94:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5e98:	ea09 0108 	and.w	r1, r9, r8
   b5e9c:	b280      	uxth	r0, r0
   b5e9e:	f002 f9aa 	bl	b81f6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5ea2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ea6:	2101      	movs	r1, #1
   b5ea8:	b280      	uxth	r0, r0
   b5eaa:	f002 f9a4 	bl	b81f6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5eae:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5eb2:	2100      	movs	r1, #0
   b5eb4:	b280      	uxth	r0, r0
   b5eb6:	f002 f99e 	bl	b81f6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5eba:	3f01      	subs	r7, #1
   b5ebc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5ec0:	d1e8      	bne.n	b5e94 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5ec2:	e7da      	b.n	b5e7a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5ec4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5ec8:	2101      	movs	r1, #1
   b5eca:	b280      	uxth	r0, r0
   b5ecc:	f002 f993 	bl	b81f6 <digitalWrite>
   b5ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ed2:	b118      	cbz	r0, b5edc <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5ed4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5ed8:	f001 bb5c 	b.w	b7594 <_ZN8SPIClass14endTransactionEv>
}
   b5edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5ee0:	000bafa8 	.word	0x000bafa8

000b5ee4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5ee4:	2100      	movs	r1, #0
   b5ee6:	220a      	movs	r2, #10
   b5ee8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5eec:	4770      	bx	lr

000b5eee <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5eee:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5ef0:	b510      	push	{r4, lr}
   b5ef2:	4604      	mov	r4, r0
    this->pin = pin;
   b5ef4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5ef6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5ef8:	b288      	uxth	r0, r1
   b5efa:	f002 f995 	bl	b8228 <digitalRead>
   b5efe:	b108      	cbz	r0, b5f04 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5f00:	2303      	movs	r3, #3
   b5f02:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5f04:	f000 fd44 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5f08:	6020      	str	r0, [r4, #0]
#endif
}
   b5f0a:	bd10      	pop	{r4, pc}

000b5f0c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5f0c:	b538      	push	{r3, r4, r5, lr}
   b5f0e:	460c      	mov	r4, r1
   b5f10:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5f12:	4611      	mov	r1, r2
   b5f14:	b2a0      	uxth	r0, r4
   b5f16:	f002 f95d 	bl	b81d4 <pinMode>
  
  this->attach(pin);
   b5f1a:	4621      	mov	r1, r4
   b5f1c:	4628      	mov	r0, r5
}
   b5f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5f22:	f7ff bfe4 	b.w	b5eee <_ZN8Debounce6attachEi>

000b5f26 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5f26:	b538      	push	{r3, r4, r5, lr}
   b5f28:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5f2a:	79c0      	ldrb	r0, [r0, #7]
   b5f2c:	f002 f97c 	bl	b8228 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5f30:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5f32:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5f34:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5f38:	bf18      	it	ne
   b5f3a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5f3c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5f40:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5f42:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5f44:	d00a      	beq.n	b5f5c <_ZN8Debounce6updateEv+0x36>
   b5f46:	f000 fd23 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5f4a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5f4c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5f4e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5f52:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5f54:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5f56:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5f5a:	bd38      	pop	{r3, r4, r5, pc}
   b5f5c:	f000 fd18 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5f60:	6823      	ldr	r3, [r4, #0]
   b5f62:	1ac0      	subs	r0, r0, r3
   b5f64:	88a3      	ldrh	r3, [r4, #4]
   b5f66:	4298      	cmp	r0, r3
   b5f68:	d3f4      	bcc.n	b5f54 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5f6a:	79a3      	ldrb	r3, [r4, #6]
   b5f6c:	f003 0301 	and.w	r3, r3, #1
   b5f70:	42ab      	cmp	r3, r5
   b5f72:	d0ef      	beq.n	b5f54 <_ZN8Debounce6updateEv+0x2e>
   b5f74:	f000 fd0c 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5f78:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5f7a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5f7c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5f80:	f043 0308 	orr.w	r3, r3, #8
   b5f84:	e7e5      	b.n	b5f52 <_ZN8Debounce6updateEv+0x2c>

000b5f86 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5f86:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5f8a:	b510      	push	{r4, lr}
   b5f8c:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5f8e:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5f90:	b113      	cbz	r3, b5f98 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5f92:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5f94:	f000 fcd4 	bl	b6940 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5f98:	4620      	mov	r0, r4
   b5f9a:	bd10      	pop	{r4, pc}

000b5f9c <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5f9c:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5f9e:	6803      	ldr	r3, [r0, #0]
   b5fa0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5fa4:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5fa6:	b112      	cbz	r2, b5fae <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5fa8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5faa:	f000 fcd1 	bl	b6950 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5fae:	4620      	mov	r0, r4
   b5fb0:	bd10      	pop	{r4, pc}

000b5fb2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5fb4:	461f      	mov	r7, r3
   b5fb6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5fba:	4604      	mov	r4, r0
   b5fbc:	460d      	mov	r5, r1
   b5fbe:	4616      	mov	r6, r2
    if (thread) {
   b5fc0:	b12b      	cbz	r3, b5fce <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5fc2:	2301      	movs	r3, #1
   b5fc4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5fc8:	3058      	adds	r0, #88	; 0x58
   b5fca:	f000 fca9 	bl	b6920 <os_mutex_create>
    }
    this->callback = callback;
   b5fce:	9b08      	ldr	r3, [sp, #32]
   b5fd0:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5fd2:	2300      	movs	r3, #0
   b5fd4:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5fd6:	b106      	cbz	r6, b5fda <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5fd8:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5fda:	b125      	cbz	r5, b5fe6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5fdc:	4629      	mov	r1, r5
   b5fde:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5fe2:	f001 fbc4 	bl	b776e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5fe6:	9b06      	ldr	r3, [sp, #24]
   b5fe8:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5fea:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5fec:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5fee:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5ff2:	2bff      	cmp	r3, #255	; 0xff
   b5ff4:	bfb8      	it	lt
   b5ff6:	23ff      	movlt	r3, #255	; 0xff
   b5ff8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5ffc:	b108      	cbz	r0, b6002 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5ffe:	f7fe fd9a 	bl	b4b36 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b6002:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6006:	f7fe fd94 	bl	b4b32 <_Znaj>
   b600a:	61e0      	str	r0, [r4, #28]
}
   b600c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b6010 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6010:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6014:	4604      	mov	r4, r0
            bool thread) {
   b6016:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6018:	4617      	mov	r7, r2
   b601a:	4698      	mov	r8, r3
   b601c:	460e      	mov	r6, r1
            bool thread) {
   b601e:	f001 fecd 	bl	b7dbc <_ZN9TCPClientC1Ev>
   b6022:	490d      	ldr	r1, [pc, #52]	; (b6058 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6024:	61e5      	str	r5, [r4, #28]
   b6026:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b602a:	f001 fb8c 	bl	b7746 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b602e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b6032:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6034:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6038:	22ff      	movs	r2, #255	; 0xff
   b603a:	230f      	movs	r3, #15
   b603c:	e9cd 3200 	strd	r3, r2, [sp]
   b6040:	4620      	mov	r0, r4
            bool thread) {
   b6042:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6046:	463b      	mov	r3, r7
   b6048:	462a      	mov	r2, r5
   b604a:	4631      	mov	r1, r6
   b604c:	f7ff ffb1 	bl	b5fb2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b6050:	4620      	mov	r0, r4
   b6052:	b004      	add	sp, #16
   b6054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6058:	000baa34 	.word	0x000baa34

000b605c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b605c:	b510      	push	{r4, lr}
   b605e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b6060:	4620      	mov	r0, r4
   b6062:	f001 fe07 	bl	b7c74 <_ZN9TCPClient9availableEv>
   b6066:	2800      	cmp	r0, #0
   b6068:	d0fa      	beq.n	b6060 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b606a:	4620      	mov	r0, r4
   b606c:	f001 fbec 	bl	b7848 <_ZN9TCPClient4readEv>
}
   b6070:	b2c0      	uxtb	r0, r0
   b6072:	bd10      	pop	{r4, pc}

000b6074 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b6074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6078:	4605      	mov	r5, r0
   b607a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b607c:	f7ff ffee 	bl	b605c <_ZN4MQTT8readByteEv>
   b6080:	69eb      	ldr	r3, [r5, #28]
   b6082:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6084:	69eb      	ldr	r3, [r5, #28]
   b6086:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b608a:	f04f 0901 	mov.w	r9, #1
   b608e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b6092:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6094:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b6096:	4628      	mov	r0, r5
   b6098:	f7ff ffe0 	bl	b605c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b609c:	4626      	mov	r6, r4
   b609e:	69eb      	ldr	r3, [r5, #28]
   b60a0:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b60a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b60a6:	fb13 f309 	smulbb	r3, r3, r9
   b60aa:	441f      	add	r7, r3
        buffer[len++] = digit;
   b60ac:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b60ae:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b60b0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b60b2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b60b4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b60b8:	d4ed      	bmi.n	b6096 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b60ba:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b60bc:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b60c0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b60c4:	d11e      	bne.n	b6104 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b60c6:	4628      	mov	r0, r5
   b60c8:	f7ff ffc8 	bl	b605c <_ZN4MQTT8readByteEv>
   b60cc:	69eb      	ldr	r3, [r5, #28]
   b60ce:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b60d0:	4628      	mov	r0, r5
   b60d2:	f7ff ffc3 	bl	b605c <_ZN4MQTT8readByteEv>
   b60d6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b60d8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b60da:	b2b6      	uxth	r6, r6
   b60dc:	69eb      	ldr	r3, [r5, #28]
   b60de:	b2a4      	uxth	r4, r4
   b60e0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b60e2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b60e4:	b2b6      	uxth	r6, r6
   b60e6:	42be      	cmp	r6, r7
   b60e8:	d20e      	bcs.n	b6108 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b60ea:	4628      	mov	r0, r5
   b60ec:	f7ff ffb6 	bl	b605c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b60f0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b60f4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b60f6:	bf84      	itt	hi
   b60f8:	69eb      	ldrhi	r3, [r5, #28]
   b60fa:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b60fc:	3401      	adds	r4, #1
   b60fe:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b6100:	3601      	adds	r6, #1
   b6102:	e7ef      	b.n	b60e4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6104:	2600      	movs	r6, #0
   b6106:	e7ed      	b.n	b60e4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6108:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b610c:	42a3      	cmp	r3, r4
   b610e:	bf2c      	ite	cs
   b6110:	4620      	movcs	r0, r4
   b6112:	2000      	movcc	r0, #0
   b6114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6118 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b611c:	4615      	mov	r5, r2
   b611e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b6120:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6122:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6124:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6126:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6128:	a802      	add	r0, sp, #8
        digit = len % 128;
   b612a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b612e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6132:	f103 0401 	add.w	r4, r3, #1
   b6136:	4403      	add	r3, r0
            digit |= 0x80;
   b6138:	bf88      	it	hi
   b613a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b613e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b6142:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6146:	b2e4      	uxtb	r4, r4
   b6148:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b614c:	d81e      	bhi.n	b618c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b614e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b6152:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6156:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6158:	4622      	mov	r2, r4
   b615a:	a901      	add	r1, sp, #4
   b615c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b615e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b6162:	f002 fa10 	bl	b8586 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b6166:	1c72      	adds	r2, r6, #1
   b6168:	4422      	add	r2, r4
   b616a:	4641      	mov	r1, r8
   b616c:	4638      	mov	r0, r7
   b616e:	f001 fb56 	bl	b781e <_ZN9TCPClient5writeEPKhj>
   b6172:	4605      	mov	r5, r0
   b6174:	f000 fc0c 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b6178:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b617a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b617c:	4432      	add	r2, r6
   b617e:	b2a8      	uxth	r0, r5
}
   b6180:	1a13      	subs	r3, r2, r0
   b6182:	4258      	negs	r0, r3
   b6184:	4158      	adcs	r0, r3
   b6186:	b002      	add	sp, #8
   b6188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b618c:	4623      	mov	r3, r4
   b618e:	e7ca      	b.n	b6126 <_ZN4MQTT5writeEhPht+0xe>

000b6190 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b6190:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b6192:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6194:	4605      	mov	r5, r0
    pos += 2;
   b6196:	b298      	uxth	r0, r3
   b6198:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b619a:	5cce      	ldrb	r6, [r1, r3]
   b619c:	b29c      	uxth	r4, r3
   b619e:	b156      	cbz	r6, b61b6 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b61a0:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b61a4:	4584      	cmp	ip, r0
   b61a6:	f103 0701 	add.w	r7, r3, #1
   b61aa:	d904      	bls.n	b61b6 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b61ac:	1c44      	adds	r4, r0, #1
   b61ae:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b61b0:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b61b2:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b61b4:	e7f1      	b.n	b619a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b61b6:	b299      	uxth	r1, r3
   b61b8:	1a41      	subs	r1, r0, r1
   b61ba:	440a      	add	r2, r1
   b61bc:	0a21      	lsrs	r1, r4, #8
   b61be:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b61c2:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b61c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61c8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b61c8:	b538      	push	{r3, r4, r5, lr}
   b61ca:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b61cc:	f001 fc74 	bl	b7ab8 <_ZN9TCPClient9connectedEv>
   b61d0:	2800      	cmp	r0, #0
   b61d2:	bf14      	ite	ne
   b61d4:	2501      	movne	r5, #1
   b61d6:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b61d8:	d102      	bne.n	b61e0 <_ZN4MQTT11isConnectedEv+0x18>
   b61da:	4620      	mov	r0, r4
   b61dc:	f001 fda4 	bl	b7d28 <_ZN9TCPClient4stopEv>
    return rc;
}
   b61e0:	4628      	mov	r0, r5
   b61e2:	bd38      	pop	{r3, r4, r5, pc}

000b61e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b61e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b61e8:	b088      	sub	sp, #32
   b61ea:	4604      	mov	r4, r0
   b61ec:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b61f0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b61f4:	4689      	mov	r9, r1
   b61f6:	4617      	mov	r7, r2
   b61f8:	461e      	mov	r6, r3
    if (!isConnected()) {
   b61fa:	f7ff ffe5 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b61fe:	4605      	mov	r5, r0
   b6200:	2800      	cmp	r0, #0
   b6202:	f040 80cd 	bne.w	b63a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6206:	4621      	mov	r1, r4
   b6208:	a801      	add	r0, sp, #4
   b620a:	f7ff febc 	bl	b5f86 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b620e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6210:	2900      	cmp	r1, #0
   b6212:	f040 8088 	bne.w	b6326 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6216:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b621a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b621c:	462b      	mov	r3, r5
   b621e:	4620      	mov	r0, r4
   b6220:	f001 fbcc 	bl	b79bc <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6224:	2800      	cmp	r0, #0
   b6226:	d07a      	beq.n	b631e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6228:	2301      	movs	r3, #1
   b622a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b622c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6230:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b6232:	2b04      	cmp	r3, #4
   b6234:	4b5b      	ldr	r3, [pc, #364]	; (b63a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6236:	f040 8081 	bne.w	b633c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b623a:	6818      	ldr	r0, [r3, #0]
   b623c:	8899      	ldrh	r1, [r3, #4]
   b623e:	799b      	ldrb	r3, [r3, #6]
   b6240:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6244:	f88d 300e 	strb.w	r3, [sp, #14]
   b6248:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b624a:	f8c2 0005 	str.w	r0, [r2, #5]
   b624e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b6252:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6256:	f8a2 1009 	strh.w	r1, [r2, #9]
   b625a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b625c:	230c      	movs	r3, #12
            if (willTopic) {
   b625e:	f1b8 0f00 	cmp.w	r8, #0
   b6262:	f000 8081 	beq.w	b6368 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6266:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b626a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b626e:	0140      	lsls	r0, r0, #5
   b6270:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6274:	f040 0006 	orr.w	r0, r0, #6
   b6278:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b627a:	f1ba 0f00 	cmp.w	sl, #0
   b627e:	d101      	bne.n	b6284 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b6280:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b6284:	b11f      	cbz	r7, b628e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b6286:	2e00      	cmp	r6, #0
   b6288:	d170      	bne.n	b636c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b628a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b628e:	69e2      	ldr	r2, [r4, #28]
   b6290:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b6292:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6294:	69e1      	ldr	r1, [r4, #28]
   b6296:	1c58      	adds	r0, r3, #1
   b6298:	1212      	asrs	r2, r2, #8
   b629a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b629c:	1c9a      	adds	r2, r3, #2
   b629e:	69e1      	ldr	r1, [r4, #28]
   b62a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b62a2:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b62a4:	3303      	adds	r3, #3
   b62a6:	69e2      	ldr	r2, [r4, #28]
   b62a8:	4649      	mov	r1, r9
   b62aa:	4620      	mov	r0, r4
   b62ac:	f7ff ff70 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
   b62b0:	4603      	mov	r3, r0
            if (willTopic) {
   b62b2:	f1b8 0f00 	cmp.w	r8, #0
   b62b6:	d00b      	beq.n	b62d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b62b8:	69e2      	ldr	r2, [r4, #28]
   b62ba:	4641      	mov	r1, r8
   b62bc:	4620      	mov	r0, r4
   b62be:	f7ff ff67 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b62c2:	69e2      	ldr	r2, [r4, #28]
   b62c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b62c6:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b62c8:	4620      	mov	r0, r4
   b62ca:	f7ff ff61 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
   b62ce:	4603      	mov	r3, r0
            if(user != NULL) {
   b62d0:	b167      	cbz	r7, b62ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b62d2:	69e2      	ldr	r2, [r4, #28]
   b62d4:	4639      	mov	r1, r7
   b62d6:	4620      	mov	r0, r4
   b62d8:	f7ff ff5a 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
   b62dc:	4603      	mov	r3, r0
                if(pass != NULL) {
   b62de:	b12e      	cbz	r6, b62ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b62e0:	69e2      	ldr	r2, [r4, #28]
   b62e2:	4631      	mov	r1, r6
   b62e4:	4620      	mov	r0, r4
   b62e6:	f7ff ff53 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
   b62ea:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b62ec:	3b05      	subs	r3, #5
   b62ee:	69e2      	ldr	r2, [r4, #28]
   b62f0:	b29b      	uxth	r3, r3
   b62f2:	2110      	movs	r1, #16
   b62f4:	4620      	mov	r0, r4
   b62f6:	f7ff ff0f 	bl	b6118 <_ZN4MQTT5writeEhPht>
   b62fa:	f000 fb49 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b62fe:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6302:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6306:	4620      	mov	r0, r4
   b6308:	f001 fcb4 	bl	b7c74 <_ZN9TCPClient9availableEv>
   b630c:	bb88      	cbnz	r0, b6372 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b630e:	f000 fb3f 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6314:	1ac0      	subs	r0, r0, r3
   b6316:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6318:	4373      	muls	r3, r6
   b631a:	4298      	cmp	r0, r3
   b631c:	d9f3      	bls.n	b6306 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b631e:	4620      	mov	r0, r4
   b6320:	f001 fd02 	bl	b7d28 <_ZN9TCPClient4stopEv>
   b6324:	e035      	b.n	b6392 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6326:	a802      	add	r0, sp, #8
   b6328:	f000 fed8 	bl	b70dc <_ZN9IPAddressC1EPKh>
   b632c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6330:	462b      	mov	r3, r5
   b6332:	a902      	add	r1, sp, #8
   b6334:	4620      	mov	r0, r4
   b6336:	f001 fc21 	bl	b7b7c <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b633a:	e773      	b.n	b6224 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b633c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b6340:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6344:	7bdb      	ldrb	r3, [r3, #15]
   b6346:	f10d 0c08 	add.w	ip, sp, #8
   b634a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b634e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b6352:	ab02      	add	r3, sp, #8
   b6354:	cb03      	ldmia	r3!, {r0, r1}
   b6356:	f8c2 0005 	str.w	r0, [r2, #5]
   b635a:	f8c2 1009 	str.w	r1, [r2, #9]
   b635e:	f89c 3000 	ldrb.w	r3, [ip]
   b6362:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6364:	230e      	movs	r3, #14
   b6366:	e77a      	b.n	b625e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6368:	2002      	movs	r0, #2
   b636a:	e786      	b.n	b627a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b636c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b6370:	e78d      	b.n	b628e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b6372:	a902      	add	r1, sp, #8
   b6374:	4620      	mov	r0, r4
   b6376:	f7ff fe7d 	bl	b6074 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b637a:	2804      	cmp	r0, #4
   b637c:	d1cf      	bne.n	b631e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b637e:	69e3      	ldr	r3, [r4, #28]
   b6380:	78de      	ldrb	r6, [r3, #3]
   b6382:	2e00      	cmp	r6, #0
   b6384:	d1cb      	bne.n	b631e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6386:	f000 fb03 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b638a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b638c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b638e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b6392:	a801      	add	r0, sp, #4
   b6394:	f7ff fe02 	bl	b5f9c <_ZN4MQTT11MutexLockerD1Ev>
}
   b6398:	4628      	mov	r0, r5
   b639a:	b008      	add	sp, #32
   b639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b63a0:	2500      	movs	r5, #0
   b63a2:	e7f9      	b.n	b6398 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b63a4:	000ba434 	.word	0x000ba434

000b63a8 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b63a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b63aa:	2301      	movs	r3, #1
   b63ac:	2204      	movs	r2, #4
   b63ae:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b63b2:	2300      	movs	r3, #0
   b63b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b63b8:	e9cd 3300 	strd	r3, r3, [sp]
   b63bc:	461a      	mov	r2, r3
   b63be:	f7ff ff11 	bl	b61e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b63c2:	b007      	add	sp, #28
   b63c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b63c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b63c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63cc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b63d0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b63d4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b63d8:	4604      	mov	r4, r0
   b63da:	468b      	mov	fp, r1
   b63dc:	4616      	mov	r6, r2
   b63de:	461f      	mov	r7, r3
    if (isConnected()) {
   b63e0:	f7ff fef2 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b63e4:	4682      	mov	sl, r0
   b63e6:	2800      	cmp	r0, #0
   b63e8:	d051      	beq.n	b648e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b63ea:	4621      	mov	r1, r4
   b63ec:	a801      	add	r0, sp, #4
   b63ee:	f7ff fdca 	bl	b5f86 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b63f2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b63f6:	69e0      	ldr	r0, [r4, #28]
   b63f8:	2100      	movs	r1, #0
   b63fa:	f002 f8d2 	bl	b85a2 <memset>
        length = writeString(topic, buffer, length);
   b63fe:	2305      	movs	r3, #5
   b6400:	69e2      	ldr	r2, [r4, #28]
   b6402:	4659      	mov	r1, fp
   b6404:	4620      	mov	r0, r4
   b6406:	f7ff fec3 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b640a:	1e6b      	subs	r3, r5, #1
   b640c:	2b01      	cmp	r3, #1
   b640e:	d815      	bhi.n	b643c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b6410:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6412:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6414:	3101      	adds	r1, #1
   b6416:	b289      	uxth	r1, r1
   b6418:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b641a:	0a09      	lsrs	r1, r1, #8
   b641c:	5419      	strb	r1, [r3, r0]
   b641e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b6420:	69e3      	ldr	r3, [r4, #28]
   b6422:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6424:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6426:	3002      	adds	r0, #2
   b6428:	5499      	strb	r1, [r3, r2]
   b642a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b642c:	f1b8 0f00 	cmp.w	r8, #0
   b6430:	d004      	beq.n	b643c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b6432:	8c23      	ldrh	r3, [r4, #32]
   b6434:	1c5a      	adds	r2, r3, #1
   b6436:	8422      	strh	r2, [r4, #32]
   b6438:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b643c:	2100      	movs	r1, #0
   b643e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6440:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b6442:	69e2      	ldr	r2, [r4, #28]
   b6444:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6446:	d90a      	bls.n	b645e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6448:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b644c:	459c      	cmp	ip, r3
   b644e:	d906      	bls.n	b645e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b6450:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6454:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6458:	3101      	adds	r1, #1
   b645a:	b289      	uxth	r1, r1
   b645c:	e7ef      	b.n	b643e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b645e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b6462:	2900      	cmp	r1, #0
   b6464:	bf0c      	ite	eq
   b6466:	2130      	moveq	r1, #48	; 0x30
   b6468:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b646a:	f1b9 0f00 	cmp.w	r9, #0
   b646e:	d001      	beq.n	b6474 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b6470:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6474:	2d02      	cmp	r5, #2
   b6476:	d10e      	bne.n	b6496 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6478:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b647c:	3b05      	subs	r3, #5
   b647e:	b29b      	uxth	r3, r3
   b6480:	4620      	mov	r0, r4
   b6482:	f7ff fe49 	bl	b6118 <_ZN4MQTT5writeEhPht>
   b6486:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b6488:	a801      	add	r0, sp, #4
   b648a:	f7ff fd87 	bl	b5f9c <_ZN4MQTT11MutexLockerD1Ev>
}
   b648e:	4650      	mov	r0, sl
   b6490:	b003      	add	sp, #12
   b6492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6496:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6498:	bf08      	it	eq
   b649a:	f041 0102 	orreq.w	r1, r1, #2
   b649e:	e7ed      	b.n	b647c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b64a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b64a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b64a2:	9c08      	ldr	r4, [sp, #32]
   b64a4:	9403      	str	r4, [sp, #12]
   b64a6:	2400      	movs	r4, #0
   b64a8:	9402      	str	r4, [sp, #8]
   b64aa:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b64ae:	9401      	str	r4, [sp, #4]
   b64b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b64b4:	9400      	str	r4, [sp, #0]
   b64b6:	f7ff ff87 	bl	b63c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b64ba:	b004      	add	sp, #16
   b64bc:	bd10      	pop	{r4, pc}

000b64be <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b64be:	b530      	push	{r4, r5, lr}
   b64c0:	b087      	sub	sp, #28
   b64c2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b64c4:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b64c6:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b64c8:	9204      	str	r2, [sp, #16]
   b64ca:	f7fe fad5 	bl	b4a78 <strlen>
   b64ce:	2500      	movs	r5, #0
   b64d0:	4603      	mov	r3, r0
   b64d2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b64d6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b64da:	9500      	str	r5, [sp, #0]
   b64dc:	4620      	mov	r0, r4
   b64de:	f7ff ffdf 	bl	b64a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b64e2:	b007      	add	sp, #28
   b64e4:	bd30      	pop	{r4, r5, pc}

000b64e6 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b64e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b64e8:	4604      	mov	r4, r0
   b64ea:	460e      	mov	r6, r1
    if (isConnected()) {
   b64ec:	f7ff fe6c 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b64f0:	4605      	mov	r5, r0
   b64f2:	b1c8      	cbz	r0, b6528 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b64f4:	4621      	mov	r1, r4
   b64f6:	a801      	add	r0, sp, #4
   b64f8:	f7ff fd45 	bl	b5f86 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b64fc:	69e3      	ldr	r3, [r4, #28]
   b64fe:	2262      	movs	r2, #98	; 0x62
   b6500:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6502:	69e3      	ldr	r3, [r4, #28]
   b6504:	2202      	movs	r2, #2
   b6506:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6508:	69e3      	ldr	r3, [r4, #28]
   b650a:	0a32      	lsrs	r2, r6, #8
   b650c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b650e:	69e3      	ldr	r3, [r4, #28]
   b6510:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6512:	69e1      	ldr	r1, [r4, #28]
   b6514:	2204      	movs	r2, #4
   b6516:	4620      	mov	r0, r4
   b6518:	f001 f981 	bl	b781e <_ZN9TCPClient5writeEPKhj>
   b651c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b651e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6520:	bf18      	it	ne
   b6522:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6524:	f7ff fd3a 	bl	b5f9c <_ZN4MQTT11MutexLockerD1Ev>
}
   b6528:	4628      	mov	r0, r5
   b652a:	b002      	add	sp, #8
   b652c:	bd70      	pop	{r4, r5, r6, pc}

000b652e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b652e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6530:	4604      	mov	r4, r0
   b6532:	460e      	mov	r6, r1
    if (isConnected()) {
   b6534:	f7ff fe48 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b6538:	4605      	mov	r5, r0
   b653a:	b1c8      	cbz	r0, b6570 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b653c:	4621      	mov	r1, r4
   b653e:	a801      	add	r0, sp, #4
   b6540:	f7ff fd21 	bl	b5f86 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6544:	69e3      	ldr	r3, [r4, #28]
   b6546:	2272      	movs	r2, #114	; 0x72
   b6548:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b654a:	69e3      	ldr	r3, [r4, #28]
   b654c:	2202      	movs	r2, #2
   b654e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6550:	69e3      	ldr	r3, [r4, #28]
   b6552:	0a32      	lsrs	r2, r6, #8
   b6554:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6556:	69e3      	ldr	r3, [r4, #28]
   b6558:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b655a:	69e1      	ldr	r1, [r4, #28]
   b655c:	2204      	movs	r2, #4
   b655e:	4620      	mov	r0, r4
   b6560:	f001 f95d 	bl	b781e <_ZN9TCPClient5writeEPKhj>
   b6564:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6566:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6568:	bf18      	it	ne
   b656a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b656c:	f7ff fd16 	bl	b5f9c <_ZN4MQTT11MutexLockerD1Ev>
}
   b6570:	4628      	mov	r0, r5
   b6572:	b002      	add	sp, #8
   b6574:	bd70      	pop	{r4, r5, r6, pc}

000b6576 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b657a:	ed2d 8b02 	vpush	{d8}
   b657e:	b087      	sub	sp, #28
   b6580:	af00      	add	r7, sp, #0
   b6582:	4604      	mov	r4, r0
    if (isConnected()) {
   b6584:	f7ff fe20 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b6588:	4681      	mov	r9, r0
   b658a:	b1f8      	cbz	r0, b65cc <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b658c:	4621      	mov	r1, r4
   b658e:	f107 0014 	add.w	r0, r7, #20
   b6592:	f7ff fcf8 	bl	b5f86 <_ZN4MQTT11MutexLockerC1EPS_>
   b6596:	f000 f9fb 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b659a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b659c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b65a0:	4353      	muls	r3, r2
   b65a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b65a4:	1a82      	subs	r2, r0, r2
   b65a6:	429a      	cmp	r2, r3
   b65a8:	4606      	mov	r6, r0
   b65aa:	d803      	bhi.n	b65b4 <_ZN4MQTT4loopEv+0x3e>
   b65ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b65ae:	1a82      	subs	r2, r0, r2
   b65b0:	4293      	cmp	r3, r2
   b65b2:	d221      	bcs.n	b65f8 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b65b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b65b8:	b17b      	cbz	r3, b65da <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b65ba:	4620      	mov	r0, r4
   b65bc:	f001 fbb4 	bl	b7d28 <_ZN9TCPClient4stopEv>
                return false;
   b65c0:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b65c4:	f107 0014 	add.w	r0, r7, #20
   b65c8:	f7ff fce8 	bl	b5f9c <_ZN4MQTT11MutexLockerD1Ev>
}
   b65cc:	4648      	mov	r0, r9
   b65ce:	371c      	adds	r7, #28
   b65d0:	46bd      	mov	sp, r7
   b65d2:	ecbd 8b02 	vpop	{d8}
   b65d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b65da:	69e2      	ldr	r2, [r4, #28]
   b65dc:	21c0      	movs	r1, #192	; 0xc0
   b65de:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b65e0:	69e2      	ldr	r2, [r4, #28]
   b65e2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b65e4:	69e1      	ldr	r1, [r4, #28]
   b65e6:	2202      	movs	r2, #2
   b65e8:	4620      	mov	r0, r4
   b65ea:	f001 f918 	bl	b781e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b65ee:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b65f2:	2301      	movs	r3, #1
   b65f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b65f8:	4620      	mov	r0, r4
   b65fa:	f001 fb3b 	bl	b7c74 <_ZN9TCPClient9availableEv>
   b65fe:	2800      	cmp	r0, #0
   b6600:	d0e0      	beq.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b6602:	f107 0113 	add.w	r1, r7, #19
   b6606:	4620      	mov	r0, r4
   b6608:	f7ff fd34 	bl	b6074 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b660c:	4683      	mov	fp, r0
   b660e:	2800      	cmp	r0, #0
   b6610:	d0d8      	beq.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b6612:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6614:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b6616:	7819      	ldrb	r1, [r3, #0]
   b6618:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b661c:	2a30      	cmp	r2, #48	; 0x30
   b661e:	d17f      	bne.n	b6720 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b6620:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6624:	f1ba 0f00 	cmp.w	sl, #0
   b6628:	d0cc      	beq.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b662a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b662e:	466a      	mov	r2, sp
   b6630:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6634:	eb03 020c 	add.w	r2, r3, ip
   b6638:	7851      	ldrb	r1, [r2, #1]
   b663a:	7895      	ldrb	r5, [r2, #2]
   b663c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b6640:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b6642:	f105 0208 	add.w	r2, r5, #8
   b6646:	4669      	mov	r1, sp
   b6648:	08d2      	lsrs	r2, r2, #3
   b664a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b664e:	4695      	mov	sp, r2
   b6650:	f10c 0203 	add.w	r2, ip, #3
   b6654:	60fa      	str	r2, [r7, #12]
   b6656:	eb03 0e02 	add.w	lr, r3, r2
   b665a:	eb0d 0205 	add.w	r2, sp, r5
   b665e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b6660:	f8c7 d008 	str.w	sp, [r7, #8]
   b6664:	607a      	str	r2, [r7, #4]
   b6666:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b666a:	428a      	cmp	r2, r1
   b666c:	d006      	beq.n	b667c <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b666e:	460a      	mov	r2, r1
   b6670:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6674:	f802 8b01 	strb.w	r8, [r2], #1
   b6678:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b667a:	e7f4      	b.n	b6666 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b667c:	2200      	movs	r2, #0
   b667e:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6680:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6684:	68f9      	ldr	r1, [r7, #12]
   b6686:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b668a:	ebab 020c 	sub.w	r2, fp, ip
   b668e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6690:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6694:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6698:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b669a:	d125      	bne.n	b66e8 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b669c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b66a0:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b66a2:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b66a4:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b66a8:	f10c 0105 	add.w	r1, ip, #5
   b66ac:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b66ae:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b66b0:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b66b4:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b66b6:	69e3      	ldr	r3, [r4, #28]
   b66b8:	2240      	movs	r2, #64	; 0x40
   b66ba:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b66bc:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b66be:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b66c2:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b66c6:	69e3      	ldr	r3, [r4, #28]
   b66c8:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b66cc:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b66ce:	69e3      	ldr	r3, [r4, #28]
   b66d0:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b66d4:	69e1      	ldr	r1, [r4, #28]
   b66d6:	2204      	movs	r2, #4
   b66d8:	4620      	mov	r0, r4
   b66da:	f001 f8a0 	bl	b781e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b66de:	6266      	str	r6, [r4, #36]	; 0x24
   b66e0:	ee18 3a10 	vmov	r3, s16
   b66e4:	469d      	mov	sp, r3
   b66e6:	e76d      	b.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b66e8:	f1b8 0f04 	cmp.w	r8, #4
   b66ec:	d115      	bne.n	b671a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b66ee:	f813 e001 	ldrb.w	lr, [r3, r1]
   b66f2:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b66f4:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b66f6:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b66fa:	f10c 0105 	add.w	r1, ip, #5
   b66fe:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6700:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6702:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6706:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6708:	69e3      	ldr	r3, [r4, #28]
   b670a:	2250      	movs	r2, #80	; 0x50
   b670c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b670e:	69e3      	ldr	r3, [r4, #28]
   b6710:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6712:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6716:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6718:	e7d5      	b.n	b66c6 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b671a:	4419      	add	r1, r3
   b671c:	47d0      	blx	sl
   b671e:	e7df      	b.n	b66e0 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6720:	2a50      	cmp	r2, #80	; 0x50
   b6722:	d108      	bne.n	b6736 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6724:	789a      	ldrb	r2, [r3, #2]
   b6726:	78d9      	ldrb	r1, [r3, #3]
   b6728:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b672c:	b289      	uxth	r1, r1
   b672e:	4620      	mov	r0, r4
   b6730:	f7ff fed9 	bl	b64e6 <_ZN4MQTT14publishReleaseEt>
   b6734:	e746      	b.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6736:	2a40      	cmp	r2, #64	; 0x40
   b6738:	d112      	bne.n	b6760 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b673a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b673c:	2a00      	cmp	r2, #0
   b673e:	f43f af41 	beq.w	b65c4 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6742:	f1bb 0f04 	cmp.w	fp, #4
   b6746:	f47f af3d 	bne.w	b65c4 <_ZN4MQTT4loopEv+0x4e>
   b674a:	f011 0f06 	tst.w	r1, #6
   b674e:	f47f af39 	bne.w	b65c4 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6752:	7899      	ldrb	r1, [r3, #2]
   b6754:	78d8      	ldrb	r0, [r3, #3]
   b6756:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b675a:	b280      	uxth	r0, r0
   b675c:	4790      	blx	r2
   b675e:	e731      	b.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6760:	2a60      	cmp	r2, #96	; 0x60
   b6762:	d108      	bne.n	b6776 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6764:	789a      	ldrb	r2, [r3, #2]
   b6766:	78d9      	ldrb	r1, [r3, #3]
   b6768:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b676c:	b289      	uxth	r1, r1
   b676e:	4620      	mov	r0, r4
   b6770:	f7ff fedd 	bl	b652e <_ZN4MQTT15publishCompleteEt>
   b6774:	e726      	b.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6776:	2a70      	cmp	r2, #112	; 0x70
   b6778:	d0df      	beq.n	b673a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b677a:	2a90      	cmp	r2, #144	; 0x90
   b677c:	f43f af22 	beq.w	b65c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6780:	2ac0      	cmp	r2, #192	; 0xc0
   b6782:	d10a      	bne.n	b679a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6784:	22d0      	movs	r2, #208	; 0xd0
   b6786:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6788:	69e3      	ldr	r3, [r4, #28]
   b678a:	2200      	movs	r2, #0
   b678c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b678e:	69e1      	ldr	r1, [r4, #28]
   b6790:	2202      	movs	r2, #2
   b6792:	4620      	mov	r0, r4
   b6794:	f001 f843 	bl	b781e <_ZN9TCPClient5writeEPKhj>
   b6798:	e714      	b.n	b65c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b679a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b679c:	bf04      	itt	eq
   b679e:	2300      	moveq	r3, #0
   b67a0:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b67a4:	e70e      	b.n	b65c4 <_ZN4MQTT4loopEv+0x4e>

000b67a6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b67a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b67a8:	4604      	mov	r4, r0
   b67aa:	460f      	mov	r7, r1
   b67ac:	4616      	mov	r6, r2
    if (isConnected()) {
   b67ae:	f7ff fd0b 	bl	b61c8 <_ZN4MQTT11isConnectedEv>
   b67b2:	4605      	mov	r5, r0
   b67b4:	b310      	cbz	r0, b67fc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b67b6:	4621      	mov	r1, r4
   b67b8:	a801      	add	r0, sp, #4
   b67ba:	f7ff fbe4 	bl	b5f86 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b67be:	8c23      	ldrh	r3, [r4, #32]
   b67c0:	3301      	adds	r3, #1
   b67c2:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b67c4:	b1eb      	cbz	r3, b6802 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b67c6:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b67c8:	8c23      	ldrh	r3, [r4, #32]
   b67ca:	69e2      	ldr	r2, [r4, #28]
   b67cc:	0a1b      	lsrs	r3, r3, #8
   b67ce:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b67d0:	69e3      	ldr	r3, [r4, #28]
   b67d2:	8c22      	ldrh	r2, [r4, #32]
   b67d4:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b67d6:	69e2      	ldr	r2, [r4, #28]
   b67d8:	2307      	movs	r3, #7
   b67da:	4639      	mov	r1, r7
   b67dc:	4620      	mov	r0, r4
   b67de:	f7ff fcd7 	bl	b6190 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b67e2:	69e3      	ldr	r3, [r4, #28]
   b67e4:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b67e6:	3804      	subs	r0, #4
   b67e8:	b283      	uxth	r3, r0
   b67ea:	69e2      	ldr	r2, [r4, #28]
   b67ec:	2182      	movs	r1, #130	; 0x82
   b67ee:	4620      	mov	r0, r4
   b67f0:	f7ff fc92 	bl	b6118 <_ZN4MQTT5writeEhPht>
   b67f4:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b67f6:	a801      	add	r0, sp, #4
   b67f8:	f7ff fbd0 	bl	b5f9c <_ZN4MQTT11MutexLockerD1Ev>
}
   b67fc:	4628      	mov	r0, r5
   b67fe:	b003      	add	sp, #12
   b6800:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6802:	2301      	movs	r3, #1
   b6804:	e7df      	b.n	b67c6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6806 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6806:	2200      	movs	r2, #0
   b6808:	f7ff bfcd 	b.w	b67a6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b680c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b680c:	b510      	push	{r4, lr}
   b680e:	4b06      	ldr	r3, [pc, #24]	; (b6828 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6810:	6003      	str	r3, [r0, #0]
   b6812:	4604      	mov	r4, r0
	if (mutex) {
   b6814:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6816:	b108      	cbz	r0, b681c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6818:	f000 f88a 	bl	b6930 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b681c:	4620      	mov	r0, r4
   b681e:	f7fe fee7 	bl	b55f0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6822:	4620      	mov	r0, r4
   b6824:	bd10      	pop	{r4, pc}
   b6826:	bf00      	nop
   b6828:	000bafb8 	.word	0x000bafb8

000b682c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b682c:	b510      	push	{r4, lr}
   b682e:	4604      	mov	r4, r0
}
   b6830:	f7ff ffec 	bl	b680c <_ZN16OledWingAdafruitD1Ev>
   b6834:	4620      	mov	r0, r4
   b6836:	2170      	movs	r1, #112	; 0x70
   b6838:	f7fe f97f 	bl	b4b3a <_ZdlPvj>
   b683c:	4620      	mov	r0, r4
   b683e:	bd10      	pop	{r4, pc}

000b6840 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6840:	b530      	push	{r4, r5, lr}
   b6842:	b085      	sub	sp, #20
   b6844:	4604      	mov	r4, r0
   b6846:	460d      	mov	r5, r1
   b6848:	f001 fd1c 	bl	b8284 <_Z19__fetch_global_Wirev>
   b684c:	4a10      	ldr	r2, [pc, #64]	; (b6890 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b684e:	4911      	ldr	r1, [pc, #68]	; (b6894 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6850:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6858:	2180      	movs	r1, #128	; 0x80
   b685a:	4603      	mov	r3, r0
   b685c:	9200      	str	r2, [sp, #0]
   b685e:	4620      	mov	r0, r4
   b6860:	2220      	movs	r2, #32
   b6862:	f7fe ff3d 	bl	b56e0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6866:	4b0c      	ldr	r3, [pc, #48]	; (b6898 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6868:	6023      	str	r3, [r4, #0]
   b686a:	2300      	movs	r3, #0
   b686c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6870:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6874:	f7ff fb36 	bl	b5ee4 <_ZN8DebounceC1Ev>
   b6878:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b687c:	f7ff fb32 	bl	b5ee4 <_ZN8DebounceC1Ev>
   b6880:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6884:	f7ff fb2e 	bl	b5ee4 <_ZN8DebounceC1Ev>
}
   b6888:	4620      	mov	r0, r4
   b688a:	b005      	add	sp, #20
   b688c:	bd30      	pop	{r4, r5, pc}
   b688e:	bf00      	nop
   b6890:	00061a80 	.word	0x00061a80
   b6894:	000186a0 	.word	0x000186a0
   b6898:	000bafb8 	.word	0x000bafb8

000b689c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b689c:	b513      	push	{r0, r1, r4, lr}
   b689e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b68a0:	3050      	adds	r0, #80	; 0x50
   b68a2:	f000 f83d 	bl	b6920 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b68a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b68a8:	07d9      	lsls	r1, r3, #31
   b68aa:	d505      	bpl.n	b68b8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b68ac:	2202      	movs	r2, #2
   b68ae:	2104      	movs	r1, #4
   b68b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b68b4:	f7ff fb2a 	bl	b5f0c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b68b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b68ba:	079a      	lsls	r2, r3, #30
   b68bc:	d505      	bpl.n	b68ca <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b68be:	2200      	movs	r2, #0
   b68c0:	2103      	movs	r1, #3
   b68c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b68c6:	f7ff fb21 	bl	b5f0c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b68ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b68cc:	075b      	lsls	r3, r3, #29
   b68ce:	d505      	bpl.n	b68dc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b68d0:	2202      	movs	r2, #2
   b68d2:	4611      	mov	r1, r2
   b68d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b68d8:	f7ff fb18 	bl	b5f0c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b68dc:	2301      	movs	r3, #1
   b68de:	9300      	str	r3, [sp, #0]
   b68e0:	223c      	movs	r2, #60	; 0x3c
   b68e2:	2102      	movs	r1, #2
   b68e4:	4620      	mov	r0, r4
   b68e6:	f7ff f803 	bl	b58f0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b68ea:	b002      	add	sp, #8
   b68ec:	bd10      	pop	{r4, pc}

000b68ee <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b68ee:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b68f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b68f2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b68f4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b68f6:	d502      	bpl.n	b68fe <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b68f8:	3058      	adds	r0, #88	; 0x58
   b68fa:	f7ff fb14 	bl	b5f26 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b68fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6900:	079a      	lsls	r2, r3, #30
   b6902:	d503      	bpl.n	b690c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6904:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6908:	f7ff fb0d 	bl	b5f26 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b690c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b690e:	075b      	lsls	r3, r3, #29
   b6910:	d505      	bpl.n	b691e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6912:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b691a:	f7ff bb04 	b.w	b5f26 <_ZN8Debounce6updateEv>
}
   b691e:	bd10      	pop	{r4, pc}

000b6920 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <os_mutex_create+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	00030248 	.word	0x00030248

000b6930 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <os_mutex_destroy+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	00030248 	.word	0x00030248

000b6940 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <os_mutex_lock+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	00030248 	.word	0x00030248

000b6950 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <os_mutex_unlock+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	00030248 	.word	0x00030248

000b6960 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <os_mutex_recursive_create+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	00030248 	.word	0x00030248

000b6970 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <HAL_RNG_GetRandomNumber+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	685b      	ldr	r3, [r3, #4]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	00030218 	.word	0x00030218

000b6980 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <HAL_Delay_Microseconds+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	68db      	ldr	r3, [r3, #12]
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	00030218 	.word	0x00030218

000b6990 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	695b      	ldr	r3, [r3, #20]
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	00030218 	.word	0x00030218

000b69a0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <hal_gpio_mode+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	689b      	ldr	r3, [r3, #8]
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	0003022c 	.word	0x0003022c

000b69b0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <hal_gpio_get_mode+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	68db      	ldr	r3, [r3, #12]
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	0003022c 	.word	0x0003022c

000b69c0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <hal_gpio_write+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	691b      	ldr	r3, [r3, #16]
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	0003022c 	.word	0x0003022c

000b69d0 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <hal_gpio_read+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	695b      	ldr	r3, [r3, #20]
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	0003022c 	.word	0x0003022c

000b69e0 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <hal_i2c_set_speed+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	681b      	ldr	r3, [r3, #0]
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	00030228 	.word	0x00030228

000b69f0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <hal_i2c_begin+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	68db      	ldr	r3, [r3, #12]
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	00030228 	.word	0x00030228

000b6a00 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <hal_i2c_begin_transmission+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	699b      	ldr	r3, [r3, #24]
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	00030228 	.word	0x00030228

000b6a10 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <hal_i2c_end_transmission+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	69db      	ldr	r3, [r3, #28]
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	00030228 	.word	0x00030228

000b6a20 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <hal_i2c_write+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	6a1b      	ldr	r3, [r3, #32]
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	00030228 	.word	0x00030228

000b6a30 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <hal_i2c_available+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	00030228 	.word	0x00030228

000b6a40 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <hal_i2c_read+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030228 	.word	0x00030228

000b6a50 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <hal_i2c_peek+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030228 	.word	0x00030228

000b6a60 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <hal_i2c_flush+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	00030228 	.word	0x00030228

000b6a70 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <hal_i2c_is_enabled+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030228 	.word	0x00030228

000b6a80 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <hal_i2c_init+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030228 	.word	0x00030228

000b6a90 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <if_index_to_name+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	695b      	ldr	r3, [r3, #20]
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	0003026c 	.word	0x0003026c

000b6aa0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <inet_inet_ntop+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	695b      	ldr	r3, [r3, #20]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	00030264 	.word	0x00030264

000b6ab0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <inet_htonl+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	6a1b      	ldr	r3, [r3, #32]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	00030264 	.word	0x00030264

000b6ac0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <inet_htons+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	00030264 	.word	0x00030264

000b6ad0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <netdb_freeaddrinfo+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	689b      	ldr	r3, [r3, #8]
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	00030268 	.word	0x00030268

000b6ae0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <netdb_getaddrinfo+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	68db      	ldr	r3, [r3, #12]
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	00030268 	.word	0x00030268

000b6af0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b02      	ldr	r3, [pc, #8]	; (b6afc <sock_setsockopt+0xc>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	699b      	ldr	r3, [r3, #24]
   b6af8:	9301      	str	r3, [sp, #4]
   b6afa:	bd08      	pop	{r3, pc}
   b6afc:	00030238 	.word	0x00030238

000b6b00 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <sock_close+0xc>)
   b6b04:	681b      	ldr	r3, [r3, #0]
   b6b06:	69db      	ldr	r3, [r3, #28]
   b6b08:	9301      	str	r3, [sp, #4]
   b6b0a:	bd08      	pop	{r3, pc}
   b6b0c:	00030238 	.word	0x00030238

000b6b10 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b02      	ldr	r3, [pc, #8]	; (b6b1c <sock_connect+0xc>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	6a1b      	ldr	r3, [r3, #32]
   b6b18:	9301      	str	r3, [sp, #4]
   b6b1a:	bd08      	pop	{r3, pc}
   b6b1c:	00030238 	.word	0x00030238

000b6b20 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6b20:	b508      	push	{r3, lr}
   b6b22:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <sock_recv+0xc>)
   b6b24:	681b      	ldr	r3, [r3, #0]
   b6b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b28:	9301      	str	r3, [sp, #4]
   b6b2a:	bd08      	pop	{r3, pc}
   b6b2c:	00030238 	.word	0x00030238

000b6b30 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6b30:	b508      	push	{r3, lr}
   b6b32:	4b02      	ldr	r3, [pc, #8]	; (b6b3c <sock_send+0xc>)
   b6b34:	681b      	ldr	r3, [r3, #0]
   b6b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b38:	9301      	str	r3, [sp, #4]
   b6b3a:	bd08      	pop	{r3, pc}
   b6b3c:	00030238 	.word	0x00030238

000b6b40 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b02      	ldr	r3, [pc, #8]	; (b6b4c <sock_socket+0xc>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b48:	9301      	str	r3, [sp, #4]
   b6b4a:	bd08      	pop	{r3, pc}
   b6b4c:	00030238 	.word	0x00030238

000b6b50 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6b50:	b508      	push	{r3, lr}
   b6b52:	4b02      	ldr	r3, [pc, #8]	; (b6b5c <hal_spi_begin+0xc>)
   b6b54:	681b      	ldr	r3, [r3, #0]
   b6b56:	681b      	ldr	r3, [r3, #0]
   b6b58:	9301      	str	r3, [sp, #4]
   b6b5a:	bd08      	pop	{r3, pc}
   b6b5c:	00030230 	.word	0x00030230

000b6b60 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6b60:	b508      	push	{r3, lr}
   b6b62:	4b02      	ldr	r3, [pc, #8]	; (b6b6c <hal_spi_transfer+0xc>)
   b6b64:	681b      	ldr	r3, [r3, #0]
   b6b66:	695b      	ldr	r3, [r3, #20]
   b6b68:	9301      	str	r3, [sp, #4]
   b6b6a:	bd08      	pop	{r3, pc}
   b6b6c:	00030230 	.word	0x00030230

000b6b70 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6b70:	b508      	push	{r3, lr}
   b6b72:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <hal_spi_init+0xc>)
   b6b74:	681b      	ldr	r3, [r3, #0]
   b6b76:	69db      	ldr	r3, [r3, #28]
   b6b78:	9301      	str	r3, [sp, #4]
   b6b7a:	bd08      	pop	{r3, pc}
   b6b7c:	00030230 	.word	0x00030230

000b6b80 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6b80:	b508      	push	{r3, lr}
   b6b82:	4b02      	ldr	r3, [pc, #8]	; (b6b8c <hal_spi_is_enabled+0xc>)
   b6b84:	681b      	ldr	r3, [r3, #0]
   b6b86:	6a1b      	ldr	r3, [r3, #32]
   b6b88:	9301      	str	r3, [sp, #4]
   b6b8a:	bd08      	pop	{r3, pc}
   b6b8c:	00030230 	.word	0x00030230

000b6b90 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b02      	ldr	r3, [pc, #8]	; (b6b9c <hal_spi_info+0xc>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b98:	9301      	str	r3, [sp, #4]
   b6b9a:	bd08      	pop	{r3, pc}
   b6b9c:	00030230 	.word	0x00030230

000b6ba0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6ba0:	b508      	push	{r3, lr}
   b6ba2:	4b02      	ldr	r3, [pc, #8]	; (b6bac <hal_spi_set_settings+0xc>)
   b6ba4:	681b      	ldr	r3, [r3, #0]
   b6ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ba8:	9301      	str	r3, [sp, #4]
   b6baa:	bd08      	pop	{r3, pc}
   b6bac:	00030230 	.word	0x00030230

000b6bb0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <hal_spi_acquire+0xc>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6bb8:	9301      	str	r3, [sp, #4]
   b6bba:	bd08      	pop	{r3, pc}
   b6bbc:	00030230 	.word	0x00030230

000b6bc0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6bc0:	b508      	push	{r3, lr}
   b6bc2:	4b02      	ldr	r3, [pc, #8]	; (b6bcc <hal_spi_release+0xc>)
   b6bc4:	681b      	ldr	r3, [r3, #0]
   b6bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6bc8:	9301      	str	r3, [sp, #4]
   b6bca:	bd08      	pop	{r3, pc}
   b6bcc:	00030230 	.word	0x00030230

000b6bd0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6bd0:	b508      	push	{r3, lr}
   b6bd2:	4b02      	ldr	r3, [pc, #8]	; (b6bdc <hal_usart_write+0xc>)
   b6bd4:	681b      	ldr	r3, [r3, #0]
   b6bd6:	68db      	ldr	r3, [r3, #12]
   b6bd8:	9301      	str	r3, [sp, #4]
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	0003023c 	.word	0x0003023c

000b6be0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b02      	ldr	r3, [pc, #8]	; (b6bec <hal_usart_available+0xc>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	691b      	ldr	r3, [r3, #16]
   b6be8:	9301      	str	r3, [sp, #4]
   b6bea:	bd08      	pop	{r3, pc}
   b6bec:	0003023c 	.word	0x0003023c

000b6bf0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6bf0:	b508      	push	{r3, lr}
   b6bf2:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <hal_usart_read+0xc>)
   b6bf4:	681b      	ldr	r3, [r3, #0]
   b6bf6:	695b      	ldr	r3, [r3, #20]
   b6bf8:	9301      	str	r3, [sp, #4]
   b6bfa:	bd08      	pop	{r3, pc}
   b6bfc:	0003023c 	.word	0x0003023c

000b6c00 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6c00:	b508      	push	{r3, lr}
   b6c02:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <hal_usart_peek+0xc>)
   b6c04:	681b      	ldr	r3, [r3, #0]
   b6c06:	699b      	ldr	r3, [r3, #24]
   b6c08:	9301      	str	r3, [sp, #4]
   b6c0a:	bd08      	pop	{r3, pc}
   b6c0c:	0003023c 	.word	0x0003023c

000b6c10 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6c10:	b508      	push	{r3, lr}
   b6c12:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <hal_usart_flush+0xc>)
   b6c14:	681b      	ldr	r3, [r3, #0]
   b6c16:	69db      	ldr	r3, [r3, #28]
   b6c18:	9301      	str	r3, [sp, #4]
   b6c1a:	bd08      	pop	{r3, pc}
   b6c1c:	0003023c 	.word	0x0003023c

000b6c20 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6c20:	b508      	push	{r3, lr}
   b6c22:	4b02      	ldr	r3, [pc, #8]	; (b6c2c <hal_usart_is_enabled+0xc>)
   b6c24:	681b      	ldr	r3, [r3, #0]
   b6c26:	6a1b      	ldr	r3, [r3, #32]
   b6c28:	9301      	str	r3, [sp, #4]
   b6c2a:	bd08      	pop	{r3, pc}
   b6c2c:	0003023c 	.word	0x0003023c

000b6c30 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <hal_usart_available_data_for_write+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	0003023c 	.word	0x0003023c

000b6c40 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <hal_usart_init_ex+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	0003023c 	.word	0x0003023c

000b6c50 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <HAL_USB_USART_Init+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	681b      	ldr	r3, [r3, #0]
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	0003024c 	.word	0x0003024c

000b6c60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <HAL_USB_USART_Begin+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	685b      	ldr	r3, [r3, #4]
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	0003024c 	.word	0x0003024c

000b6c70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <HAL_USB_USART_Available_Data+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	691b      	ldr	r3, [r3, #16]
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	0003024c 	.word	0x0003024c

000b6c80 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	695b      	ldr	r3, [r3, #20]
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	0003024c 	.word	0x0003024c

000b6c90 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <HAL_USB_USART_Receive_Data+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	699b      	ldr	r3, [r3, #24]
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	0003024c 	.word	0x0003024c

000b6ca0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <HAL_USB_USART_Send_Data+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	69db      	ldr	r3, [r3, #28]
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	0003024c 	.word	0x0003024c

000b6cb0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <HAL_USB_USART_Flush_Data+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	6a1b      	ldr	r3, [r3, #32]
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	0003024c 	.word	0x0003024c

000b6cc0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <panic_+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	00030260 	.word	0x00030260

000b6cd0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <log_message+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	00030260 	.word	0x00030260

000b6ce0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b02      	ldr	r3, [pc, #8]	; (b6cec <set_system_mode+0xc>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	685b      	ldr	r3, [r3, #4]
   b6ce8:	9301      	str	r3, [sp, #4]
   b6cea:	bd08      	pop	{r3, pc}
   b6cec:	00030220 	.word	0x00030220

000b6cf0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6cf0:	b508      	push	{r3, lr}
   b6cf2:	4b02      	ldr	r3, [pc, #8]	; (b6cfc <system_delay_ms+0xc>)
   b6cf4:	681b      	ldr	r3, [r3, #0]
   b6cf6:	695b      	ldr	r3, [r3, #20]
   b6cf8:	9301      	str	r3, [sp, #4]
   b6cfa:	bd08      	pop	{r3, pc}
   b6cfc:	00030220 	.word	0x00030220

000b6d00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6d00:	b508      	push	{r3, lr}
   b6d02:	4b03      	ldr	r3, [pc, #12]	; (b6d10 <system_ctrl_set_app_request_handler+0x10>)
   b6d04:	681b      	ldr	r3, [r3, #0]
   b6d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6d0a:	9301      	str	r3, [sp, #4]
   b6d0c:	bd08      	pop	{r3, pc}
   b6d0e:	0000      	.short	0x0000
   b6d10:	00030220 	.word	0x00030220

000b6d14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6d14:	b508      	push	{r3, lr}
   b6d16:	4b03      	ldr	r3, [pc, #12]	; (b6d24 <system_ctrl_set_result+0x10>)
   b6d18:	681b      	ldr	r3, [r3, #0]
   b6d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6d1e:	9301      	str	r3, [sp, #4]
   b6d20:	bd08      	pop	{r3, pc}
   b6d22:	0000      	.short	0x0000
   b6d24:	00030220 	.word	0x00030220

000b6d28 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <spark_deviceID+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	69db      	ldr	r3, [r3, #28]
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	00030244 	.word	0x00030244

000b6d38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	00030244 	.word	0x00030244

000b6d48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <network_connect+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	685b      	ldr	r3, [r3, #4]
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	00030240 	.word	0x00030240

000b6d58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <network_connecting+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	689b      	ldr	r3, [r3, #8]
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	00030240 	.word	0x00030240

000b6d68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <network_disconnect+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	68db      	ldr	r3, [r3, #12]
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	00030240 	.word	0x00030240

000b6d78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <network_ready+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	691b      	ldr	r3, [r3, #16]
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	00030240 	.word	0x00030240

000b6d88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <network_on+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	695b      	ldr	r3, [r3, #20]
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	00030240 	.word	0x00030240

000b6d98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <network_off+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	699b      	ldr	r3, [r3, #24]
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	00030240 	.word	0x00030240

000b6da8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <network_listen+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	69db      	ldr	r3, [r3, #28]
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	00030240 	.word	0x00030240

000b6db8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <network_listening+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	6a1b      	ldr	r3, [r3, #32]
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	00030240 	.word	0x00030240

000b6dc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <network_set_listen_timeout+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	00030240 	.word	0x00030240

000b6dd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <network_get_listen_timeout+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	00030240 	.word	0x00030240

000b6de8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <network_is_on+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030240 	.word	0x00030240

000b6df8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <network_is_off+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030240 	.word	0x00030240

000b6e08 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <malloc+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	681b      	ldr	r3, [r3, #0]
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	0003021c 	.word	0x0003021c

000b6e18 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <free+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	685b      	ldr	r3, [r3, #4]
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	0003021c 	.word	0x0003021c

000b6e28 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <realloc+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	689b      	ldr	r3, [r3, #8]
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	0003021c 	.word	0x0003021c

000b6e38 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <vsnprintf+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	0003021c 	.word	0x0003021c

000b6e48 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <_malloc_r+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	0003021c 	.word	0x0003021c

000b6e58 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <__errno+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	0003021c 	.word	0x0003021c

000b6e68 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <__assert_func+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	0003021c 	.word	0x0003021c

000b6e78 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <newlib_impure_ptr_callback+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	0003021c 	.word	0x0003021c

000b6e88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6e88:	2100      	movs	r1, #0
   b6e8a:	f7ff bf31 	b.w	b6cf0 <system_delay_ms>
	...

000b6e90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6e90:	4802      	ldr	r0, [pc, #8]	; (b6e9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6e92:	2300      	movs	r3, #0
   b6e94:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6e96:	f7ff bd63 	b.w	b6960 <os_mutex_recursive_create>
   b6e9a:	bf00      	nop
   b6e9c:	2003e6c4 	.word	0x2003e6c4

000b6ea0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6ea0:	2200      	movs	r2, #0
   b6ea2:	6840      	ldr	r0, [r0, #4]
   b6ea4:	4611      	mov	r1, r2
   b6ea6:	f7ff bf87 	b.w	b6db8 <network_listening>

000b6eaa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6eaa:	2200      	movs	r2, #0
   b6eac:	6840      	ldr	r0, [r0, #4]
   b6eae:	4611      	mov	r1, r2
   b6eb0:	f7ff bf92 	b.w	b6dd8 <network_get_listen_timeout>

000b6eb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6eb4:	6840      	ldr	r0, [r0, #4]
   b6eb6:	2200      	movs	r2, #0
   b6eb8:	f7ff bf86 	b.w	b6dc8 <network_set_listen_timeout>

000b6ebc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ebc:	6840      	ldr	r0, [r0, #4]
   b6ebe:	2200      	movs	r2, #0
   b6ec0:	f081 0101 	eor.w	r1, r1, #1
   b6ec4:	f7ff bf70 	b.w	b6da8 <network_listen>

000b6ec8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ec8:	2300      	movs	r3, #0
   b6eca:	6840      	ldr	r0, [r0, #4]
   b6ecc:	461a      	mov	r2, r3
   b6ece:	4619      	mov	r1, r3
   b6ed0:	f7ff bf62 	b.w	b6d98 <network_off>

000b6ed4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ed4:	2300      	movs	r3, #0
   b6ed6:	6840      	ldr	r0, [r0, #4]
   b6ed8:	461a      	mov	r2, r3
   b6eda:	4619      	mov	r1, r3
   b6edc:	f7ff bf54 	b.w	b6d88 <network_on>

000b6ee0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6ee0:	2200      	movs	r2, #0
   b6ee2:	6840      	ldr	r0, [r0, #4]
   b6ee4:	4611      	mov	r1, r2
   b6ee6:	f7ff bf47 	b.w	b6d78 <network_ready>

000b6eea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6eea:	2200      	movs	r2, #0
   b6eec:	6840      	ldr	r0, [r0, #4]
   b6eee:	4611      	mov	r1, r2
   b6ef0:	f7ff bf32 	b.w	b6d58 <network_connecting>

000b6ef4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ef4:	6840      	ldr	r0, [r0, #4]
   b6ef6:	2200      	movs	r2, #0
   b6ef8:	2102      	movs	r1, #2
   b6efa:	f7ff bf35 	b.w	b6d68 <network_disconnect>

000b6efe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6efe:	2300      	movs	r3, #0
   b6f00:	6840      	ldr	r0, [r0, #4]
   b6f02:	461a      	mov	r2, r3
   b6f04:	f7ff bf20 	b.w	b6d48 <network_connect>

000b6f08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6f08:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f0a:	2203      	movs	r2, #3
   b6f0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f0e:	4a02      	ldr	r2, [pc, #8]	; (b6f18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f12:	4770      	bx	lr
   b6f14:	2003e6c8 	.word	0x2003e6c8
   b6f18:	000bb018 	.word	0x000bb018

000b6f1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6f1c:	4770      	bx	lr

000b6f1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f20:	4606      	mov	r6, r0
   b6f22:	4615      	mov	r5, r2
   b6f24:	460c      	mov	r4, r1
   b6f26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6f28:	42bc      	cmp	r4, r7
   b6f2a:	d006      	beq.n	b6f3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6f2c:	6833      	ldr	r3, [r6, #0]
   b6f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6f32:	689b      	ldr	r3, [r3, #8]
   b6f34:	4630      	mov	r0, r6
   b6f36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6f38:	e7f6      	b.n	b6f28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6f3a:	4628      	mov	r0, r5
   b6f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6f3e:	7c00      	ldrb	r0, [r0, #16]
   b6f40:	2200      	movs	r2, #0
   b6f42:	f7ff bd6d 	b.w	b6a20 <hal_i2c_write>

000b6f46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6f46:	7c00      	ldrb	r0, [r0, #16]
   b6f48:	2100      	movs	r1, #0
   b6f4a:	f7ff bd71 	b.w	b6a30 <hal_i2c_available>

000b6f4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6f4e:	7c00      	ldrb	r0, [r0, #16]
   b6f50:	2100      	movs	r1, #0
   b6f52:	f7ff bd75 	b.w	b6a40 <hal_i2c_read>

000b6f56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6f56:	7c00      	ldrb	r0, [r0, #16]
   b6f58:	2100      	movs	r1, #0
   b6f5a:	f7ff bd79 	b.w	b6a50 <hal_i2c_peek>

000b6f5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6f5e:	7c00      	ldrb	r0, [r0, #16]
   b6f60:	2100      	movs	r1, #0
   b6f62:	f7ff bd7d 	b.w	b6a60 <hal_i2c_flush>

000b6f66 <_ZN7TwoWireD0Ev>:
   b6f66:	b510      	push	{r4, lr}
   b6f68:	2114      	movs	r1, #20
   b6f6a:	4604      	mov	r4, r0
   b6f6c:	f7fd fde5 	bl	b4b3a <_ZdlPvj>
   b6f70:	4620      	mov	r0, r4
   b6f72:	bd10      	pop	{r4, pc}

000b6f74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f74:	b538      	push	{r3, r4, r5, lr}
   b6f76:	4604      	mov	r4, r0
   b6f78:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f7e:	2200      	movs	r2, #0
   b6f80:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f84:	4b09      	ldr	r3, [pc, #36]	; (b6fac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6f86:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f88:	4608      	mov	r0, r1
   b6f8a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6f8c:	4629      	mov	r1, r5
   b6f8e:	f7ff fd77 	bl	b6a80 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f92:	30bf      	adds	r0, #191	; 0xbf
   b6f94:	d108      	bne.n	b6fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6f96:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f98:	07db      	lsls	r3, r3, #31
   b6f9a:	d505      	bpl.n	b6fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6f9c:	6868      	ldr	r0, [r5, #4]
   b6f9e:	f7ff ff3b 	bl	b6e18 <free>
    free(conf.tx_buffer);
   b6fa2:	68e8      	ldr	r0, [r5, #12]
   b6fa4:	f7ff ff38 	bl	b6e18 <free>
}
   b6fa8:	4620      	mov	r0, r4
   b6faa:	bd38      	pop	{r3, r4, r5, pc}
   b6fac:	000bb054 	.word	0x000bb054

000b6fb0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6fb0:	7c00      	ldrb	r0, [r0, #16]
   b6fb2:	2200      	movs	r2, #0
   b6fb4:	f7ff bd14 	b.w	b69e0 <hal_i2c_set_speed>

000b6fb8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6fb8:	2300      	movs	r3, #0
   b6fba:	7c00      	ldrb	r0, [r0, #16]
   b6fbc:	461a      	mov	r2, r3
   b6fbe:	4619      	mov	r1, r3
   b6fc0:	f7ff bd16 	b.w	b69f0 <hal_i2c_begin>

000b6fc4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6fc4:	7c00      	ldrb	r0, [r0, #16]
   b6fc6:	2200      	movs	r2, #0
   b6fc8:	f7ff bd1a 	b.w	b6a00 <hal_i2c_begin_transmission>

000b6fcc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6fcc:	b2c9      	uxtb	r1, r1
   b6fce:	f7ff bff9 	b.w	b6fc4 <_ZN7TwoWire17beginTransmissionEh>

000b6fd2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6fd2:	7c00      	ldrb	r0, [r0, #16]
   b6fd4:	2200      	movs	r2, #0
   b6fd6:	f7ff bd1b 	b.w	b6a10 <hal_i2c_end_transmission>

000b6fda <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6fda:	2101      	movs	r1, #1
   b6fdc:	f7ff bff9 	b.w	b6fd2 <_ZN7TwoWire15endTransmissionEh>

000b6fe0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6fe0:	4770      	bx	lr

000b6fe2 <_ZN9IPAddressD0Ev>:
   b6fe2:	b510      	push	{r4, lr}
   b6fe4:	2118      	movs	r1, #24
   b6fe6:	4604      	mov	r4, r0
   b6fe8:	f7fd fda7 	bl	b4b3a <_ZdlPvj>
   b6fec:	4620      	mov	r0, r4
   b6fee:	bd10      	pop	{r4, pc}

000b6ff0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6ff2:	7d03      	ldrb	r3, [r0, #20]
   b6ff4:	2b06      	cmp	r3, #6
{
   b6ff6:	b08d      	sub	sp, #52	; 0x34
   b6ff8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6ffa:	f100 0704 	add.w	r7, r0, #4
   b6ffe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7002:	d012      	beq.n	b702a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7004:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7008:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b700c:	220a      	movs	r2, #10
   b700e:	4630      	mov	r0, r6
   b7010:	f000 f973 	bl	b72fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7014:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7016:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7018:	d019      	beq.n	b704e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b701a:	2c00      	cmp	r4, #0
   b701c:	d0f4      	beq.n	b7008 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b701e:	212e      	movs	r1, #46	; 0x2e
   b7020:	4630      	mov	r0, r6
   b7022:	f000 f951 	bl	b72c8 <_ZN5Print5printEc>
   b7026:	4404      	add	r4, r0
   b7028:	e7ee      	b.n	b7008 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b702a:	232f      	movs	r3, #47	; 0x2f
   b702c:	466a      	mov	r2, sp
   b702e:	4639      	mov	r1, r7
   b7030:	200a      	movs	r0, #10
		buf[0] = 0;
   b7032:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7036:	f7ff fd33 	bl	b6aa0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b703a:	4668      	mov	r0, sp
   b703c:	f7fd fd1c 	bl	b4a78 <strlen>
   b7040:	6833      	ldr	r3, [r6, #0]
   b7042:	4602      	mov	r2, r0
   b7044:	68db      	ldr	r3, [r3, #12]
   b7046:	4669      	mov	r1, sp
   b7048:	4630      	mov	r0, r6
   b704a:	4798      	blx	r3
   b704c:	4604      	mov	r4, r0
    }
    return n;
}
   b704e:	4620      	mov	r0, r4
   b7050:	b00d      	add	sp, #52	; 0x34
   b7052:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7054 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7054:	b510      	push	{r4, lr}
   b7056:	4b05      	ldr	r3, [pc, #20]	; (b706c <_ZN9IPAddressC1Ev+0x18>)
   b7058:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b705a:	2211      	movs	r2, #17
   b705c:	f840 3b04 	str.w	r3, [r0], #4
   b7060:	2100      	movs	r1, #0
   b7062:	f001 fa9e 	bl	b85a2 <memset>
}
   b7066:	4620      	mov	r0, r4
   b7068:	bd10      	pop	{r4, pc}
   b706a:	bf00      	nop
   b706c:	000bb07c 	.word	0x000bb07c

000b7070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7070:	4603      	mov	r3, r0
   b7072:	4a07      	ldr	r2, [pc, #28]	; (b7090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7074:	b510      	push	{r4, lr}
   b7076:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b707a:	f101 0210 	add.w	r2, r1, #16
   b707e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7082:	f843 4b04 	str.w	r4, [r3], #4
   b7086:	4291      	cmp	r1, r2
   b7088:	d1f9      	bne.n	b707e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b708a:	780a      	ldrb	r2, [r1, #0]
   b708c:	701a      	strb	r2, [r3, #0]
}
   b708e:	bd10      	pop	{r4, pc}
   b7090:	000bb07c 	.word	0x000bb07c

000b7094 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7094:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7096:	2b04      	cmp	r3, #4
   b7098:	d104      	bne.n	b70a4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b709a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b709c:	3800      	subs	r0, #0
   b709e:	bf18      	it	ne
   b70a0:	2001      	movne	r0, #1
   b70a2:	4770      	bx	lr
    } else if (version() == 6) {
   b70a4:	2b06      	cmp	r3, #6
   b70a6:	d107      	bne.n	b70b8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b70a8:	6843      	ldr	r3, [r0, #4]
   b70aa:	b93b      	cbnz	r3, b70bc <_ZNK9IPAddresscvbEv+0x28>
   b70ac:	6883      	ldr	r3, [r0, #8]
   b70ae:	b92b      	cbnz	r3, b70bc <_ZNK9IPAddresscvbEv+0x28>
   b70b0:	68c3      	ldr	r3, [r0, #12]
   b70b2:	b91b      	cbnz	r3, b70bc <_ZNK9IPAddresscvbEv+0x28>
   b70b4:	6900      	ldr	r0, [r0, #16]
   b70b6:	e7f1      	b.n	b709c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b70b8:	2000      	movs	r0, #0
   b70ba:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b70bc:	2001      	movs	r0, #1
}
   b70be:	4770      	bx	lr

000b70c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b70c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b70c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b70c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b70ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b70ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b70d2:	2304      	movs	r3, #4
   b70d4:	6041      	str	r1, [r0, #4]
   b70d6:	7503      	strb	r3, [r0, #20]
}
   b70d8:	bd10      	pop	{r4, pc}
	...

000b70dc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b70dc:	b507      	push	{r0, r1, r2, lr}
   b70de:	4b06      	ldr	r3, [pc, #24]	; (b70f8 <_ZN9IPAddressC1EPKh+0x1c>)
   b70e0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b70e2:	78cb      	ldrb	r3, [r1, #3]
   b70e4:	9300      	str	r3, [sp, #0]
   b70e6:	788b      	ldrb	r3, [r1, #2]
   b70e8:	784a      	ldrb	r2, [r1, #1]
   b70ea:	7809      	ldrb	r1, [r1, #0]
   b70ec:	f7ff ffe8 	bl	b70c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b70f0:	b003      	add	sp, #12
   b70f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b70f6:	bf00      	nop
   b70f8:	000bb07c 	.word	0x000bb07c

000b70fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b70fc:	4b01      	ldr	r3, [pc, #4]	; (b7104 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b70fe:	4a02      	ldr	r2, [pc, #8]	; (b7108 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7100:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7102:	4770      	bx	lr
   b7104:	2003e6d0 	.word	0x2003e6d0
   b7108:	000bb088 	.word	0x000bb088

000b710c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b710c:	2300      	movs	r3, #0
   b710e:	6840      	ldr	r0, [r0, #4]
   b7110:	461a      	mov	r2, r3
   b7112:	f7ff be19 	b.w	b6d48 <network_connect>

000b7116 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7116:	6840      	ldr	r0, [r0, #4]
   b7118:	2200      	movs	r2, #0
   b711a:	2102      	movs	r1, #2
   b711c:	f7ff be24 	b.w	b6d68 <network_disconnect>

000b7120 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7120:	2200      	movs	r2, #0
   b7122:	6840      	ldr	r0, [r0, #4]
   b7124:	4611      	mov	r1, r2
   b7126:	f7ff be17 	b.w	b6d58 <network_connecting>

000b712a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b712a:	2200      	movs	r2, #0
   b712c:	6840      	ldr	r0, [r0, #4]
   b712e:	4611      	mov	r1, r2
   b7130:	f7ff be22 	b.w	b6d78 <network_ready>

000b7134 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7134:	2300      	movs	r3, #0
   b7136:	6840      	ldr	r0, [r0, #4]
   b7138:	461a      	mov	r2, r3
   b713a:	4619      	mov	r1, r3
   b713c:	f7ff be24 	b.w	b6d88 <network_on>

000b7140 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7140:	2300      	movs	r3, #0
   b7142:	6840      	ldr	r0, [r0, #4]
   b7144:	461a      	mov	r2, r3
   b7146:	4619      	mov	r1, r3
   b7148:	f7ff be26 	b.w	b6d98 <network_off>

000b714c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b714c:	6840      	ldr	r0, [r0, #4]
   b714e:	2100      	movs	r1, #0
   b7150:	f7ff be4a 	b.w	b6de8 <network_is_on>

000b7154 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7154:	6840      	ldr	r0, [r0, #4]
   b7156:	2100      	movs	r1, #0
   b7158:	f7ff be4e 	b.w	b6df8 <network_is_off>

000b715c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b715c:	6840      	ldr	r0, [r0, #4]
   b715e:	2200      	movs	r2, #0
   b7160:	f081 0101 	eor.w	r1, r1, #1
   b7164:	f7ff be20 	b.w	b6da8 <network_listen>

000b7168 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7168:	6840      	ldr	r0, [r0, #4]
   b716a:	2200      	movs	r2, #0
   b716c:	f7ff be2c 	b.w	b6dc8 <network_set_listen_timeout>

000b7170 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7170:	2200      	movs	r2, #0
   b7172:	6840      	ldr	r0, [r0, #4]
   b7174:	4611      	mov	r1, r2
   b7176:	f7ff be2f 	b.w	b6dd8 <network_get_listen_timeout>

000b717a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b717a:	2200      	movs	r2, #0
   b717c:	6840      	ldr	r0, [r0, #4]
   b717e:	4611      	mov	r1, r2
   b7180:	f7ff be1a 	b.w	b6db8 <network_listening>

000b7184 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7188:	b095      	sub	sp, #84	; 0x54
   b718a:	4614      	mov	r4, r2
   b718c:	460d      	mov	r5, r1
   b718e:	4607      	mov	r7, r0
    IPAddress addr;
   b7190:	f7ff ff60 	bl	b7054 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7194:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7196:	221c      	movs	r2, #28
   b7198:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b719a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b719c:	f001 fa01 	bl	b85a2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b71a0:	2340      	movs	r3, #64	; 0x40
   b71a2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b71a4:	4620      	mov	r0, r4
   b71a6:	466b      	mov	r3, sp
   b71a8:	aa0c      	add	r2, sp, #48	; 0x30
   b71aa:	2100      	movs	r1, #0
   b71ac:	f7ff fc98 	bl	b6ae0 <netdb_getaddrinfo>
    if (!r) {
   b71b0:	4604      	mov	r4, r0
   b71b2:	2800      	cmp	r0, #0
   b71b4:	d14b      	bne.n	b724e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71b6:	4602      	mov	r2, r0
   b71b8:	2101      	movs	r1, #1
   b71ba:	6868      	ldr	r0, [r5, #4]
   b71bc:	f7ff fddc 	bl	b6d78 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71c0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71c2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71c4:	4622      	mov	r2, r4
   b71c6:	6868      	ldr	r0, [r5, #4]
   b71c8:	f7ff fdd6 	bl	b6d78 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71cc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71ce:	4681      	mov	r9, r0
        bool ok = false;
   b71d0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71d2:	2e00      	cmp	r6, #0
   b71d4:	d03b      	beq.n	b724e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b71d6:	2900      	cmp	r1, #0
   b71d8:	d139      	bne.n	b724e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b71da:	6873      	ldr	r3, [r6, #4]
   b71dc:	2b02      	cmp	r3, #2
   b71de:	d003      	beq.n	b71e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b71e0:	2b0a      	cmp	r3, #10
   b71e2:	d011      	beq.n	b7208 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71e4:	69f6      	ldr	r6, [r6, #28]
   b71e6:	e7f4      	b.n	b71d2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b71e8:	f1b8 0f00 	cmp.w	r8, #0
   b71ec:	d0fa      	beq.n	b71e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b71ee:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b71f0:	a806      	add	r0, sp, #24
   b71f2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b71f4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b71f6:	f7ff ff71 	bl	b70dc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b71fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71fc:	1d3c      	adds	r4, r7, #4
   b71fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7200:	682b      	ldr	r3, [r5, #0]
   b7202:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7204:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7206:	e7ed      	b.n	b71e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7208:	f1b9 0f00 	cmp.w	r9, #0
   b720c:	d0ea      	beq.n	b71e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b720e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7210:	2210      	movs	r2, #16
   b7212:	a801      	add	r0, sp, #4
   b7214:	f001 f9c5 	bl	b85a2 <memset>
                    a.v = 6;
   b7218:	2306      	movs	r3, #6
   b721a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b721e:	ad01      	add	r5, sp, #4
   b7220:	f104 0308 	add.w	r3, r4, #8
   b7224:	3418      	adds	r4, #24
   b7226:	6818      	ldr	r0, [r3, #0]
   b7228:	6859      	ldr	r1, [r3, #4]
   b722a:	462a      	mov	r2, r5
   b722c:	c203      	stmia	r2!, {r0, r1}
   b722e:	3308      	adds	r3, #8
   b7230:	42a3      	cmp	r3, r4
   b7232:	4615      	mov	r5, r2
   b7234:	d1f7      	bne.n	b7226 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7236:	a901      	add	r1, sp, #4
   b7238:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b723a:	ad07      	add	r5, sp, #28
   b723c:	f7ff ff18 	bl	b7070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7242:	1d3c      	adds	r4, r7, #4
   b7244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7246:	682b      	ldr	r3, [r5, #0]
   b7248:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b724a:	4649      	mov	r1, r9
   b724c:	e7ca      	b.n	b71e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b724e:	9800      	ldr	r0, [sp, #0]
   b7250:	f7ff fc3e 	bl	b6ad0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7254:	4638      	mov	r0, r7
   b7256:	b015      	add	sp, #84	; 0x54
   b7258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b725c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b725c:	4b02      	ldr	r3, [pc, #8]	; (b7268 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b725e:	4a03      	ldr	r2, [pc, #12]	; (b726c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7260:	601a      	str	r2, [r3, #0]
   b7262:	2200      	movs	r2, #0
   b7264:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7266:	4770      	bx	lr
   b7268:	2003e6d4 	.word	0x2003e6d4
   b726c:	000bb094 	.word	0x000bb094

000b7270 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7272:	4606      	mov	r6, r0
   b7274:	460d      	mov	r5, r1
  size_t n = 0;
   b7276:	188f      	adds	r7, r1, r2
   b7278:	2400      	movs	r4, #0
  while (size--) {
   b727a:	42bd      	cmp	r5, r7
   b727c:	d00c      	beq.n	b7298 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b727e:	6833      	ldr	r3, [r6, #0]
   b7280:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7284:	689b      	ldr	r3, [r3, #8]
   b7286:	4630      	mov	r0, r6
   b7288:	4798      	blx	r3
     if (chunk>=0)
   b728a:	1e03      	subs	r3, r0, #0
   b728c:	db01      	blt.n	b7292 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b728e:	441c      	add	r4, r3
  while (size--) {
   b7290:	e7f3      	b.n	b727a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7292:	2c00      	cmp	r4, #0
   b7294:	bf08      	it	eq
   b7296:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7298:	4620      	mov	r0, r4
   b729a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b729c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b729c:	b513      	push	{r0, r1, r4, lr}
   b729e:	4604      	mov	r4, r0
    }
   b72a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b72a2:	b159      	cbz	r1, b72bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b72a4:	9101      	str	r1, [sp, #4]
   b72a6:	f7fd fbe7 	bl	b4a78 <strlen>
   b72aa:	6823      	ldr	r3, [r4, #0]
   b72ac:	9901      	ldr	r1, [sp, #4]
   b72ae:	68db      	ldr	r3, [r3, #12]
   b72b0:	4602      	mov	r2, r0
   b72b2:	4620      	mov	r0, r4
    }
   b72b4:	b002      	add	sp, #8
   b72b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b72ba:	4718      	bx	r3
    }
   b72bc:	b002      	add	sp, #8
   b72be:	bd10      	pop	{r4, pc}

000b72c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b72c0:	b508      	push	{r3, lr}
  return write(str);
   b72c2:	f7ff ffeb 	bl	b729c <_ZN5Print5writeEPKc>
}
   b72c6:	bd08      	pop	{r3, pc}

000b72c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b72c8:	6803      	ldr	r3, [r0, #0]
   b72ca:	689b      	ldr	r3, [r3, #8]
   b72cc:	4718      	bx	r3

000b72ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b72ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b72d0:	210d      	movs	r1, #13
{
   b72d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b72d4:	f7ff fff8 	bl	b72c8 <_ZN5Print5printEc>
  n += print('\n');
   b72d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b72da:	4604      	mov	r4, r0
  n += print('\n');
   b72dc:	4628      	mov	r0, r5
   b72de:	f7ff fff3 	bl	b72c8 <_ZN5Print5printEc>
  return n;
}
   b72e2:	4420      	add	r0, r4
   b72e4:	bd38      	pop	{r3, r4, r5, pc}

000b72e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b72e6:	b538      	push	{r3, r4, r5, lr}
   b72e8:	4605      	mov	r5, r0
  return write(str);
   b72ea:	f7ff ffd7 	bl	b729c <_ZN5Print5writeEPKc>
   b72ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b72f0:	4628      	mov	r0, r5
   b72f2:	f7ff ffec 	bl	b72ce <_ZN5Print7printlnEv>
  return n;
}
   b72f6:	4420      	add	r0, r4
   b72f8:	bd38      	pop	{r3, r4, r5, pc}

000b72fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b72fa:	b530      	push	{r4, r5, lr}
   b72fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b72fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7300:	2a01      	cmp	r2, #1
  *str = '\0';
   b7302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7306:	bf98      	it	ls
   b7308:	220a      	movls	r2, #10
   b730a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b730c:	460d      	mov	r5, r1
   b730e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7312:	fb01 5312 	mls	r3, r1, r2, r5
   b7316:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b731a:	2b09      	cmp	r3, #9
   b731c:	bf94      	ite	ls
   b731e:	3330      	addls	r3, #48	; 0x30
   b7320:	3337      	addhi	r3, #55	; 0x37
   b7322:	b2db      	uxtb	r3, r3
  } while(n);
   b7324:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7326:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b732a:	d9ef      	bls.n	b730c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b732c:	4621      	mov	r1, r4
   b732e:	f7ff ffb5 	bl	b729c <_ZN5Print5writeEPKc>
}
   b7332:	b00b      	add	sp, #44	; 0x2c
   b7334:	bd30      	pop	{r4, r5, pc}
	...

000b7338 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b733c:	ec55 4b10 	vmov	r4, r5, d0
   b7340:	4606      	mov	r6, r0
   b7342:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7344:	ee10 2a10 	vmov	r2, s0
   b7348:	ee10 0a10 	vmov	r0, s0
   b734c:	462b      	mov	r3, r5
   b734e:	4629      	mov	r1, r5
   b7350:	f7fd fabc 	bl	b48cc <__aeabi_dcmpun>
   b7354:	b140      	cbz	r0, b7368 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7356:	4953      	ldr	r1, [pc, #332]	; (b74a4 <_ZN5Print10printFloatEdh+0x16c>)
   b7358:	4630      	mov	r0, r6
   b735a:	f7ff ff9f 	bl	b729c <_ZN5Print5writeEPKc>
   b735e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7360:	4650      	mov	r0, sl
   b7362:	b003      	add	sp, #12
   b7364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7368:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b736c:	4b4e      	ldr	r3, [pc, #312]	; (b74a8 <_ZN5Print10printFloatEdh+0x170>)
   b736e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7372:	4620      	mov	r0, r4
   b7374:	4649      	mov	r1, r9
   b7376:	f7fd faa9 	bl	b48cc <__aeabi_dcmpun>
   b737a:	b948      	cbnz	r0, b7390 <_ZN5Print10printFloatEdh+0x58>
   b737c:	4b4a      	ldr	r3, [pc, #296]	; (b74a8 <_ZN5Print10printFloatEdh+0x170>)
   b737e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7382:	4620      	mov	r0, r4
   b7384:	4649      	mov	r1, r9
   b7386:	f7fd fa83 	bl	b4890 <__aeabi_dcmple>
   b738a:	b908      	cbnz	r0, b7390 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b738c:	4947      	ldr	r1, [pc, #284]	; (b74ac <_ZN5Print10printFloatEdh+0x174>)
   b738e:	e7e3      	b.n	b7358 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7390:	4b47      	ldr	r3, [pc, #284]	; (b74b0 <_ZN5Print10printFloatEdh+0x178>)
   b7392:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7396:	4620      	mov	r0, r4
   b7398:	4629      	mov	r1, r5
   b739a:	f7fd fa8d 	bl	b48b8 <__aeabi_dcmpgt>
   b739e:	b108      	cbz	r0, b73a4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b73a0:	4944      	ldr	r1, [pc, #272]	; (b74b4 <_ZN5Print10printFloatEdh+0x17c>)
   b73a2:	e7d9      	b.n	b7358 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b73a4:	4b44      	ldr	r3, [pc, #272]	; (b74b8 <_ZN5Print10printFloatEdh+0x180>)
   b73a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b73aa:	4620      	mov	r0, r4
   b73ac:	4629      	mov	r1, r5
   b73ae:	f7fd fa65 	bl	b487c <__aeabi_dcmplt>
   b73b2:	2800      	cmp	r0, #0
   b73b4:	d1f4      	bne.n	b73a0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b73b6:	2200      	movs	r2, #0
   b73b8:	2300      	movs	r3, #0
   b73ba:	4620      	mov	r0, r4
   b73bc:	4629      	mov	r1, r5
   b73be:	f7fd fa5d 	bl	b487c <__aeabi_dcmplt>
   b73c2:	b1d0      	cbz	r0, b73fa <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b73c4:	212d      	movs	r1, #45	; 0x2d
   b73c6:	4630      	mov	r0, r6
   b73c8:	f7ff ff7e 	bl	b72c8 <_ZN5Print5printEc>
     number = -number;
   b73cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b73d0:	4682      	mov	sl, r0
     number = -number;
   b73d2:	461d      	mov	r5, r3
  double rounding = 0.5;
   b73d4:	4939      	ldr	r1, [pc, #228]	; (b74bc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b73d6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b74c4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b73da:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b73de:	2000      	movs	r0, #0
    rounding /= 10.0;
   b73e0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b73e4:	fa5f f38b 	uxtb.w	r3, fp
   b73e8:	429f      	cmp	r7, r3
   b73ea:	d908      	bls.n	b73fe <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b73ec:	4642      	mov	r2, r8
   b73ee:	464b      	mov	r3, r9
   b73f0:	f7fd f8fc 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b73f4:	f10b 0b01 	add.w	fp, fp, #1
   b73f8:	e7f4      	b.n	b73e4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b73fa:	4682      	mov	sl, r0
   b73fc:	e7ea      	b.n	b73d4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b73fe:	4622      	mov	r2, r4
   b7400:	462b      	mov	r3, r5
   b7402:	f7fc fe13 	bl	b402c <__adddf3>
   b7406:	460d      	mov	r5, r1
   b7408:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b740a:	f7fd fa9d 	bl	b4948 <__aeabi_d2uiz>
   b740e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7410:	f7fc ff48 	bl	b42a4 <__aeabi_ui2d>
   b7414:	4602      	mov	r2, r0
   b7416:	460b      	mov	r3, r1
   b7418:	4620      	mov	r0, r4
   b741a:	4629      	mov	r1, r5
   b741c:	f7fc fe04 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7420:	220a      	movs	r2, #10
   b7422:	4604      	mov	r4, r0
   b7424:	460d      	mov	r5, r1
   b7426:	4630      	mov	r0, r6
   b7428:	4641      	mov	r1, r8
   b742a:	f7ff ff66 	bl	b72fa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b742e:	4482      	add	sl, r0
  if (digits > 0) {
   b7430:	2f00      	cmp	r7, #0
   b7432:	d095      	beq.n	b7360 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7434:	4922      	ldr	r1, [pc, #136]	; (b74c0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7436:	f8df 908c 	ldr.w	r9, [pc, #140]	; b74c4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b743a:	4630      	mov	r0, r6
   b743c:	f7ff ff2e 	bl	b729c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7440:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7444:	4482      	add	sl, r0
  while (digits-- > 0)
   b7446:	2f00      	cmp	r7, #0
   b7448:	d08a      	beq.n	b7360 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b744a:	4642      	mov	r2, r8
   b744c:	464b      	mov	r3, r9
   b744e:	4620      	mov	r0, r4
   b7450:	4629      	mov	r1, r5
   b7452:	f7fc ffa1 	bl	b4398 <__aeabi_dmul>
   b7456:	4604      	mov	r4, r0
   b7458:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b745a:	f7fd fa4d 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b745e:	f1b0 0b00 	subs.w	fp, r0, #0
   b7462:	da1c      	bge.n	b749e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7464:	212d      	movs	r1, #45	; 0x2d
   b7466:	4630      	mov	r0, r6
   b7468:	f7ff ff2e 	bl	b72c8 <_ZN5Print5printEc>
            val = -n;
   b746c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7470:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7472:	220a      	movs	r2, #10
   b7474:	4630      	mov	r0, r6
   b7476:	9301      	str	r3, [sp, #4]
   b7478:	f7ff ff3f 	bl	b72fa <_ZN5Print11printNumberEmh>
   b747c:	9b01      	ldr	r3, [sp, #4]
   b747e:	4418      	add	r0, r3
    n += print(toPrint);
   b7480:	4482      	add	sl, r0
    remainder -= toPrint;
   b7482:	4658      	mov	r0, fp
   b7484:	f7fc ff1e 	bl	b42c4 <__aeabi_i2d>
   b7488:	4602      	mov	r2, r0
   b748a:	460b      	mov	r3, r1
   b748c:	4620      	mov	r0, r4
   b748e:	4629      	mov	r1, r5
   b7490:	f7fc fdca 	bl	b4028 <__aeabi_dsub>
   b7494:	3f01      	subs	r7, #1
   b7496:	4604      	mov	r4, r0
   b7498:	460d      	mov	r5, r1
   b749a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b749c:	e7d3      	b.n	b7446 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b749e:	4659      	mov	r1, fp
        size_t t = 0;
   b74a0:	2300      	movs	r3, #0
   b74a2:	e7e6      	b.n	b7472 <_ZN5Print10printFloatEdh+0x13a>
   b74a4:	000bb0c8 	.word	0x000bb0c8
   b74a8:	7fefffff 	.word	0x7fefffff
   b74ac:	000bb0cc 	.word	0x000bb0cc
   b74b0:	41efffff 	.word	0x41efffff
   b74b4:	000bb0d0 	.word	0x000bb0d0
   b74b8:	c1efffff 	.word	0xc1efffff
   b74bc:	3fe00000 	.word	0x3fe00000
   b74c0:	000bb0d4 	.word	0x000bb0d4
   b74c4:	40240000 	.word	0x40240000

000b74c8 <_ZN5Print7printlnEdi>:
{
   b74c8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b74ca:	b2c9      	uxtb	r1, r1
{
   b74cc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b74ce:	f7ff ff33 	bl	b7338 <_ZN5Print10printFloatEdh>
   b74d2:	4604      	mov	r4, r0
  n += println();
   b74d4:	4628      	mov	r0, r5
   b74d6:	f7ff fefa 	bl	b72ce <_ZN5Print7printlnEv>
}
   b74da:	4420      	add	r0, r4
   b74dc:	bd38      	pop	{r3, r4, r5, pc}

000b74de <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b74de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74e2:	b086      	sub	sp, #24
   b74e4:	af00      	add	r7, sp, #0
   b74e6:	4605      	mov	r5, r0
   b74e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b74ea:	1d38      	adds	r0, r7, #4
   b74ec:	2114      	movs	r1, #20
{
   b74ee:	4614      	mov	r4, r2
    va_copy(args2, args);
   b74f0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b74f2:	f7ff fca1 	bl	b6e38 <vsnprintf>

    if (n<bufsize)
   b74f6:	2813      	cmp	r0, #19
   b74f8:	d80e      	bhi.n	b7518 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b74fa:	1d39      	adds	r1, r7, #4
   b74fc:	4628      	mov	r0, r5
   b74fe:	f7ff fecd 	bl	b729c <_ZN5Print5writeEPKc>
   b7502:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7504:	b11e      	cbz	r6, b750e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7506:	4628      	mov	r0, r5
   b7508:	f7ff fee1 	bl	b72ce <_ZN5Print7printlnEv>
   b750c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b750e:	4620      	mov	r0, r4
   b7510:	3718      	adds	r7, #24
   b7512:	46bd      	mov	sp, r7
   b7514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7518:	f100 0308 	add.w	r3, r0, #8
   b751c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7520:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7522:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7526:	4622      	mov	r2, r4
   b7528:	1c41      	adds	r1, r0, #1
   b752a:	683b      	ldr	r3, [r7, #0]
   b752c:	4668      	mov	r0, sp
   b752e:	f7ff fc83 	bl	b6e38 <vsnprintf>
  return write(str);
   b7532:	4669      	mov	r1, sp
   b7534:	4628      	mov	r0, r5
   b7536:	f7ff feb1 	bl	b729c <_ZN5Print5writeEPKc>
   b753a:	4604      	mov	r4, r0
   b753c:	46c5      	mov	sp, r8
   b753e:	e7e1      	b.n	b7504 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7540 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7540:	4b01      	ldr	r3, [pc, #4]	; (b7548 <_GLOBAL__sub_I_RGB+0x8>)
   b7542:	2200      	movs	r2, #0
   b7544:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7546:	4770      	bx	lr
   b7548:	2003e6dc 	.word	0x2003e6dc

000b754c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b754c:	2100      	movs	r1, #0
   b754e:	f7ff bb37 	b.w	b6bc0 <hal_spi_release>

000b7552 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7552:	2100      	movs	r1, #0
   b7554:	f7ff bb2c 	b.w	b6bb0 <hal_spi_acquire>

000b7558 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7558:	b510      	push	{r4, lr}
   b755a:	4604      	mov	r4, r0
   b755c:	4608      	mov	r0, r1
{
    _spi = spi;
   b755e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7560:	f7ff fb06 	bl	b6b70 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7564:	2300      	movs	r3, #0
   b7566:	6063      	str	r3, [r4, #4]
}
   b7568:	4620      	mov	r0, r4
   b756a:	bd10      	pop	{r4, pc}

000b756c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b756c:	b513      	push	{r0, r1, r4, lr}
   b756e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7570:	7800      	ldrb	r0, [r0, #0]
   b7572:	f7ff ffee 	bl	b7552 <_ZN8SPIClass4lockEv.isra.0>
   b7576:	b958      	cbnz	r0, b7590 <_ZN8SPIClass5beginEv+0x24>
   b7578:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b757a:	9001      	str	r0, [sp, #4]
   b757c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7580:	f7ff fae6 	bl	b6b50 <hal_spi_begin>
        unlock();
   b7584:	9801      	ldr	r0, [sp, #4]
    }
}
   b7586:	b002      	add	sp, #8
   b7588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b758c:	f7ff bfde 	b.w	b754c <_ZN8SPIClass6unlockEv.isra.0>
   b7590:	b002      	add	sp, #8
   b7592:	bd10      	pop	{r4, pc}

000b7594 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7594:	7800      	ldrb	r0, [r0, #0]
   b7596:	f7ff bfd9 	b.w	b754c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b759c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b759c:	0840      	lsrs	r0, r0, #1
{
   b759e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b75a0:	6018      	str	r0, [r3, #0]
   b75a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b75a4:	6818      	ldr	r0, [r3, #0]
   b75a6:	4288      	cmp	r0, r1
   b75a8:	b2e5      	uxtb	r5, r4
   b75aa:	d906      	bls.n	b75ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b75ac:	3401      	adds	r4, #1
   b75ae:	2c08      	cmp	r4, #8
   b75b0:	d002      	beq.n	b75b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b75b2:	0840      	lsrs	r0, r0, #1
   b75b4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b75b6:	e7f5      	b.n	b75a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b75b8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b75ba:	4b02      	ldr	r3, [pc, #8]	; (b75c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b75bc:	5d5b      	ldrb	r3, [r3, r5]
   b75be:	7013      	strb	r3, [r2, #0]
}
   b75c0:	bd30      	pop	{r4, r5, pc}
   b75c2:	bf00      	nop
   b75c4:	000bb0d6 	.word	0x000bb0d6

000b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b75c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b75cc:	4606      	mov	r6, r0
   b75ce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b75d0:	7800      	ldrb	r0, [r0, #0]
{
   b75d2:	460c      	mov	r4, r1
    CHECK(lock());
   b75d4:	f7ff ffbd 	bl	b7552 <_ZN8SPIClass4lockEv.isra.0>
   b75d8:	2800      	cmp	r0, #0
   b75da:	db1b      	blt.n	b7614 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b75dc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b75de:	2214      	movs	r2, #20
   b75e0:	2100      	movs	r1, #0
   b75e2:	a809      	add	r0, sp, #36	; 0x24
   b75e4:	f000 ffdd 	bl	b85a2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b75e8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b75ea:	2200      	movs	r2, #0
   b75ec:	a909      	add	r1, sp, #36	; 0x24
   b75ee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b75f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b75f4:	f7ff facc 	bl	b6b90 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b75f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b75fc:	b113      	cbz	r3, b7604 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b75fe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7602:	b155      	cbz	r5, b761a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7604:	2700      	movs	r7, #0
   b7606:	46b9      	mov	r9, r7
   b7608:	46b8      	mov	r8, r7
   b760a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b760c:	7923      	ldrb	r3, [r4, #4]
   b760e:	b15d      	cbz	r5, b7628 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7610:	b1c3      	cbz	r3, b7644 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7612:	2000      	movs	r0, #0
}
   b7614:	b00f      	add	sp, #60	; 0x3c
   b7616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b761a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b761e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7622:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7626:	e7f1      	b.n	b760c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7628:	2b00      	cmp	r3, #0
   b762a:	d135      	bne.n	b7698 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b762c:	68a3      	ldr	r3, [r4, #8]
   b762e:	4543      	cmp	r3, r8
   b7630:	d108      	bne.n	b7644 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7632:	f88d 9020 	strb.w	r9, [sp, #32]
   b7636:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b763a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b763e:	89a3      	ldrh	r3, [r4, #12]
   b7640:	429a      	cmp	r2, r3
   b7642:	d0e6      	beq.n	b7612 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7644:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7646:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7648:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b764c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b764e:	ab04      	add	r3, sp, #16
   b7650:	f10d 020f 	add.w	r2, sp, #15
   b7654:	f7ff ffa2 	bl	b759c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7658:	7921      	ldrb	r1, [r4, #4]
   b765a:	b985      	cbnz	r5, b767e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b765c:	b989      	cbnz	r1, b7682 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b765e:	68a3      	ldr	r3, [r4, #8]
   b7660:	4543      	cmp	r3, r8
   b7662:	d30e      	bcc.n	b7682 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7664:	f88d 9020 	strb.w	r9, [sp, #32]
   b7668:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b766c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7670:	89a3      	ldrh	r3, [r4, #12]
   b7672:	429a      	cmp	r2, r3
   b7674:	d105      	bne.n	b7682 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7676:	9b04      	ldr	r3, [sp, #16]
   b7678:	4543      	cmp	r3, r8
   b767a:	d102      	bne.n	b7682 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b767c:	e7c9      	b.n	b7612 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b767e:	2900      	cmp	r1, #0
   b7680:	d1f9      	bne.n	b7676 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7682:	2300      	movs	r3, #0
   b7684:	9301      	str	r3, [sp, #4]
   b7686:	7b63      	ldrb	r3, [r4, #13]
   b7688:	9300      	str	r3, [sp, #0]
   b768a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b768e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7690:	7830      	ldrb	r0, [r6, #0]
   b7692:	f7ff fa85 	bl	b6ba0 <hal_spi_set_settings>
   b7696:	e7bc      	b.n	b7612 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7698:	e9cd 5500 	strd	r5, r5, [sp]
   b769c:	462b      	mov	r3, r5
   b769e:	462a      	mov	r2, r5
   b76a0:	2101      	movs	r1, #1
   b76a2:	e7f5      	b.n	b7690 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b76a4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b76a4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b76a6:	7800      	ldrb	r0, [r0, #0]
   b76a8:	f7ff fa5a 	bl	b6b60 <hal_spi_transfer>
}
   b76ac:	b2c0      	uxtb	r0, r0
   b76ae:	bd08      	pop	{r3, pc}

000b76b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b76b0:	b510      	push	{r4, lr}
   b76b2:	4604      	mov	r4, r0
{
	free(buffer);
   b76b4:	6800      	ldr	r0, [r0, #0]
   b76b6:	f7ff fbaf 	bl	b6e18 <free>
}
   b76ba:	4620      	mov	r0, r4
   b76bc:	bd10      	pop	{r4, pc}

000b76be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b76be:	b510      	push	{r4, lr}
   b76c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b76c2:	6800      	ldr	r0, [r0, #0]
   b76c4:	b108      	cbz	r0, b76ca <_ZN6String10invalidateEv+0xc>
   b76c6:	f7ff fba7 	bl	b6e18 <free>
	buffer = NULL;
   b76ca:	2300      	movs	r3, #0
	capacity = len = 0;
   b76cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b76d0:	6023      	str	r3, [r4, #0]
}
   b76d2:	bd10      	pop	{r4, pc}

000b76d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b76d4:	b538      	push	{r3, r4, r5, lr}
   b76d6:	4604      	mov	r4, r0
   b76d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b76da:	6800      	ldr	r0, [r0, #0]
   b76dc:	3101      	adds	r1, #1
   b76de:	f7ff fba3 	bl	b6e28 <realloc>
	if (newbuffer) {
   b76e2:	b110      	cbz	r0, b76ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b76e4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b76e8:	2001      	movs	r0, #1
	}
	return 0;
}
   b76ea:	bd38      	pop	{r3, r4, r5, pc}

000b76ec <_ZN6String7reserveEj>:
{
   b76ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b76ee:	6803      	ldr	r3, [r0, #0]
{
   b76f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b76f2:	b123      	cbz	r3, b76fe <_ZN6String7reserveEj+0x12>
   b76f4:	6843      	ldr	r3, [r0, #4]
   b76f6:	428b      	cmp	r3, r1
   b76f8:	d301      	bcc.n	b76fe <_ZN6String7reserveEj+0x12>
   b76fa:	2001      	movs	r0, #1
}
   b76fc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b76fe:	4620      	mov	r0, r4
   b7700:	f7ff ffe8 	bl	b76d4 <_ZN6String12changeBufferEj>
   b7704:	2800      	cmp	r0, #0
   b7706:	d0f9      	beq.n	b76fc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7708:	68a3      	ldr	r3, [r4, #8]
   b770a:	2b00      	cmp	r3, #0
   b770c:	d1f5      	bne.n	b76fa <_ZN6String7reserveEj+0xe>
   b770e:	6822      	ldr	r2, [r4, #0]
   b7710:	7013      	strb	r3, [r2, #0]
   b7712:	e7f2      	b.n	b76fa <_ZN6String7reserveEj+0xe>

000b7714 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7716:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7718:	4611      	mov	r1, r2
   b771a:	9201      	str	r2, [sp, #4]
{
   b771c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b771e:	f7ff ffe5 	bl	b76ec <_ZN6String7reserveEj>
   b7722:	9a01      	ldr	r2, [sp, #4]
   b7724:	b928      	cbnz	r0, b7732 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7726:	4620      	mov	r0, r4
   b7728:	f7ff ffc9 	bl	b76be <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b772c:	4620      	mov	r0, r4
   b772e:	b003      	add	sp, #12
   b7730:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7732:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7734:	4629      	mov	r1, r5
   b7736:	6820      	ldr	r0, [r4, #0]
   b7738:	f000 ff25 	bl	b8586 <memcpy>
	buffer[len] = 0;
   b773c:	6822      	ldr	r2, [r4, #0]
   b773e:	68a3      	ldr	r3, [r4, #8]
   b7740:	2100      	movs	r1, #0
   b7742:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7744:	e7f2      	b.n	b772c <_ZN6String4copyEPKcj+0x18>

000b7746 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7746:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7748:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b774a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b774e:	4604      	mov	r4, r0
	len = 0;
   b7750:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7752:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7754:	b141      	cbz	r1, b7768 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7756:	4608      	mov	r0, r1
   b7758:	9101      	str	r1, [sp, #4]
   b775a:	f7fd f98d 	bl	b4a78 <strlen>
   b775e:	9901      	ldr	r1, [sp, #4]
   b7760:	4602      	mov	r2, r0
   b7762:	4620      	mov	r0, r4
   b7764:	f7ff ffd6 	bl	b7714 <_ZN6String4copyEPKcj>
}
   b7768:	4620      	mov	r0, r4
   b776a:	b002      	add	sp, #8
   b776c:	bd10      	pop	{r4, pc}

000b776e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b776e:	b513      	push	{r0, r1, r4, lr}
   b7770:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7772:	b159      	cbz	r1, b778c <_ZN6StringaSEPKc+0x1e>
   b7774:	4608      	mov	r0, r1
   b7776:	9101      	str	r1, [sp, #4]
   b7778:	f7fd f97e 	bl	b4a78 <strlen>
   b777c:	9901      	ldr	r1, [sp, #4]
   b777e:	4602      	mov	r2, r0
   b7780:	4620      	mov	r0, r4
   b7782:	f7ff ffc7 	bl	b7714 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7786:	4620      	mov	r0, r4
   b7788:	b002      	add	sp, #8
   b778a:	bd10      	pop	{r4, pc}
	else invalidate();
   b778c:	f7ff ff97 	bl	b76be <_ZN6String10invalidateEv>
   b7790:	e7f9      	b.n	b7786 <_ZN6StringaSEPKc+0x18>

000b7792 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b7792:	6802      	ldr	r2, [r0, #0]
{
   b7794:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b7796:	6809      	ldr	r1, [r1, #0]
   b7798:	b162      	cbz	r2, b77b4 <_ZNK6String9compareToERKS_+0x22>
   b779a:	b941      	cbnz	r1, b77ae <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b779c:	6880      	ldr	r0, [r0, #8]
   b779e:	b160      	cbz	r0, b77ba <_ZNK6String9compareToERKS_+0x28>
   b77a0:	7810      	ldrb	r0, [r2, #0]
   b77a2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b77a4:	6898      	ldr	r0, [r3, #8]
   b77a6:	b140      	cbz	r0, b77ba <_ZNK6String9compareToERKS_+0x28>
   b77a8:	7809      	ldrb	r1, [r1, #0]
   b77aa:	4248      	negs	r0, r1
   b77ac:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b77ae:	4610      	mov	r0, r2
   b77b0:	f7fd b958 	b.w	b4a64 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b77b4:	2900      	cmp	r1, #0
   b77b6:	d1f5      	bne.n	b77a4 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b77b8:	4608      	mov	r0, r1
}
   b77ba:	4770      	bx	lr

000b77bc <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b77bc:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b77be:	6800      	ldr	r0, [r0, #0]
   b77c0:	b140      	cbz	r0, b77d4 <_ZNK6String7toFloatEv+0x18>
   b77c2:	f000 fedd 	bl	b8580 <atof>
   b77c6:	ec51 0b10 	vmov	r0, r1, d0
   b77ca:	f7fd f8dd 	bl	b4988 <__aeabi_d2f>
   b77ce:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b77d2:	bd08      	pop	{r3, pc}
	return 0;
   b77d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b77dc <_ZNK6String7toFloatEv+0x20>
   b77d8:	e7fb      	b.n	b77d2 <_ZNK6String7toFloatEv+0x16>
   b77da:	bf00      	nop
   b77dc:	00000000 	.word	0x00000000

000b77e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b77e0:	4b05      	ldr	r3, [pc, #20]	; (b77f8 <_GLOBAL__sub_I_System+0x18>)
   b77e2:	2202      	movs	r2, #2
   b77e4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b77e6:	4b05      	ldr	r3, [pc, #20]	; (b77fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b77e8:	4a05      	ldr	r2, [pc, #20]	; (b7800 <_GLOBAL__sub_I_System+0x20>)
   b77ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b77ec:	2000      	movs	r0, #0
   b77ee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b77f2:	f7ff ba75 	b.w	b6ce0 <set_system_mode>
   b77f6:	bf00      	nop
   b77f8:	2003e6f8 	.word	0x2003e6f8
   b77fc:	2003e6ec 	.word	0x2003e6ec
   b7800:	ffff0000 	.word	0xffff0000

000b7804 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7804:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7806:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7808:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b780c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b780e:	2201      	movs	r2, #1
   b7810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7814:	f10d 0107 	add.w	r1, sp, #7
   b7818:	47a0      	blx	r4
}
   b781a:	b002      	add	sp, #8
   b781c:	bd10      	pop	{r4, pc}

000b781e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b781e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7820:	6803      	ldr	r3, [r0, #0]
   b7822:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7828:	46a4      	mov	ip, r4
}
   b782a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b782e:	4760      	bx	ip

000b7830 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7830:	b513      	push	{r0, r1, r4, lr}
   b7832:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7834:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7836:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b783a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b783c:	f10d 0107 	add.w	r1, sp, #7
   b7840:	2201      	movs	r2, #1
   b7842:	47a0      	blx	r4
}
   b7844:	b002      	add	sp, #8
   b7846:	bd10      	pop	{r4, pc}

000b7848 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7848:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b784a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b784c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7850:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7854:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7856:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7858:	d008      	beq.n	b786c <_ZN9TCPClient4readEv+0x24>
   b785a:	6963      	ldr	r3, [r4, #20]
   b785c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7860:	1c51      	adds	r1, r2, #1
   b7862:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7866:	4413      	add	r3, r2
   b7868:	7918      	ldrb	r0, [r3, #4]
}
   b786a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b786c:	6803      	ldr	r3, [r0, #0]
   b786e:	691b      	ldr	r3, [r3, #16]
   b7870:	4798      	blx	r3
   b7872:	2800      	cmp	r0, #0
   b7874:	d1f1      	bne.n	b785a <_ZN9TCPClient4readEv+0x12>
   b7876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b787a:	e7f6      	b.n	b786a <_ZN9TCPClient4readEv+0x22>

000b787c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b787c:	4770      	bx	lr

000b787e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b787e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7880:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7882:	43c0      	mvns	r0, r0
   b7884:	0fc0      	lsrs	r0, r0, #31
   b7886:	4770      	bx	lr

000b7888 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7888:	4770      	bx	lr
	...

000b788c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b788c:	4b06      	ldr	r3, [pc, #24]	; (b78a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b788e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7890:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7892:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7896:	d005      	beq.n	b78a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7898:	4608      	mov	r0, r1
   b789a:	f000 fd59 	bl	b8350 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b789e:	2800      	cmp	r0, #0
   b78a0:	bf08      	it	eq
   b78a2:	2400      	moveq	r4, #0
      }
   b78a4:	4620      	mov	r0, r4
   b78a6:	bd10      	pop	{r4, pc}
   b78a8:	000bb008 	.word	0x000bb008

000b78ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b78ac:	b510      	push	{r4, lr}
   b78ae:	21ac      	movs	r1, #172	; 0xac
   b78b0:	4604      	mov	r4, r0
   b78b2:	f7fd f942 	bl	b4b3a <_ZdlPvj>
   b78b6:	4620      	mov	r0, r4
   b78b8:	bd10      	pop	{r4, pc}

000b78ba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b78ba:	21ac      	movs	r1, #172	; 0xac
   b78bc:	f7fd b93d 	b.w	b4b3a <_ZdlPvj>

000b78c0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b78c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b78c4:	f04f 0800 	mov.w	r8, #0
   b78c8:	b086      	sub	sp, #24
   b78ca:	461c      	mov	r4, r3
   b78cc:	f8c0 8004 	str.w	r8, [r0, #4]
   b78d0:	4605      	mov	r5, r0
   b78d2:	460e      	mov	r6, r1
   b78d4:	4617      	mov	r7, r2
    struct timeval tv = {};
   b78d6:	4641      	mov	r1, r8
   b78d8:	2210      	movs	r2, #16
   b78da:	a802      	add	r0, sp, #8
   b78dc:	f000 fe61 	bl	b85a2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b78e0:	1c63      	adds	r3, r4, #1
   b78e2:	d009      	beq.n	b78f8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b78e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b78e8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b78ec:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b78f0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b78f4:	435c      	muls	r4, r3
   b78f6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b78f8:	6968      	ldr	r0, [r5, #20]
   b78fa:	2310      	movs	r3, #16
   b78fc:	9300      	str	r3, [sp, #0]
   b78fe:	6800      	ldr	r0, [r0, #0]
   b7900:	ab02      	add	r3, sp, #8
   b7902:	f241 0205 	movw	r2, #4101	; 0x1005
   b7906:	f640 71ff 	movw	r1, #4095	; 0xfff
   b790a:	f7ff f8f1 	bl	b6af0 <sock_setsockopt>
    if (ret < 0) {
   b790e:	2800      	cmp	r0, #0
   b7910:	da07      	bge.n	b7922 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7912:	f7ff faa1 	bl	b6e58 <__errno>
   b7916:	6803      	ldr	r3, [r0, #0]
   b7918:	606b      	str	r3, [r5, #4]
        return 0;
   b791a:	2000      	movs	r0, #0
}
   b791c:	b006      	add	sp, #24
   b791e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7922:	6968      	ldr	r0, [r5, #20]
   b7924:	2300      	movs	r3, #0
   b7926:	6800      	ldr	r0, [r0, #0]
   b7928:	463a      	mov	r2, r7
   b792a:	4631      	mov	r1, r6
   b792c:	f7ff f900 	bl	b6b30 <sock_send>
    if (ret < 0) {
   b7930:	1e03      	subs	r3, r0, #0
   b7932:	dbee      	blt.n	b7912 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7934:	4618      	mov	r0, r3
   b7936:	e7f1      	b.n	b791c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7938 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7938:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b793a:	6984      	ldr	r4, [r0, #24]
   b793c:	4b0a      	ldr	r3, [pc, #40]	; (b7968 <_ZN9TCPClientD1Ev+0x30>)
   b793e:	6003      	str	r3, [r0, #0]
   b7940:	4605      	mov	r5, r0
   b7942:	b17c      	cbz	r4, b7964 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7944:	6863      	ldr	r3, [r4, #4]
   b7946:	3b01      	subs	r3, #1
   b7948:	6063      	str	r3, [r4, #4]
   b794a:	b95b      	cbnz	r3, b7964 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b794c:	6823      	ldr	r3, [r4, #0]
   b794e:	4620      	mov	r0, r4
   b7950:	689b      	ldr	r3, [r3, #8]
   b7952:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7954:	68a3      	ldr	r3, [r4, #8]
   b7956:	3b01      	subs	r3, #1
   b7958:	60a3      	str	r3, [r4, #8]
   b795a:	b91b      	cbnz	r3, b7964 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b795c:	6823      	ldr	r3, [r4, #0]
   b795e:	4620      	mov	r0, r4
   b7960:	68db      	ldr	r3, [r3, #12]
   b7962:	4798      	blx	r3
   b7964:	4628      	mov	r0, r5
   b7966:	bd38      	pop	{r3, r4, r5, pc}
   b7968:	000bb11c 	.word	0x000bb11c

000b796c <_ZN9TCPClientD0Ev>:
   b796c:	b510      	push	{r4, lr}
   b796e:	4604      	mov	r4, r0
   b7970:	f7ff ffe2 	bl	b7938 <_ZN9TCPClientD1Ev>
   b7974:	4620      	mov	r0, r4
   b7976:	211c      	movs	r1, #28
   b7978:	f7fd f8df 	bl	b4b3a <_ZdlPvj>
   b797c:	4620      	mov	r0, r4
   b797e:	bd10      	pop	{r4, pc}

000b7980 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7980:	b530      	push	{r4, r5, lr}
   b7982:	b087      	sub	sp, #28
   b7984:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7986:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7988:	4668      	mov	r0, sp
   b798a:	f7ff fba7 	bl	b70dc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b798e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7990:	3404      	adds	r4, #4
   b7992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7994:	682b      	ldr	r3, [r5, #0]
   b7996:	7023      	strb	r3, [r4, #0]
    }
   b7998:	b007      	add	sp, #28
   b799a:	bd30      	pop	{r4, r5, pc}

000b799c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b799c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b799e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b79a0:	4b05      	ldr	r3, [pc, #20]	; (b79b8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b79a2:	4604      	mov	r4, r0
   b79a4:	358c      	adds	r5, #140	; 0x8c
   b79a6:	f844 3b04 	str.w	r3, [r4], #4
   b79aa:	4606      	mov	r6, r0
   b79ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79b0:	682b      	ldr	r3, [r5, #0]
   b79b2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b79b4:	4630      	mov	r0, r6
   b79b6:	bd70      	pop	{r4, r5, r6, pc}
   b79b8:	000bb07c 	.word	0x000bb07c

000b79bc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b79bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b79c0:	4698      	mov	r8, r3
    stop();
   b79c2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b79c4:	b093      	sub	sp, #76	; 0x4c
   b79c6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b79c8:	2400      	movs	r4, #0
    stop();
   b79ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b79cc:	4606      	mov	r6, r0
   b79ce:	4617      	mov	r7, r2
    stop();
   b79d0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b79d2:	4628      	mov	r0, r5
   b79d4:	466b      	mov	r3, sp
   b79d6:	4622      	mov	r2, r4
   b79d8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b79da:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b79dc:	f7ff f880 	bl	b6ae0 <netdb_getaddrinfo>
   b79e0:	4605      	mov	r5, r0
   b79e2:	2800      	cmp	r0, #0
   b79e4:	d163      	bne.n	b7aae <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b79e6:	9b00      	ldr	r3, [sp, #0]
   b79e8:	2b00      	cmp	r3, #0
   b79ea:	d04b      	beq.n	b7a84 <_ZN9TCPClient7connectEPKctm+0xc8>
   b79ec:	695b      	ldr	r3, [r3, #20]
   b79ee:	2b00      	cmp	r3, #0
   b79f0:	d048      	beq.n	b7a84 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b79f2:	a806      	add	r0, sp, #24
   b79f4:	f7ff fb2e 	bl	b7054 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b79f8:	9b00      	ldr	r3, [sp, #0]
   b79fa:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b79fc:	7863      	ldrb	r3, [r4, #1]
   b79fe:	2b02      	cmp	r3, #2
   b7a00:	d104      	bne.n	b7a0c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7a02:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7a04:	a806      	add	r0, sp, #24
   b7a06:	f7ff ffbb 	bl	b7980 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7a0a:	e026      	b.n	b7a5a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7a0c:	2b0a      	cmp	r3, #10
   b7a0e:	d124      	bne.n	b7a5a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7a10:	2211      	movs	r2, #17
   b7a12:	4629      	mov	r1, r5
   b7a14:	a801      	add	r0, sp, #4
   b7a16:	f000 fdc4 	bl	b85a2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7a1a:	68a3      	ldr	r3, [r4, #8]
   b7a1c:	2b00      	cmp	r3, #0
   b7a1e:	d038      	beq.n	b7a92 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a20:	f104 0308 	add.w	r3, r4, #8
   b7a24:	f10d 0c04 	add.w	ip, sp, #4
   b7a28:	3418      	adds	r4, #24
   b7a2a:	6818      	ldr	r0, [r3, #0]
   b7a2c:	6859      	ldr	r1, [r3, #4]
   b7a2e:	4662      	mov	r2, ip
   b7a30:	c203      	stmia	r2!, {r0, r1}
   b7a32:	3308      	adds	r3, #8
   b7a34:	42a3      	cmp	r3, r4
   b7a36:	4694      	mov	ip, r2
   b7a38:	d1f7      	bne.n	b7a2a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7a3a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7a3c:	a901      	add	r1, sp, #4
   b7a3e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7a40:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7a44:	f7ff fb14 	bl	b7070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7a48:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7a4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7a50:	ac07      	add	r4, sp, #28
   b7a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a54:	f8dc 3000 	ldr.w	r3, [ip]
   b7a58:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7a5a:	a806      	add	r0, sp, #24
   b7a5c:	f7ff fb1a 	bl	b7094 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7a60:	b180      	cbz	r0, b7a84 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7a62:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7a64:	ad07      	add	r5, sp, #28
   b7a66:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7a6a:	4b12      	ldr	r3, [pc, #72]	; (b7ab4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7a6c:	930c      	str	r3, [sp, #48]	; 0x30
   b7a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a70:	ac0d      	add	r4, sp, #52	; 0x34
   b7a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a74:	682b      	ldr	r3, [r5, #0]
   b7a76:	7023      	strb	r3, [r4, #0]
   b7a78:	463a      	mov	r2, r7
   b7a7a:	4643      	mov	r3, r8
   b7a7c:	a90c      	add	r1, sp, #48	; 0x30
   b7a7e:	4630      	mov	r0, r6
   b7a80:	47c8      	blx	r9
   b7a82:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7a84:	9800      	ldr	r0, [sp, #0]
   b7a86:	f7ff f823 	bl	b6ad0 <netdb_freeaddrinfo>
}
   b7a8a:	4628      	mov	r0, r5
   b7a8c:	b013      	add	sp, #76	; 0x4c
   b7a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7a92:	68e3      	ldr	r3, [r4, #12]
   b7a94:	2b00      	cmp	r3, #0
   b7a96:	d1c3      	bne.n	b7a20 <_ZN9TCPClient7connectEPKctm+0x64>
   b7a98:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7a9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7aa0:	f7ff f806 	bl	b6ab0 <inet_htonl>
   b7aa4:	4581      	cmp	r9, r0
   b7aa6:	d1bb      	bne.n	b7a20 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7aa8:	f104 0114 	add.w	r1, r4, #20
   b7aac:	e7aa      	b.n	b7a04 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7aae:	4625      	mov	r5, r4
   b7ab0:	e7e8      	b.n	b7a84 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7ab2:	bf00      	nop
   b7ab4:	000bb07c 	.word	0x000bb07c

000b7ab8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7ab8:	b538      	push	{r3, r4, r5, lr}
   b7aba:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7abc:	681a      	ldr	r2, [r3, #0]
   b7abe:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7ac0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7ac2:	da10      	bge.n	b7ae6 <_ZN9TCPClient9connectedEv+0x2e>
   b7ac4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ac8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7acc:	429a      	cmp	r2, r3
   b7ace:	d10a      	bne.n	b7ae6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7ad0:	6803      	ldr	r3, [r0, #0]
   b7ad2:	691b      	ldr	r3, [r3, #16]
   b7ad4:	4798      	blx	r3
        if (!rv) {
   b7ad6:	4604      	mov	r4, r0
   b7ad8:	b928      	cbnz	r0, b7ae6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7ada:	682b      	ldr	r3, [r5, #0]
   b7adc:	4628      	mov	r0, r5
   b7ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7ae0:	4798      	blx	r3
        rv = available();
   b7ae2:	4620      	mov	r0, r4
}
   b7ae4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7ae6:	2001      	movs	r0, #1
   b7ae8:	e7fc      	b.n	b7ae4 <_ZN9TCPClient9connectedEv+0x2c>

000b7aea <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7aea:	b510      	push	{r4, lr}
   b7aec:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7aee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7af2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7af6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7af8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7afa:	d005      	beq.n	b7b08 <_ZN9TCPClient4peekEv+0x1e>
   b7afc:	6963      	ldr	r3, [r4, #20]
   b7afe:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7b02:	4413      	add	r3, r2
   b7b04:	7918      	ldrb	r0, [r3, #4]
}
   b7b06:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7b08:	6803      	ldr	r3, [r0, #0]
   b7b0a:	691b      	ldr	r3, [r3, #16]
   b7b0c:	4798      	blx	r3
   b7b0e:	2800      	cmp	r0, #0
   b7b10:	d1f4      	bne.n	b7afc <_ZN9TCPClient4peekEv+0x12>
   b7b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7b16:	e7f6      	b.n	b7b06 <_ZN9TCPClient4peekEv+0x1c>

000b7b18 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b1a:	6943      	ldr	r3, [r0, #20]
   b7b1c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7b1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b26:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7b28:	4605      	mov	r5, r0
   b7b2a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7b2c:	d016      	beq.n	b7b5c <_ZN9TCPClient4readEPhj+0x44>
   b7b2e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7b30:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7b34:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7b38:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7b3a:	42bc      	cmp	r4, r7
   b7b3c:	bf28      	it	cs
   b7b3e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7b40:	3304      	adds	r3, #4
   b7b42:	4622      	mov	r2, r4
   b7b44:	4419      	add	r1, r3
   b7b46:	4630      	mov	r0, r6
   b7b48:	f000 fd1d 	bl	b8586 <memcpy>
   b7b4c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7b4e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7b52:	4423      	add	r3, r4
   b7b54:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7b58:	4620      	mov	r0, r4
   b7b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7b5c:	6803      	ldr	r3, [r0, #0]
   b7b5e:	691b      	ldr	r3, [r3, #16]
   b7b60:	4798      	blx	r3
   b7b62:	2800      	cmp	r0, #0
   b7b64:	d1e3      	bne.n	b7b2e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7b66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7b6a:	e7f5      	b.n	b7b58 <_ZN9TCPClient4readEPhj+0x40>

000b7b6c <_ZN9TCPClient12flush_bufferEv>:
   b7b6c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7b6e:	2300      	movs	r3, #0
   b7b70:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7b74:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7b76:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7b7a:	4770      	bx	lr

000b7b7c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b80:	461f      	mov	r7, r3
    stop();
   b7b82:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7b84:	460c      	mov	r4, r1
    stop();
   b7b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7b88:	b08a      	sub	sp, #40	; 0x28
   b7b8a:	4605      	mov	r5, r0
   b7b8c:	4616      	mov	r6, r2
    stop();
   b7b8e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7b90:	7d23      	ldrb	r3, [r4, #20]
   b7b92:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7b96:	2b04      	cmp	r3, #4
   b7b98:	bf0c      	ite	eq
   b7b9a:	2002      	moveq	r0, #2
   b7b9c:	200a      	movne	r0, #10
   b7b9e:	2206      	movs	r2, #6
   b7ba0:	2101      	movs	r1, #1
   b7ba2:	f7fe ffcd 	bl	b6b40 <sock_socket>
   b7ba6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7baa:	696b      	ldr	r3, [r5, #20]
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	2b00      	cmp	r3, #0
   b7bb0:	da08      	bge.n	b7bc4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7bb2:	682b      	ldr	r3, [r5, #0]
   b7bb4:	4628      	mov	r0, r5
   b7bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7bb8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7bba:	4798      	blx	r3
}
   b7bbc:	4620      	mov	r0, r4
   b7bbe:	b00a      	add	sp, #40	; 0x28
   b7bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7bc4:	4628      	mov	r0, r5
   b7bc6:	f7ff ffd1 	bl	b7b6c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7bca:	b1b7      	cbz	r7, b7bfa <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7bcc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7bce:	a903      	add	r1, sp, #12
   b7bd0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7bd2:	9303      	str	r3, [sp, #12]
   b7bd4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7bd8:	f7fe ff5a 	bl	b6a90 <if_index_to_name>
   b7bdc:	2800      	cmp	r0, #0
   b7bde:	d1e8      	bne.n	b7bb2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7be0:	6968      	ldr	r0, [r5, #20]
   b7be2:	2306      	movs	r3, #6
   b7be4:	9300      	str	r3, [sp, #0]
   b7be6:	6800      	ldr	r0, [r0, #0]
   b7be8:	ab03      	add	r3, sp, #12
   b7bea:	f241 020b 	movw	r2, #4107	; 0x100b
   b7bee:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7bf2:	f7fe ff7d 	bl	b6af0 <sock_setsockopt>
   b7bf6:	2800      	cmp	r0, #0
   b7bf8:	d1db      	bne.n	b7bb2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7bfa:	221c      	movs	r2, #28
   b7bfc:	2100      	movs	r1, #0
   b7bfe:	a803      	add	r0, sp, #12
   b7c00:	f000 fccf 	bl	b85a2 <memset>
    if (ip.version() == 4) {
   b7c04:	7d23      	ldrb	r3, [r4, #20]
   b7c06:	2b04      	cmp	r3, #4
   b7c08:	d11d      	bne.n	b7c46 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7c0a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7c0e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7c10:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7c14:	f7fe ff54 	bl	b6ac0 <inet_htons>
   b7c18:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7c1c:	6860      	ldr	r0, [r4, #4]
   b7c1e:	f7fe ff47 	bl	b6ab0 <inet_htonl>
   b7c22:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7c24:	696b      	ldr	r3, [r5, #20]
   b7c26:	221c      	movs	r2, #28
   b7c28:	6818      	ldr	r0, [r3, #0]
   b7c2a:	a903      	add	r1, sp, #12
   b7c2c:	f7fe ff70 	bl	b6b10 <sock_connect>
   b7c30:	2800      	cmp	r0, #0
   b7c32:	d1be      	bne.n	b7bb2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7c34:	3404      	adds	r4, #4
   b7c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7c38:	696d      	ldr	r5, [r5, #20]
   b7c3a:	358c      	adds	r5, #140	; 0x8c
   b7c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7c3e:	6823      	ldr	r3, [r4, #0]
   b7c40:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7c42:	2401      	movs	r4, #1
   b7c44:	e7ba      	b.n	b7bbc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7c46:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7c4a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7c4c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7c50:	f7fe ff36 	bl	b6ac0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7c54:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7c56:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7c5a:	1d23      	adds	r3, r4, #4
   b7c5c:	f104 0714 	add.w	r7, r4, #20
   b7c60:	6818      	ldr	r0, [r3, #0]
   b7c62:	6859      	ldr	r1, [r3, #4]
   b7c64:	4632      	mov	r2, r6
   b7c66:	c203      	stmia	r2!, {r0, r1}
   b7c68:	3308      	adds	r3, #8
   b7c6a:	42bb      	cmp	r3, r7
   b7c6c:	4616      	mov	r6, r2
   b7c6e:	d1f7      	bne.n	b7c60 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7c70:	e7d8      	b.n	b7c24 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7c74 <_ZN9TCPClient9availableEv>:
{
   b7c74:	b530      	push	{r4, r5, lr}
   b7c76:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7c78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7c7c:	b08b      	sub	sp, #44	; 0x2c
   b7c7e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7c80:	b12b      	cbz	r3, b7c8e <_ZN9TCPClient9availableEv+0x1a>
   b7c82:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7c86:	429a      	cmp	r2, r3
   b7c88:	d101      	bne.n	b7c8e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7c8a:	f7ff ff6f 	bl	b7b6c <_ZN9TCPClient12flush_bufferEv>
   b7c8e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7c90:	6808      	ldr	r0, [r1, #0]
   b7c92:	2800      	cmp	r0, #0
   b7c94:	db18      	blt.n	b7cc8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7c96:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7c9a:	2d7f      	cmp	r5, #127	; 0x7f
   b7c9c:	d814      	bhi.n	b7cc8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7c9e:	3104      	adds	r1, #4
   b7ca0:	2308      	movs	r3, #8
   b7ca2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7ca6:	4429      	add	r1, r5
   b7ca8:	f7fe ff3a 	bl	b6b20 <sock_recv>
            if (ret > 0) {
   b7cac:	2800      	cmp	r0, #0
   b7cae:	dd13      	ble.n	b7cd8 <_ZN9TCPClient9availableEv+0x64>
   b7cb0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7cb2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7cb6:	b90a      	cbnz	r2, b7cbc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7cb8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7cbc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7cbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7cc2:	4410      	add	r0, r2
   b7cc4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7cc8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7cca:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7cce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7cd2:	1ac0      	subs	r0, r0, r3
   b7cd4:	b00b      	add	sp, #44	; 0x2c
   b7cd6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7cd8:	f7ff f8be 	bl	b6e58 <__errno>
   b7cdc:	6803      	ldr	r3, [r0, #0]
   b7cde:	2b0b      	cmp	r3, #11
   b7ce0:	d0f2      	beq.n	b7cc8 <_ZN9TCPClient9availableEv+0x54>
   b7ce2:	f7ff f8b9 	bl	b6e58 <__errno>
   b7ce6:	6803      	ldr	r3, [r0, #0]
   b7ce8:	2b0b      	cmp	r3, #11
   b7cea:	d0ed      	beq.n	b7cc8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7cec:	2320      	movs	r3, #32
   b7cee:	2500      	movs	r5, #0
   b7cf0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7cf4:	f7ff f8b0 	bl	b6e58 <__errno>
   b7cf8:	6803      	ldr	r3, [r0, #0]
   b7cfa:	9301      	str	r3, [sp, #4]
   b7cfc:	4b08      	ldr	r3, [pc, #32]	; (b7d20 <_ZN9TCPClient9availableEv+0xac>)
   b7cfe:	4909      	ldr	r1, [pc, #36]	; (b7d24 <_ZN9TCPClient9availableEv+0xb0>)
   b7d00:	9300      	str	r3, [sp, #0]
   b7d02:	aa02      	add	r2, sp, #8
   b7d04:	462b      	mov	r3, r5
   b7d06:	2032      	movs	r0, #50	; 0x32
   b7d08:	f7fe ffe2 	bl	b6cd0 <log_message>
                    sock_close(d_->sock);
   b7d0c:	6963      	ldr	r3, [r4, #20]
   b7d0e:	6818      	ldr	r0, [r3, #0]
   b7d10:	f7fe fef6 	bl	b6b00 <sock_close>
   b7d14:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7d1a:	601a      	str	r2, [r3, #0]
   b7d1c:	e7d4      	b.n	b7cc8 <_ZN9TCPClient9availableEv+0x54>
   b7d1e:	bf00      	nop
   b7d20:	000bb0e5 	.word	0x000bb0e5
   b7d24:	000bb0de 	.word	0x000bb0de

000b7d28 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7d28:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7d2a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7d2c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7d2e:	6818      	ldr	r0, [r3, #0]
   b7d30:	2800      	cmp	r0, #0
   b7d32:	db01      	blt.n	b7d38 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7d34:	f7fe fee4 	bl	b6b00 <sock_close>
   b7d38:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7d3e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7d40:	6960      	ldr	r0, [r4, #20]
   b7d42:	2211      	movs	r2, #17
   b7d44:	2100      	movs	r1, #0
   b7d46:	308c      	adds	r0, #140	; 0x8c
   b7d48:	f000 fc2b 	bl	b85a2 <memset>
    flush_buffer();
   b7d4c:	4620      	mov	r0, r4
}
   b7d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7d52:	f7ff bf0b 	b.w	b7b6c <_ZN9TCPClient12flush_bufferEv>

000b7d56 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7d56:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7d58:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7d5a:	4604      	mov	r4, r0
          total(0) {
   b7d5c:	6001      	str	r1, [r0, #0]
   b7d5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7d62:	3088      	adds	r0, #136	; 0x88
   b7d64:	f7ff f976 	bl	b7054 <_ZN9IPAddressC1Ev>
}
   b7d68:	4620      	mov	r0, r4
   b7d6a:	bd10      	pop	{r4, pc}

000b7d6c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7d6e:	2300      	movs	r3, #0
   b7d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7d74:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7d78:	4a0e      	ldr	r2, [pc, #56]	; (b7db4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7d7a:	6103      	str	r3, [r0, #16]
   b7d7c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d7e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7d80:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7d82:	20ac      	movs	r0, #172	; 0xac
   b7d84:	9101      	str	r1, [sp, #4]
   b7d86:	f7fc fed2 	bl	b4b2e <_Znwj>
	  auto __pi = ::new (__mem)
   b7d8a:	1e05      	subs	r5, r0, #0
   b7d8c:	f105 060c 	add.w	r6, r5, #12
   b7d90:	d008      	beq.n	b7da4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7d92:	2301      	movs	r3, #1
   b7d94:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7d98:	4b07      	ldr	r3, [pc, #28]	; (b7db8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7d9a:	9901      	ldr	r1, [sp, #4]
   b7d9c:	602b      	str	r3, [r5, #0]
   b7d9e:	4630      	mov	r0, r6
   b7da0:	f7ff ffd9 	bl	b7d56 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7da4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7da6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7daa:	f7ff fedf 	bl	b7b6c <_ZN9TCPClient12flush_bufferEv>
}
   b7dae:	b002      	add	sp, #8
   b7db0:	bd70      	pop	{r4, r5, r6, pc}
   b7db2:	bf00      	nop
   b7db4:	000bb11c 	.word	0x000bb11c
   b7db8:	000bb100 	.word	0x000bb100

000b7dbc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7dbc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7dc2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7dc4:	f7ff ffd2 	bl	b7d6c <_ZN9TCPClientC1Ei>
}
   b7dc8:	4620      	mov	r0, r4
   b7dca:	bd10      	pop	{r4, pc}

000b7dcc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7dcc:	b510      	push	{r4, lr}
   b7dce:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7dd0:	6800      	ldr	r0, [r0, #0]
   b7dd2:	2800      	cmp	r0, #0
   b7dd4:	db01      	blt.n	b7dda <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7dd6:	f7fe fe93 	bl	b6b00 <sock_close>
    }
}
   b7dda:	4620      	mov	r0, r4
   b7ddc:	bd10      	pop	{r4, pc}

000b7dde <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7dde:	300c      	adds	r0, #12
   b7de0:	f7ff bff4 	b.w	b7dcc <_ZN9TCPClient4DataD1Ev>

000b7de4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7de4:	4b02      	ldr	r3, [pc, #8]	; (b7df0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7de6:	681a      	ldr	r2, [r3, #0]
   b7de8:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7dea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7dec:	4770      	bx	lr
   b7dee:	bf00      	nop
   b7df0:	2003e3dc 	.word	0x2003e3dc
   b7df4:	2003e6fc 	.word	0x2003e6fc

000b7df8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7df8:	4770      	bx	lr

000b7dfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7dfa:	7441      	strb	r1, [r0, #17]
}
   b7dfc:	4770      	bx	lr

000b7dfe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7dfe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7e00:	7c00      	ldrb	r0, [r0, #16]
   b7e02:	f7fe ff15 	bl	b6c30 <hal_usart_available_data_for_write>
}
   b7e06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e0a:	bd08      	pop	{r3, pc}

000b7e0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7e0c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7e0e:	7c00      	ldrb	r0, [r0, #16]
   b7e10:	f7fe fee6 	bl	b6be0 <hal_usart_available>
}
   b7e14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e18:	bd08      	pop	{r3, pc}

000b7e1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7e1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7e1c:	7c00      	ldrb	r0, [r0, #16]
   b7e1e:	f7fe feef 	bl	b6c00 <hal_usart_peek>
}
   b7e22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e26:	bd08      	pop	{r3, pc}

000b7e28 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7e28:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7e2a:	7c00      	ldrb	r0, [r0, #16]
   b7e2c:	f7fe fee0 	bl	b6bf0 <hal_usart_read>
}
   b7e30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e34:	bd08      	pop	{r3, pc}

000b7e36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7e36:	7c00      	ldrb	r0, [r0, #16]
   b7e38:	f7fe beea 	b.w	b6c10 <hal_usart_flush>

000b7e3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e3e:	7c45      	ldrb	r5, [r0, #17]
{
   b7e40:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e42:	b12d      	cbz	r5, b7e50 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7e44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7e46:	b003      	add	sp, #12
   b7e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7e4c:	f7fe bec0 	b.w	b6bd0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e50:	7c00      	ldrb	r0, [r0, #16]
   b7e52:	9101      	str	r1, [sp, #4]
   b7e54:	f7fe feec 	bl	b6c30 <hal_usart_available_data_for_write>
   b7e58:	2800      	cmp	r0, #0
   b7e5a:	9901      	ldr	r1, [sp, #4]
   b7e5c:	dcf2      	bgt.n	b7e44 <_ZN11USARTSerial5writeEh+0x8>
}
   b7e5e:	4628      	mov	r0, r5
   b7e60:	b003      	add	sp, #12
   b7e62:	bd30      	pop	{r4, r5, pc}

000b7e64 <_ZN11USARTSerialD0Ev>:
   b7e64:	b510      	push	{r4, lr}
   b7e66:	2114      	movs	r1, #20
   b7e68:	4604      	mov	r4, r0
   b7e6a:	f7fc fe66 	bl	b4b3a <_ZdlPvj>
   b7e6e:	4620      	mov	r0, r4
   b7e70:	bd10      	pop	{r4, pc}
	...

000b7e74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7e74:	b510      	push	{r4, lr}
   b7e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e7a:	4604      	mov	r4, r0
   b7e7c:	4608      	mov	r0, r1
   b7e7e:	4611      	mov	r1, r2
   b7e80:	2200      	movs	r2, #0
   b7e82:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7e86:	4b04      	ldr	r3, [pc, #16]	; (b7e98 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7e88:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7e8a:	2301      	movs	r3, #1
  _serial = serial;
   b7e8c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7e8e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7e90:	f7fe fed6 	bl	b6c40 <hal_usart_init_ex>
}
   b7e94:	4620      	mov	r0, r4
   b7e96:	bd10      	pop	{r4, pc}
   b7e98:	000bb184 	.word	0x000bb184

000b7e9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e9c:	7441      	strb	r1, [r0, #17]
}
   b7e9e:	4770      	bx	lr

000b7ea0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ea0:	4770      	bx	lr

000b7ea2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7ea2:	4770      	bx	lr

000b7ea4 <_ZN9USBSerial4readEv>:
{
   b7ea4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7ea6:	2100      	movs	r1, #0
   b7ea8:	7c00      	ldrb	r0, [r0, #16]
   b7eaa:	f7fe fef1 	bl	b6c90 <HAL_USB_USART_Receive_Data>
}
   b7eae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7eb2:	bd08      	pop	{r3, pc}

000b7eb4 <_ZN9USBSerial4peekEv>:
{
   b7eb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7eb6:	2101      	movs	r1, #1
   b7eb8:	7c00      	ldrb	r0, [r0, #16]
   b7eba:	f7fe fee9 	bl	b6c90 <HAL_USB_USART_Receive_Data>
}
   b7ebe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ec2:	bd08      	pop	{r3, pc}

000b7ec4 <_ZN9USBSerial17availableForWriteEv>:
{
   b7ec4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7ec6:	7c00      	ldrb	r0, [r0, #16]
   b7ec8:	f7fe feda 	bl	b6c80 <HAL_USB_USART_Available_Data_For_Write>
}
   b7ecc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ed0:	bd08      	pop	{r3, pc}

000b7ed2 <_ZN9USBSerial9availableEv>:
{
   b7ed2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7ed4:	7c00      	ldrb	r0, [r0, #16]
   b7ed6:	f7fe fecb 	bl	b6c70 <HAL_USB_USART_Available_Data>
}
   b7eda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ede:	bd08      	pop	{r3, pc}

000b7ee0 <_ZN9USBSerial5writeEh>:
{
   b7ee0:	b513      	push	{r0, r1, r4, lr}
   b7ee2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ee4:	7c00      	ldrb	r0, [r0, #16]
{
   b7ee6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ee8:	f7fe feca 	bl	b6c80 <HAL_USB_USART_Available_Data_For_Write>
   b7eec:	2800      	cmp	r0, #0
   b7eee:	9901      	ldr	r1, [sp, #4]
   b7ef0:	dc01      	bgt.n	b7ef6 <_ZN9USBSerial5writeEh+0x16>
   b7ef2:	7c60      	ldrb	r0, [r4, #17]
   b7ef4:	b120      	cbz	r0, b7f00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7ef6:	7c20      	ldrb	r0, [r4, #16]
   b7ef8:	f7fe fed2 	bl	b6ca0 <HAL_USB_USART_Send_Data>
   b7efc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7f00:	b002      	add	sp, #8
   b7f02:	bd10      	pop	{r4, pc}

000b7f04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7f04:	7c00      	ldrb	r0, [r0, #16]
   b7f06:	f7fe bed3 	b.w	b6cb0 <HAL_USB_USART_Flush_Data>

000b7f0a <_ZN9USBSerialD0Ev>:
   b7f0a:	b510      	push	{r4, lr}
   b7f0c:	2114      	movs	r1, #20
   b7f0e:	4604      	mov	r4, r0
   b7f10:	f7fc fe13 	bl	b4b3a <_ZdlPvj>
   b7f14:	4620      	mov	r0, r4
   b7f16:	bd10      	pop	{r4, pc}

000b7f18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7f18:	b510      	push	{r4, lr}
   b7f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f1e:	4604      	mov	r4, r0
   b7f20:	4608      	mov	r0, r1
   b7f22:	2100      	movs	r1, #0
   b7f24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7f28:	4b04      	ldr	r3, [pc, #16]	; (b7f3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7f2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7f2c:	2301      	movs	r3, #1
  _serial = serial;
   b7f2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7f30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7f32:	4611      	mov	r1, r2
   b7f34:	f7fe fe8c 	bl	b6c50 <HAL_USB_USART_Init>
}
   b7f38:	4620      	mov	r0, r4
   b7f3a:	bd10      	pop	{r4, pc}
   b7f3c:	000bb1b4 	.word	0x000bb1b4

000b7f40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7f40:	7c00      	ldrb	r0, [r0, #16]
   b7f42:	2200      	movs	r2, #0
   b7f44:	f7fe be8c 	b.w	b6c60 <HAL_USB_USART_Begin>

000b7f48 <_Z19acquireSerialBufferv>:
{
   b7f48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7f4a:	2214      	movs	r2, #20
{
   b7f4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7f4e:	2100      	movs	r1, #0
   b7f50:	f000 fb27 	bl	b85a2 <memset>
}
   b7f54:	4620      	mov	r0, r4
   b7f56:	bd10      	pop	{r4, pc}

000b7f58 <_Z16_fetch_usbserialv>:
{
   b7f58:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7f5a:	4c0f      	ldr	r4, [pc, #60]	; (b7f98 <_Z16_fetch_usbserialv+0x40>)
{
   b7f5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7f5e:	a803      	add	r0, sp, #12
   b7f60:	f7ff fff2 	bl	b7f48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7f64:	7821      	ldrb	r1, [r4, #0]
   b7f66:	f3bf 8f5b 	dmb	ish
   b7f6a:	f011 0101 	ands.w	r1, r1, #1
   b7f6e:	d10f      	bne.n	b7f90 <_Z16_fetch_usbserialv+0x38>
   b7f70:	4620      	mov	r0, r4
   b7f72:	9101      	str	r1, [sp, #4]
   b7f74:	f7fc fdf0 	bl	b4b58 <__cxa_guard_acquire>
   b7f78:	9901      	ldr	r1, [sp, #4]
   b7f7a:	b148      	cbz	r0, b7f90 <_Z16_fetch_usbserialv+0x38>
   b7f7c:	aa03      	add	r2, sp, #12
   b7f7e:	4807      	ldr	r0, [pc, #28]	; (b7f9c <_Z16_fetch_usbserialv+0x44>)
   b7f80:	f7ff ffca 	bl	b7f18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7f84:	4620      	mov	r0, r4
   b7f86:	f7fc fdec 	bl	b4b62 <__cxa_guard_release>
   b7f8a:	4805      	ldr	r0, [pc, #20]	; (b7fa0 <_Z16_fetch_usbserialv+0x48>)
   b7f8c:	f000 faf2 	bl	b8574 <atexit>
	return _usbserial;
}
   b7f90:	4802      	ldr	r0, [pc, #8]	; (b7f9c <_Z16_fetch_usbserialv+0x44>)
   b7f92:	b008      	add	sp, #32
   b7f94:	bd10      	pop	{r4, pc}
   b7f96:	bf00      	nop
   b7f98:	2003e700 	.word	0x2003e700
   b7f9c:	2003e704 	.word	0x2003e704
   b7fa0:	000b7ea1 	.word	0x000b7ea1

000b7fa4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7fa4:	2200      	movs	r2, #0
   b7fa6:	6840      	ldr	r0, [r0, #4]
   b7fa8:	4611      	mov	r1, r2
   b7faa:	f7fe bee5 	b.w	b6d78 <network_ready>

000b7fae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7fae:	2200      	movs	r2, #0
   b7fb0:	6840      	ldr	r0, [r0, #4]
   b7fb2:	4611      	mov	r1, r2
   b7fb4:	f7fe bf00 	b.w	b6db8 <network_listening>

000b7fb8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7fb8:	2200      	movs	r2, #0
   b7fba:	6840      	ldr	r0, [r0, #4]
   b7fbc:	4611      	mov	r1, r2
   b7fbe:	f7fe bf0b 	b.w	b6dd8 <network_get_listen_timeout>

000b7fc2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7fc2:	6840      	ldr	r0, [r0, #4]
   b7fc4:	2200      	movs	r2, #0
   b7fc6:	f7fe beff 	b.w	b6dc8 <network_set_listen_timeout>

000b7fca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7fca:	6840      	ldr	r0, [r0, #4]
   b7fcc:	2200      	movs	r2, #0
   b7fce:	f081 0101 	eor.w	r1, r1, #1
   b7fd2:	f7fe bee9 	b.w	b6da8 <network_listen>

000b7fd6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7fd6:	2300      	movs	r3, #0
   b7fd8:	6840      	ldr	r0, [r0, #4]
   b7fda:	461a      	mov	r2, r3
   b7fdc:	4619      	mov	r1, r3
   b7fde:	f7fe bedb 	b.w	b6d98 <network_off>

000b7fe2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7fe2:	2300      	movs	r3, #0
   b7fe4:	6840      	ldr	r0, [r0, #4]
   b7fe6:	461a      	mov	r2, r3
   b7fe8:	4619      	mov	r1, r3
   b7fea:	f7fe becd 	b.w	b6d88 <network_on>

000b7fee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7fee:	2200      	movs	r2, #0
   b7ff0:	6840      	ldr	r0, [r0, #4]
   b7ff2:	4611      	mov	r1, r2
   b7ff4:	f7fe beb0 	b.w	b6d58 <network_connecting>

000b7ff8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7ff8:	6840      	ldr	r0, [r0, #4]
   b7ffa:	2200      	movs	r2, #0
   b7ffc:	2102      	movs	r1, #2
   b7ffe:	f7fe beb3 	b.w	b6d68 <network_disconnect>

000b8002 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8002:	2300      	movs	r3, #0
   b8004:	6840      	ldr	r0, [r0, #4]
   b8006:	461a      	mov	r2, r3
   b8008:	f7fe be9e 	b.w	b6d48 <network_connect>

000b800c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b800c:	4b02      	ldr	r3, [pc, #8]	; (b8018 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b800e:	2204      	movs	r2, #4
   b8010:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8012:	4a02      	ldr	r2, [pc, #8]	; (b801c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8014:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8016:	4770      	bx	lr
   b8018:	2003e718 	.word	0x2003e718
   b801c:	000bb1e4 	.word	0x000bb1e4

000b8020 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8020:	4b01      	ldr	r3, [pc, #4]	; (b8028 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8022:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8024:	4770      	bx	lr
   b8026:	bf00      	nop
   b8028:	2003e3e0 	.word	0x2003e3e0

000b802c <serialEventRun>:
{
   b802c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b802e:	4b0b      	ldr	r3, [pc, #44]	; (b805c <serialEventRun+0x30>)
   b8030:	b143      	cbz	r3, b8044 <serialEventRun+0x18>
   b8032:	f7ff ff91 	bl	b7f58 <_Z16_fetch_usbserialv>
   b8036:	6803      	ldr	r3, [r0, #0]
   b8038:	691b      	ldr	r3, [r3, #16]
   b803a:	4798      	blx	r3
   b803c:	2800      	cmp	r0, #0
   b803e:	dd01      	ble.n	b8044 <serialEventRun+0x18>
        serialEvent();
   b8040:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8044:	4b06      	ldr	r3, [pc, #24]	; (b8060 <serialEventRun+0x34>)
   b8046:	b143      	cbz	r3, b805a <serialEventRun+0x2e>
   b8048:	f000 f95c 	bl	b8304 <_Z22__fetch_global_Serial1v>
   b804c:	6803      	ldr	r3, [r0, #0]
   b804e:	691b      	ldr	r3, [r3, #16]
   b8050:	4798      	blx	r3
   b8052:	2800      	cmp	r0, #0
   b8054:	dd01      	ble.n	b805a <serialEventRun+0x2e>
        serialEvent1();
   b8056:	f3af 8000 	nop.w
}
   b805a:	bd08      	pop	{r3, pc}
	...

000b8064 <_post_loop>:
{
   b8064:	b508      	push	{r3, lr}
	serialEventRun();
   b8066:	f7ff ffe1 	bl	b802c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b806a:	f7fe fc91 	bl	b6990 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b806e:	4b01      	ldr	r3, [pc, #4]	; (b8074 <_post_loop+0x10>)
   b8070:	6018      	str	r0, [r3, #0]
}
   b8072:	bd08      	pop	{r3, pc}
   b8074:	2003e728 	.word	0x2003e728

000b8078 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8078:	4805      	ldr	r0, [pc, #20]	; (b8090 <_Z33system_initialize_user_backup_ramv+0x18>)
   b807a:	4a06      	ldr	r2, [pc, #24]	; (b8094 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b807c:	4906      	ldr	r1, [pc, #24]	; (b8098 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b807e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8080:	1a12      	subs	r2, r2, r0
   b8082:	f000 fa80 	bl	b8586 <memcpy>
    __backup_sram_signature = signature;
   b8086:	4b05      	ldr	r3, [pc, #20]	; (b809c <_Z33system_initialize_user_backup_ramv+0x24>)
   b8088:	4a05      	ldr	r2, [pc, #20]	; (b80a0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b808a:	601a      	str	r2, [r3, #0]
}
   b808c:	bd08      	pop	{r3, pc}
   b808e:	bf00      	nop
   b8090:	2003f400 	.word	0x2003f400
   b8094:	2003f404 	.word	0x2003f404
   b8098:	000bb8e0 	.word	0x000bb8e0
   b809c:	2003f400 	.word	0x2003f400
   b80a0:	9a271c1e 	.word	0x9a271c1e

000b80a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b80a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b80a6:	2300      	movs	r3, #0
   b80a8:	9300      	str	r3, [sp, #0]
   b80aa:	461a      	mov	r2, r3
   b80ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b80b0:	f7fe fe30 	bl	b6d14 <system_ctrl_set_result>
}
   b80b4:	b003      	add	sp, #12
   b80b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b80bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b80bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b80be:	8843      	ldrh	r3, [r0, #2]
   b80c0:	2b0a      	cmp	r3, #10
   b80c2:	d008      	beq.n	b80d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b80c4:	2b50      	cmp	r3, #80	; 0x50
   b80c6:	d10b      	bne.n	b80e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b80c8:	4b09      	ldr	r3, [pc, #36]	; (b80f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b80ca:	681b      	ldr	r3, [r3, #0]
   b80cc:	b14b      	cbz	r3, b80e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b80ce:	b003      	add	sp, #12
   b80d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b80d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b80d6:	f7ff ffe5 	bl	b80a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b80da:	b003      	add	sp, #12
   b80dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b80e0:	2300      	movs	r3, #0
   b80e2:	9300      	str	r3, [sp, #0]
   b80e4:	461a      	mov	r2, r3
   b80e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b80ea:	f7fe fe13 	bl	b6d14 <system_ctrl_set_result>
}
   b80ee:	e7f4      	b.n	b80da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b80f0:	2003e724 	.word	0x2003e724

000b80f4 <module_user_init_hook>:
{
   b80f4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b80f6:	4812      	ldr	r0, [pc, #72]	; (b8140 <module_user_init_hook+0x4c>)
   b80f8:	2100      	movs	r1, #0
   b80fa:	f7fe febd 	bl	b6e78 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b80fe:	4b11      	ldr	r3, [pc, #68]	; (b8144 <module_user_init_hook+0x50>)
   b8100:	681a      	ldr	r2, [r3, #0]
   b8102:	4b11      	ldr	r3, [pc, #68]	; (b8148 <module_user_init_hook+0x54>)
   b8104:	429a      	cmp	r2, r3
   b8106:	4b11      	ldr	r3, [pc, #68]	; (b814c <module_user_init_hook+0x58>)
   b8108:	bf0c      	ite	eq
   b810a:	2201      	moveq	r2, #1
   b810c:	2200      	movne	r2, #0
   b810e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8110:	d001      	beq.n	b8116 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8112:	f7ff ffb1 	bl	b8078 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8116:	f7fe fc2b 	bl	b6970 <HAL_RNG_GetRandomNumber>
   b811a:	4604      	mov	r4, r0
    srand(seed);
   b811c:	f000 fa4a 	bl	b85b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8120:	4b0b      	ldr	r3, [pc, #44]	; (b8150 <module_user_init_hook+0x5c>)
   b8122:	b113      	cbz	r3, b812a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8124:	4620      	mov	r0, r4
   b8126:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b812a:	2100      	movs	r1, #0
   b812c:	4808      	ldr	r0, [pc, #32]	; (b8150 <module_user_init_hook+0x5c>)
   b812e:	f7fe fe03 	bl	b6d38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8136:	4807      	ldr	r0, [pc, #28]	; (b8154 <module_user_init_hook+0x60>)
   b8138:	2100      	movs	r1, #0
   b813a:	f7fe bde1 	b.w	b6d00 <system_ctrl_set_app_request_handler>
   b813e:	bf00      	nop
   b8140:	000b8021 	.word	0x000b8021
   b8144:	2003f400 	.word	0x2003f400
   b8148:	9a271c1e 	.word	0x9a271c1e
   b814c:	2003e720 	.word	0x2003e720
   b8150:	00000000 	.word	0x00000000
   b8154:	000b80bd 	.word	0x000b80bd

000b8158 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8158:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b815a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b815c:	d902      	bls.n	b8164 <pinAvailable+0xc>
    return false;
   b815e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8160:	b002      	add	sp, #8
   b8162:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8164:	f1a0 030b 	sub.w	r3, r0, #11
   b8168:	2b02      	cmp	r3, #2
   b816a:	d81a      	bhi.n	b81a2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b816c:	4c17      	ldr	r4, [pc, #92]	; (b81cc <pinAvailable+0x74>)
   b816e:	7821      	ldrb	r1, [r4, #0]
   b8170:	f3bf 8f5b 	dmb	ish
   b8174:	f011 0101 	ands.w	r1, r1, #1
   b8178:	d10b      	bne.n	b8192 <pinAvailable+0x3a>
   b817a:	4620      	mov	r0, r4
   b817c:	9101      	str	r1, [sp, #4]
   b817e:	f7fc fceb 	bl	b4b58 <__cxa_guard_acquire>
   b8182:	9901      	ldr	r1, [sp, #4]
   b8184:	b128      	cbz	r0, b8192 <pinAvailable+0x3a>
   b8186:	4812      	ldr	r0, [pc, #72]	; (b81d0 <pinAvailable+0x78>)
   b8188:	f7ff f9e6 	bl	b7558 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b818c:	4620      	mov	r0, r4
   b818e:	f7fc fce8 	bl	b4b62 <__cxa_guard_release>
   b8192:	4b0f      	ldr	r3, [pc, #60]	; (b81d0 <pinAvailable+0x78>)
   b8194:	7818      	ldrb	r0, [r3, #0]
   b8196:	f7fe fcf3 	bl	b6b80 <hal_spi_is_enabled>
   b819a:	2800      	cmp	r0, #0
   b819c:	d1df      	bne.n	b815e <pinAvailable+0x6>
  return true; // 'pin' is available
   b819e:	2001      	movs	r0, #1
   b81a0:	e7de      	b.n	b8160 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b81a2:	2801      	cmp	r0, #1
   b81a4:	d809      	bhi.n	b81ba <pinAvailable+0x62>
   b81a6:	f000 f86d 	bl	b8284 <_Z19__fetch_global_Wirev>
   b81aa:	2100      	movs	r1, #0
   b81ac:	7c00      	ldrb	r0, [r0, #16]
   b81ae:	f7fe fc5f 	bl	b6a70 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b81b2:	f080 0001 	eor.w	r0, r0, #1
   b81b6:	b2c0      	uxtb	r0, r0
   b81b8:	e7d2      	b.n	b8160 <pinAvailable+0x8>
   b81ba:	3809      	subs	r0, #9
   b81bc:	2801      	cmp	r0, #1
   b81be:	d8ee      	bhi.n	b819e <pinAvailable+0x46>
   b81c0:	f000 f8a0 	bl	b8304 <_Z22__fetch_global_Serial1v>
   b81c4:	7c00      	ldrb	r0, [r0, #16]
   b81c6:	f7fe fd2b 	bl	b6c20 <hal_usart_is_enabled>
   b81ca:	e7f2      	b.n	b81b2 <pinAvailable+0x5a>
   b81cc:	2003e6b8 	.word	0x2003e6b8
   b81d0:	2003e6bc 	.word	0x2003e6bc

000b81d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b81d4:	2823      	cmp	r0, #35	; 0x23
{
   b81d6:	b538      	push	{r3, r4, r5, lr}
   b81d8:	4604      	mov	r4, r0
   b81da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b81dc:	d80a      	bhi.n	b81f4 <pinMode+0x20>
   b81de:	29ff      	cmp	r1, #255	; 0xff
   b81e0:	d008      	beq.n	b81f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b81e2:	f7ff ffb9 	bl	b8158 <pinAvailable>
   b81e6:	b128      	cbz	r0, b81f4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b81e8:	4629      	mov	r1, r5
   b81ea:	4620      	mov	r0, r4
}
   b81ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b81f0:	f7fe bbd6 	b.w	b69a0 <hal_gpio_mode>
}
   b81f4:	bd38      	pop	{r3, r4, r5, pc}

000b81f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b81f6:	b538      	push	{r3, r4, r5, lr}
   b81f8:	4604      	mov	r4, r0
   b81fa:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b81fc:	f7fe fbd8 	bl	b69b0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8200:	28ff      	cmp	r0, #255	; 0xff
   b8202:	d010      	beq.n	b8226 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8204:	2806      	cmp	r0, #6
   b8206:	d804      	bhi.n	b8212 <digitalWrite+0x1c>
   b8208:	234d      	movs	r3, #77	; 0x4d
   b820a:	fa23 f000 	lsr.w	r0, r3, r0
   b820e:	07c3      	lsls	r3, r0, #31
   b8210:	d409      	bmi.n	b8226 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8212:	4620      	mov	r0, r4
   b8214:	f7ff ffa0 	bl	b8158 <pinAvailable>
   b8218:	b128      	cbz	r0, b8226 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b821a:	4629      	mov	r1, r5
   b821c:	4620      	mov	r0, r4
}
   b821e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8222:	f7fe bbcd 	b.w	b69c0 <hal_gpio_write>
}
   b8226:	bd38      	pop	{r3, r4, r5, pc}

000b8228 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8228:	b510      	push	{r4, lr}
   b822a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b822c:	f7fe fbc0 	bl	b69b0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8230:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8232:	b2db      	uxtb	r3, r3
   b8234:	2b01      	cmp	r3, #1
   b8236:	d908      	bls.n	b824a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8238:	4620      	mov	r0, r4
   b823a:	f7ff ff8d 	bl	b8158 <pinAvailable>
   b823e:	b120      	cbz	r0, b824a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8240:	4620      	mov	r0, r4
}
   b8242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b8246:	f7fe bbc3 	b.w	b69d0 <hal_gpio_read>
}
   b824a:	2000      	movs	r0, #0
   b824c:	bd10      	pop	{r4, pc}

000b824e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b824e:	4770      	bx	lr

000b8250 <_Z17acquireWireBufferv>:
{
   b8250:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8252:	4b0a      	ldr	r3, [pc, #40]	; (b827c <_Z17acquireWireBufferv+0x2c>)
   b8254:	6003      	str	r3, [r0, #0]
   b8256:	2301      	movs	r3, #1
{
   b8258:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b825a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b825c:	4908      	ldr	r1, [pc, #32]	; (b8280 <_Z17acquireWireBufferv+0x30>)
   b825e:	2020      	movs	r0, #32
   b8260:	f000 f874 	bl	b834c <_ZnajRKSt9nothrow_t>
	};
   b8264:	2520      	movs	r5, #32
   b8266:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8268:	4905      	ldr	r1, [pc, #20]	; (b8280 <_Z17acquireWireBufferv+0x30>)
	};
   b826a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b826c:	4628      	mov	r0, r5
   b826e:	f000 f86d 	bl	b834c <_ZnajRKSt9nothrow_t>
	};
   b8272:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8276:	4620      	mov	r0, r4
   b8278:	bd38      	pop	{r3, r4, r5, pc}
   b827a:	bf00      	nop
   b827c:	00010018 	.word	0x00010018
   b8280:	000bb218 	.word	0x000bb218

000b8284 <_Z19__fetch_global_Wirev>:
{
   b8284:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8286:	4d0e      	ldr	r5, [pc, #56]	; (b82c0 <_Z19__fetch_global_Wirev+0x3c>)
   b8288:	7829      	ldrb	r1, [r5, #0]
   b828a:	f3bf 8f5b 	dmb	ish
   b828e:	f011 0401 	ands.w	r4, r1, #1
{
   b8292:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8294:	d111      	bne.n	b82ba <_Z19__fetch_global_Wirev+0x36>
   b8296:	4628      	mov	r0, r5
   b8298:	f7fc fc5e 	bl	b4b58 <__cxa_guard_acquire>
   b829c:	b168      	cbz	r0, b82ba <_Z19__fetch_global_Wirev+0x36>
   b829e:	4668      	mov	r0, sp
   b82a0:	f7ff ffd6 	bl	b8250 <_Z17acquireWireBufferv>
   b82a4:	466a      	mov	r2, sp
   b82a6:	4621      	mov	r1, r4
   b82a8:	4806      	ldr	r0, [pc, #24]	; (b82c4 <_Z19__fetch_global_Wirev+0x40>)
   b82aa:	f7fe fe63 	bl	b6f74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b82ae:	4628      	mov	r0, r5
   b82b0:	f7fc fc57 	bl	b4b62 <__cxa_guard_release>
   b82b4:	4804      	ldr	r0, [pc, #16]	; (b82c8 <_Z19__fetch_global_Wirev+0x44>)
   b82b6:	f000 f95d 	bl	b8574 <atexit>
	return wire;
}
   b82ba:	4802      	ldr	r0, [pc, #8]	; (b82c4 <_Z19__fetch_global_Wirev+0x40>)
   b82bc:	b007      	add	sp, #28
   b82be:	bd30      	pop	{r4, r5, pc}
   b82c0:	2003e72c 	.word	0x2003e72c
   b82c4:	2003e730 	.word	0x2003e730
   b82c8:	000b824f 	.word	0x000b824f

000b82cc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b82cc:	4770      	bx	lr
	...

000b82d0 <_Z20acquireSerial1Bufferv>:
{
   b82d0:	b538      	push	{r3, r4, r5, lr}
   b82d2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b82d4:	2514      	movs	r5, #20
   b82d6:	462a      	mov	r2, r5
   b82d8:	2100      	movs	r1, #0
   b82da:	f000 f962 	bl	b85a2 <memset>
   b82de:	8025      	strh	r5, [r4, #0]
   b82e0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82e2:	4907      	ldr	r1, [pc, #28]	; (b8300 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b82e4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82e6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b82e8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82ea:	f000 f82f 	bl	b834c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82ee:	4904      	ldr	r1, [pc, #16]	; (b8300 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b82f0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82f2:	4628      	mov	r0, r5
   b82f4:	f000 f82a 	bl	b834c <_ZnajRKSt9nothrow_t>
    };
   b82f8:	60e0      	str	r0, [r4, #12]
}
   b82fa:	4620      	mov	r0, r4
   b82fc:	bd38      	pop	{r3, r4, r5, pc}
   b82fe:	bf00      	nop
   b8300:	000bb218 	.word	0x000bb218

000b8304 <_Z22__fetch_global_Serial1v>:
{
   b8304:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8306:	4d0e      	ldr	r5, [pc, #56]	; (b8340 <_Z22__fetch_global_Serial1v+0x3c>)
   b8308:	7829      	ldrb	r1, [r5, #0]
   b830a:	f3bf 8f5b 	dmb	ish
   b830e:	f011 0401 	ands.w	r4, r1, #1
{
   b8312:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8314:	d111      	bne.n	b833a <_Z22__fetch_global_Serial1v+0x36>
   b8316:	4628      	mov	r0, r5
   b8318:	f7fc fc1e 	bl	b4b58 <__cxa_guard_acquire>
   b831c:	b168      	cbz	r0, b833a <_Z22__fetch_global_Serial1v+0x36>
   b831e:	a801      	add	r0, sp, #4
   b8320:	f7ff ffd6 	bl	b82d0 <_Z20acquireSerial1Bufferv>
   b8324:	aa01      	add	r2, sp, #4
   b8326:	4621      	mov	r1, r4
   b8328:	4806      	ldr	r0, [pc, #24]	; (b8344 <_Z22__fetch_global_Serial1v+0x40>)
   b832a:	f7ff fda3 	bl	b7e74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b832e:	4628      	mov	r0, r5
   b8330:	f7fc fc17 	bl	b4b62 <__cxa_guard_release>
   b8334:	4804      	ldr	r0, [pc, #16]	; (b8348 <_Z22__fetch_global_Serial1v+0x44>)
   b8336:	f000 f91d 	bl	b8574 <atexit>
    return serial1;
}
   b833a:	4802      	ldr	r0, [pc, #8]	; (b8344 <_Z22__fetch_global_Serial1v+0x40>)
   b833c:	b007      	add	sp, #28
   b833e:	bd30      	pop	{r4, r5, pc}
   b8340:	2003e744 	.word	0x2003e744
   b8344:	2003e748 	.word	0x2003e748
   b8348:	000b82cd 	.word	0x000b82cd

000b834c <_ZnajRKSt9nothrow_t>:
   b834c:	f7fc bbf1 	b.w	b4b32 <_Znaj>

000b8350 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8350:	4901      	ldr	r1, [pc, #4]	; (b8358 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8352:	f000 b8f9 	b.w	b8548 <_ZNKSt9type_infoeqERKS_>
   b8356:	bf00      	nop
   b8358:	000bb234 	.word	0x000bb234

000b835c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b835c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b835e:	2400      	movs	r4, #0
   b8360:	2310      	movs	r3, #16
   b8362:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8366:	6803      	ldr	r3, [r0, #0]
   b8368:	4615      	mov	r5, r2
   b836a:	699e      	ldr	r6, [r3, #24]
   b836c:	6812      	ldr	r2, [r2, #0]
   b836e:	466b      	mov	r3, sp
   b8370:	e9cd 4400 	strd	r4, r4, [sp]
   b8374:	47b0      	blx	r6
   b8376:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b837a:	f003 0306 	and.w	r3, r3, #6
   b837e:	2b06      	cmp	r3, #6
   b8380:	bf03      	ittte	eq
   b8382:	9b00      	ldreq	r3, [sp, #0]
   b8384:	602b      	streq	r3, [r5, #0]
   b8386:	2001      	moveq	r0, #1
   b8388:	4620      	movne	r0, r4
   b838a:	b004      	add	sp, #16
   b838c:	bd70      	pop	{r4, r5, r6, pc}

000b838e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b838e:	9800      	ldr	r0, [sp, #0]
   b8390:	4290      	cmp	r0, r2
   b8392:	bf14      	ite	ne
   b8394:	2001      	movne	r0, #1
   b8396:	2006      	moveq	r0, #6
   b8398:	4770      	bx	lr
	...

000b839c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b839c:	b510      	push	{r4, lr}
   b839e:	4b03      	ldr	r3, [pc, #12]	; (b83ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b83a0:	6003      	str	r3, [r0, #0]
   b83a2:	4604      	mov	r4, r0
   b83a4:	f000 f8cd 	bl	b8542 <_ZNSt9type_infoD1Ev>
   b83a8:	4620      	mov	r0, r4
   b83aa:	bd10      	pop	{r4, pc}
   b83ac:	000bb274 	.word	0x000bb274

000b83b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b83b0:	b510      	push	{r4, lr}
   b83b2:	4604      	mov	r4, r0
   b83b4:	f7ff fff2 	bl	b839c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b83b8:	4620      	mov	r0, r4
   b83ba:	2108      	movs	r1, #8
   b83bc:	f7fc fbbd 	bl	b4b3a <_ZdlPvj>
   b83c0:	4620      	mov	r0, r4
   b83c2:	bd10      	pop	{r4, pc}

000b83c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b83c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b83c8:	461f      	mov	r7, r3
   b83ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b83ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b83d2:	4598      	cmp	r8, r3
   b83d4:	4606      	mov	r6, r0
   b83d6:	4615      	mov	r5, r2
   b83d8:	d107      	bne.n	b83ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b83da:	9907      	ldr	r1, [sp, #28]
   b83dc:	f000 f8b4 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b83e0:	b118      	cbz	r0, b83ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b83e2:	7165      	strb	r5, [r4, #5]
   b83e4:	2000      	movs	r0, #0
   b83e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b83ea:	4639      	mov	r1, r7
   b83ec:	4630      	mov	r0, r6
   b83ee:	f000 f8ab 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b83f2:	2800      	cmp	r0, #0
   b83f4:	d0f6      	beq.n	b83e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b83f6:	2301      	movs	r3, #1
   b83f8:	f8c4 8000 	str.w	r8, [r4]
   b83fc:	7125      	strb	r5, [r4, #4]
   b83fe:	71a3      	strb	r3, [r4, #6]
   b8400:	e7f0      	b.n	b83e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8402 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8402:	b538      	push	{r3, r4, r5, lr}
   b8404:	4615      	mov	r5, r2
   b8406:	461c      	mov	r4, r3
   b8408:	f000 f89e 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b840c:	b120      	cbz	r0, b8418 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b840e:	2308      	movs	r3, #8
   b8410:	60e3      	str	r3, [r4, #12]
   b8412:	2306      	movs	r3, #6
   b8414:	6025      	str	r5, [r4, #0]
   b8416:	7123      	strb	r3, [r4, #4]
   b8418:	bd38      	pop	{r3, r4, r5, pc}

000b841a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b841a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b841c:	4605      	mov	r5, r0
   b841e:	460c      	mov	r4, r1
   b8420:	9201      	str	r2, [sp, #4]
   b8422:	461e      	mov	r6, r3
   b8424:	f000 f890 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b8428:	b950      	cbnz	r0, b8440 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b842a:	2e03      	cmp	r6, #3
   b842c:	d808      	bhi.n	b8440 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b842e:	6823      	ldr	r3, [r4, #0]
   b8430:	9a01      	ldr	r2, [sp, #4]
   b8432:	695b      	ldr	r3, [r3, #20]
   b8434:	4629      	mov	r1, r5
   b8436:	4620      	mov	r0, r4
   b8438:	b002      	add	sp, #8
   b843a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b843e:	4718      	bx	r3
   b8440:	b002      	add	sp, #8
   b8442:	bd70      	pop	{r4, r5, r6, pc}

000b8444 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8444:	b510      	push	{r4, lr}
   b8446:	4b03      	ldr	r3, [pc, #12]	; (b8454 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8448:	6003      	str	r3, [r0, #0]
   b844a:	4604      	mov	r4, r0
   b844c:	f7ff ffa6 	bl	b839c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8450:	4620      	mov	r0, r4
   b8452:	bd10      	pop	{r4, pc}
   b8454:	000bb2d4 	.word	0x000bb2d4

000b8458 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8458:	b510      	push	{r4, lr}
   b845a:	4604      	mov	r4, r0
   b845c:	f7ff fff2 	bl	b8444 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8460:	4620      	mov	r0, r4
   b8462:	210c      	movs	r1, #12
   b8464:	f7fc fb69 	bl	b4b3a <_ZdlPvj>
   b8468:	4620      	mov	r0, r4
   b846a:	bd10      	pop	{r4, pc}

000b846c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b846e:	9f08      	ldr	r7, [sp, #32]
   b8470:	4297      	cmp	r7, r2
   b8472:	4605      	mov	r5, r0
   b8474:	460e      	mov	r6, r1
   b8476:	4614      	mov	r4, r2
   b8478:	d00a      	beq.n	b8490 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b847a:	68a8      	ldr	r0, [r5, #8]
   b847c:	6802      	ldr	r2, [r0, #0]
   b847e:	9708      	str	r7, [sp, #32]
   b8480:	6a15      	ldr	r5, [r2, #32]
   b8482:	4631      	mov	r1, r6
   b8484:	4622      	mov	r2, r4
   b8486:	46ac      	mov	ip, r5
   b8488:	b003      	add	sp, #12
   b848a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b848e:	4760      	bx	ip
   b8490:	4619      	mov	r1, r3
   b8492:	9301      	str	r3, [sp, #4]
   b8494:	f000 f858 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b8498:	9b01      	ldr	r3, [sp, #4]
   b849a:	2800      	cmp	r0, #0
   b849c:	d0ed      	beq.n	b847a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b849e:	2006      	movs	r0, #6
   b84a0:	b003      	add	sp, #12
   b84a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b84a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b84a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84a8:	460d      	mov	r5, r1
   b84aa:	4619      	mov	r1, r3
   b84ac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b84b0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b84b4:	4681      	mov	r9, r0
   b84b6:	4617      	mov	r7, r2
   b84b8:	4698      	mov	r8, r3
   b84ba:	f000 f845 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b84be:	b190      	cbz	r0, b84e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b84c0:	2d00      	cmp	r5, #0
   b84c2:	6034      	str	r4, [r6, #0]
   b84c4:	7137      	strb	r7, [r6, #4]
   b84c6:	db09      	blt.n	b84dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b84c8:	1961      	adds	r1, r4, r5
   b84ca:	458a      	cmp	sl, r1
   b84cc:	bf0c      	ite	eq
   b84ce:	2106      	moveq	r1, #6
   b84d0:	2101      	movne	r1, #1
   b84d2:	71b1      	strb	r1, [r6, #6]
   b84d4:	2000      	movs	r0, #0
   b84d6:	b001      	add	sp, #4
   b84d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b84dc:	3502      	adds	r5, #2
   b84de:	d1f9      	bne.n	b84d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b84e0:	2301      	movs	r3, #1
   b84e2:	71b3      	strb	r3, [r6, #6]
   b84e4:	e7f6      	b.n	b84d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b84e6:	4554      	cmp	r4, sl
   b84e8:	d106      	bne.n	b84f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b84ea:	4659      	mov	r1, fp
   b84ec:	4648      	mov	r0, r9
   b84ee:	f000 f82b 	bl	b8548 <_ZNKSt9type_infoeqERKS_>
   b84f2:	b108      	cbz	r0, b84f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b84f4:	7177      	strb	r7, [r6, #5]
   b84f6:	e7ed      	b.n	b84d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b84f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b84fc:	6803      	ldr	r3, [r0, #0]
   b84fe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8502:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8506:	69dc      	ldr	r4, [r3, #28]
   b8508:	463a      	mov	r2, r7
   b850a:	4643      	mov	r3, r8
   b850c:	4629      	mov	r1, r5
   b850e:	46a4      	mov	ip, r4
   b8510:	b001      	add	sp, #4
   b8512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8516:	4760      	bx	ip

000b8518 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b851c:	4607      	mov	r7, r0
   b851e:	460c      	mov	r4, r1
   b8520:	4615      	mov	r5, r2
   b8522:	461e      	mov	r6, r3
   b8524:	f7ff ff6d 	bl	b8402 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8528:	b948      	cbnz	r0, b853e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b852a:	68b8      	ldr	r0, [r7, #8]
   b852c:	6803      	ldr	r3, [r0, #0]
   b852e:	699f      	ldr	r7, [r3, #24]
   b8530:	462a      	mov	r2, r5
   b8532:	4633      	mov	r3, r6
   b8534:	4621      	mov	r1, r4
   b8536:	46bc      	mov	ip, r7
   b8538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b853c:	4760      	bx	ip
   b853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8542 <_ZNSt9type_infoD1Ev>:
   b8542:	4770      	bx	lr

000b8544 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8544:	2000      	movs	r0, #0
   b8546:	4770      	bx	lr

000b8548 <_ZNKSt9type_infoeqERKS_>:
   b8548:	4281      	cmp	r1, r0
   b854a:	b508      	push	{r3, lr}
   b854c:	d00e      	beq.n	b856c <_ZNKSt9type_infoeqERKS_+0x24>
   b854e:	6840      	ldr	r0, [r0, #4]
   b8550:	7803      	ldrb	r3, [r0, #0]
   b8552:	2b2a      	cmp	r3, #42	; 0x2a
   b8554:	d00c      	beq.n	b8570 <_ZNKSt9type_infoeqERKS_+0x28>
   b8556:	6849      	ldr	r1, [r1, #4]
   b8558:	780b      	ldrb	r3, [r1, #0]
   b855a:	2b2a      	cmp	r3, #42	; 0x2a
   b855c:	bf08      	it	eq
   b855e:	3101      	addeq	r1, #1
   b8560:	f7fc fa80 	bl	b4a64 <strcmp>
   b8564:	fab0 f080 	clz	r0, r0
   b8568:	0940      	lsrs	r0, r0, #5
   b856a:	bd08      	pop	{r3, pc}
   b856c:	2001      	movs	r0, #1
   b856e:	e7fc      	b.n	b856a <_ZNKSt9type_infoeqERKS_+0x22>
   b8570:	2000      	movs	r0, #0
   b8572:	e7fa      	b.n	b856a <_ZNKSt9type_infoeqERKS_+0x22>

000b8574 <atexit>:
   b8574:	2300      	movs	r3, #0
   b8576:	4601      	mov	r1, r0
   b8578:	461a      	mov	r2, r3
   b857a:	4618      	mov	r0, r3
   b857c:	f000 be8a 	b.w	b9294 <__register_exitproc>

000b8580 <atof>:
   b8580:	2100      	movs	r1, #0
   b8582:	f000 be7b 	b.w	b927c <strtod>

000b8586 <memcpy>:
   b8586:	440a      	add	r2, r1
   b8588:	4291      	cmp	r1, r2
   b858a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b858e:	d100      	bne.n	b8592 <memcpy+0xc>
   b8590:	4770      	bx	lr
   b8592:	b510      	push	{r4, lr}
   b8594:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8598:	f803 4f01 	strb.w	r4, [r3, #1]!
   b859c:	4291      	cmp	r1, r2
   b859e:	d1f9      	bne.n	b8594 <memcpy+0xe>
   b85a0:	bd10      	pop	{r4, pc}

000b85a2 <memset>:
   b85a2:	4402      	add	r2, r0
   b85a4:	4603      	mov	r3, r0
   b85a6:	4293      	cmp	r3, r2
   b85a8:	d100      	bne.n	b85ac <memset+0xa>
   b85aa:	4770      	bx	lr
   b85ac:	f803 1b01 	strb.w	r1, [r3], #1
   b85b0:	e7f9      	b.n	b85a6 <memset+0x4>
	...

000b85b4 <srand>:
   b85b4:	b538      	push	{r3, r4, r5, lr}
   b85b6:	4b10      	ldr	r3, [pc, #64]	; (b85f8 <srand+0x44>)
   b85b8:	681d      	ldr	r5, [r3, #0]
   b85ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b85bc:	4604      	mov	r4, r0
   b85be:	b9b3      	cbnz	r3, b85ee <srand+0x3a>
   b85c0:	2018      	movs	r0, #24
   b85c2:	f7fe fc21 	bl	b6e08 <malloc>
   b85c6:	4602      	mov	r2, r0
   b85c8:	63a8      	str	r0, [r5, #56]	; 0x38
   b85ca:	b920      	cbnz	r0, b85d6 <srand+0x22>
   b85cc:	4b0b      	ldr	r3, [pc, #44]	; (b85fc <srand+0x48>)
   b85ce:	480c      	ldr	r0, [pc, #48]	; (b8600 <srand+0x4c>)
   b85d0:	2142      	movs	r1, #66	; 0x42
   b85d2:	f7fe fc49 	bl	b6e68 <__assert_func>
   b85d6:	490b      	ldr	r1, [pc, #44]	; (b8604 <srand+0x50>)
   b85d8:	4b0b      	ldr	r3, [pc, #44]	; (b8608 <srand+0x54>)
   b85da:	e9c0 1300 	strd	r1, r3, [r0]
   b85de:	4b0b      	ldr	r3, [pc, #44]	; (b860c <srand+0x58>)
   b85e0:	6083      	str	r3, [r0, #8]
   b85e2:	230b      	movs	r3, #11
   b85e4:	8183      	strh	r3, [r0, #12]
   b85e6:	2100      	movs	r1, #0
   b85e8:	2001      	movs	r0, #1
   b85ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b85ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b85f0:	2200      	movs	r2, #0
   b85f2:	611c      	str	r4, [r3, #16]
   b85f4:	615a      	str	r2, [r3, #20]
   b85f6:	bd38      	pop	{r3, r4, r5, pc}
   b85f8:	2003e3e0 	.word	0x2003e3e0
   b85fc:	000bb30d 	.word	0x000bb30d
   b8600:	000bb324 	.word	0x000bb324
   b8604:	abcd330e 	.word	0xabcd330e
   b8608:	e66d1234 	.word	0xe66d1234
   b860c:	0005deec 	.word	0x0005deec

000b8610 <strncmp>:
   b8610:	b510      	push	{r4, lr}
   b8612:	b17a      	cbz	r2, b8634 <strncmp+0x24>
   b8614:	4603      	mov	r3, r0
   b8616:	3901      	subs	r1, #1
   b8618:	1884      	adds	r4, r0, r2
   b861a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b861e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8622:	4290      	cmp	r0, r2
   b8624:	d101      	bne.n	b862a <strncmp+0x1a>
   b8626:	42a3      	cmp	r3, r4
   b8628:	d101      	bne.n	b862e <strncmp+0x1e>
   b862a:	1a80      	subs	r0, r0, r2
   b862c:	bd10      	pop	{r4, pc}
   b862e:	2800      	cmp	r0, #0
   b8630:	d1f3      	bne.n	b861a <strncmp+0xa>
   b8632:	e7fa      	b.n	b862a <strncmp+0x1a>
   b8634:	4610      	mov	r0, r2
   b8636:	e7f9      	b.n	b862c <strncmp+0x1c>

000b8638 <sulp>:
   b8638:	b570      	push	{r4, r5, r6, lr}
   b863a:	4604      	mov	r4, r0
   b863c:	460d      	mov	r5, r1
   b863e:	ec45 4b10 	vmov	d0, r4, r5
   b8642:	4616      	mov	r6, r2
   b8644:	f001 fd80 	bl	ba148 <__ulp>
   b8648:	ec51 0b10 	vmov	r0, r1, d0
   b864c:	b17e      	cbz	r6, b866e <sulp+0x36>
   b864e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8656:	2b00      	cmp	r3, #0
   b8658:	dd09      	ble.n	b866e <sulp+0x36>
   b865a:	051b      	lsls	r3, r3, #20
   b865c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8660:	2400      	movs	r4, #0
   b8662:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8666:	4622      	mov	r2, r4
   b8668:	462b      	mov	r3, r5
   b866a:	f7fb fe95 	bl	b4398 <__aeabi_dmul>
   b866e:	bd70      	pop	{r4, r5, r6, pc}

000b8670 <_strtod_l>:
   b8670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8674:	ed2d 8b02 	vpush	{d8}
   b8678:	b09d      	sub	sp, #116	; 0x74
   b867a:	461f      	mov	r7, r3
   b867c:	2300      	movs	r3, #0
   b867e:	9318      	str	r3, [sp, #96]	; 0x60
   b8680:	4ba2      	ldr	r3, [pc, #648]	; (b890c <_strtod_l+0x29c>)
   b8682:	9213      	str	r2, [sp, #76]	; 0x4c
   b8684:	681b      	ldr	r3, [r3, #0]
   b8686:	9305      	str	r3, [sp, #20]
   b8688:	4604      	mov	r4, r0
   b868a:	4618      	mov	r0, r3
   b868c:	4688      	mov	r8, r1
   b868e:	f7fc f9f3 	bl	b4a78 <strlen>
   b8692:	f04f 0a00 	mov.w	sl, #0
   b8696:	4605      	mov	r5, r0
   b8698:	f04f 0b00 	mov.w	fp, #0
   b869c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b86a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86a2:	781a      	ldrb	r2, [r3, #0]
   b86a4:	2a2b      	cmp	r2, #43	; 0x2b
   b86a6:	d04e      	beq.n	b8746 <_strtod_l+0xd6>
   b86a8:	d83b      	bhi.n	b8722 <_strtod_l+0xb2>
   b86aa:	2a0d      	cmp	r2, #13
   b86ac:	d834      	bhi.n	b8718 <_strtod_l+0xa8>
   b86ae:	2a08      	cmp	r2, #8
   b86b0:	d834      	bhi.n	b871c <_strtod_l+0xac>
   b86b2:	2a00      	cmp	r2, #0
   b86b4:	d03e      	beq.n	b8734 <_strtod_l+0xc4>
   b86b6:	2300      	movs	r3, #0
   b86b8:	930a      	str	r3, [sp, #40]	; 0x28
   b86ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b86bc:	7833      	ldrb	r3, [r6, #0]
   b86be:	2b30      	cmp	r3, #48	; 0x30
   b86c0:	f040 80b0 	bne.w	b8824 <_strtod_l+0x1b4>
   b86c4:	7873      	ldrb	r3, [r6, #1]
   b86c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b86ca:	2b58      	cmp	r3, #88	; 0x58
   b86cc:	d168      	bne.n	b87a0 <_strtod_l+0x130>
   b86ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b86d0:	9301      	str	r3, [sp, #4]
   b86d2:	ab18      	add	r3, sp, #96	; 0x60
   b86d4:	9702      	str	r7, [sp, #8]
   b86d6:	9300      	str	r3, [sp, #0]
   b86d8:	4a8d      	ldr	r2, [pc, #564]	; (b8910 <_strtod_l+0x2a0>)
   b86da:	ab19      	add	r3, sp, #100	; 0x64
   b86dc:	a917      	add	r1, sp, #92	; 0x5c
   b86de:	4620      	mov	r0, r4
   b86e0:	f000 fea2 	bl	b9428 <__gethex>
   b86e4:	f010 0707 	ands.w	r7, r0, #7
   b86e8:	4605      	mov	r5, r0
   b86ea:	d005      	beq.n	b86f8 <_strtod_l+0x88>
   b86ec:	2f06      	cmp	r7, #6
   b86ee:	d12c      	bne.n	b874a <_strtod_l+0xda>
   b86f0:	3601      	adds	r6, #1
   b86f2:	2300      	movs	r3, #0
   b86f4:	9617      	str	r6, [sp, #92]	; 0x5c
   b86f6:	930a      	str	r3, [sp, #40]	; 0x28
   b86f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b86fa:	2b00      	cmp	r3, #0
   b86fc:	f040 8590 	bne.w	b9220 <_strtod_l+0xbb0>
   b8700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8702:	b1eb      	cbz	r3, b8740 <_strtod_l+0xd0>
   b8704:	4652      	mov	r2, sl
   b8706:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b870a:	ec43 2b10 	vmov	d0, r2, r3
   b870e:	b01d      	add	sp, #116	; 0x74
   b8710:	ecbd 8b02 	vpop	{d8}
   b8714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8718:	2a20      	cmp	r2, #32
   b871a:	d1cc      	bne.n	b86b6 <_strtod_l+0x46>
   b871c:	3301      	adds	r3, #1
   b871e:	9317      	str	r3, [sp, #92]	; 0x5c
   b8720:	e7be      	b.n	b86a0 <_strtod_l+0x30>
   b8722:	2a2d      	cmp	r2, #45	; 0x2d
   b8724:	d1c7      	bne.n	b86b6 <_strtod_l+0x46>
   b8726:	2201      	movs	r2, #1
   b8728:	920a      	str	r2, [sp, #40]	; 0x28
   b872a:	1c5a      	adds	r2, r3, #1
   b872c:	9217      	str	r2, [sp, #92]	; 0x5c
   b872e:	785b      	ldrb	r3, [r3, #1]
   b8730:	2b00      	cmp	r3, #0
   b8732:	d1c2      	bne.n	b86ba <_strtod_l+0x4a>
   b8734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8736:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b873a:	2b00      	cmp	r3, #0
   b873c:	f040 856e 	bne.w	b921c <_strtod_l+0xbac>
   b8740:	4652      	mov	r2, sl
   b8742:	465b      	mov	r3, fp
   b8744:	e7e1      	b.n	b870a <_strtod_l+0x9a>
   b8746:	2200      	movs	r2, #0
   b8748:	e7ee      	b.n	b8728 <_strtod_l+0xb8>
   b874a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b874c:	b13a      	cbz	r2, b875e <_strtod_l+0xee>
   b874e:	2135      	movs	r1, #53	; 0x35
   b8750:	a81a      	add	r0, sp, #104	; 0x68
   b8752:	f001 fe04 	bl	ba35e <__copybits>
   b8756:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8758:	4620      	mov	r0, r4
   b875a:	f001 f9c3 	bl	b9ae4 <_Bfree>
   b875e:	3f01      	subs	r7, #1
   b8760:	2f04      	cmp	r7, #4
   b8762:	d806      	bhi.n	b8772 <_strtod_l+0x102>
   b8764:	e8df f007 	tbb	[pc, r7]
   b8768:	1714030a 	.word	0x1714030a
   b876c:	0a          	.byte	0x0a
   b876d:	00          	.byte	0x00
   b876e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b8772:	0728      	lsls	r0, r5, #28
   b8774:	d5c0      	bpl.n	b86f8 <_strtod_l+0x88>
   b8776:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b877a:	e7bd      	b.n	b86f8 <_strtod_l+0x88>
   b877c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8780:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b8782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b8786:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b878a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b878e:	e7f0      	b.n	b8772 <_strtod_l+0x102>
   b8790:	f8df b180 	ldr.w	fp, [pc, #384]	; b8914 <_strtod_l+0x2a4>
   b8794:	e7ed      	b.n	b8772 <_strtod_l+0x102>
   b8796:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b879a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b879e:	e7e8      	b.n	b8772 <_strtod_l+0x102>
   b87a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87a2:	1c5a      	adds	r2, r3, #1
   b87a4:	9217      	str	r2, [sp, #92]	; 0x5c
   b87a6:	785b      	ldrb	r3, [r3, #1]
   b87a8:	2b30      	cmp	r3, #48	; 0x30
   b87aa:	d0f9      	beq.n	b87a0 <_strtod_l+0x130>
   b87ac:	2b00      	cmp	r3, #0
   b87ae:	d0a3      	beq.n	b86f8 <_strtod_l+0x88>
   b87b0:	2301      	movs	r3, #1
   b87b2:	f04f 0900 	mov.w	r9, #0
   b87b6:	9304      	str	r3, [sp, #16]
   b87b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87ba:	9308      	str	r3, [sp, #32]
   b87bc:	f8cd 901c 	str.w	r9, [sp, #28]
   b87c0:	464f      	mov	r7, r9
   b87c2:	220a      	movs	r2, #10
   b87c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b87c6:	7806      	ldrb	r6, [r0, #0]
   b87c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b87cc:	b2d9      	uxtb	r1, r3
   b87ce:	2909      	cmp	r1, #9
   b87d0:	d92a      	bls.n	b8828 <_strtod_l+0x1b8>
   b87d2:	9905      	ldr	r1, [sp, #20]
   b87d4:	462a      	mov	r2, r5
   b87d6:	f7ff ff1b 	bl	b8610 <strncmp>
   b87da:	b398      	cbz	r0, b8844 <_strtod_l+0x1d4>
   b87dc:	2000      	movs	r0, #0
   b87de:	4632      	mov	r2, r6
   b87e0:	463d      	mov	r5, r7
   b87e2:	9005      	str	r0, [sp, #20]
   b87e4:	4603      	mov	r3, r0
   b87e6:	2a65      	cmp	r2, #101	; 0x65
   b87e8:	d001      	beq.n	b87ee <_strtod_l+0x17e>
   b87ea:	2a45      	cmp	r2, #69	; 0x45
   b87ec:	d118      	bne.n	b8820 <_strtod_l+0x1b0>
   b87ee:	b91d      	cbnz	r5, b87f8 <_strtod_l+0x188>
   b87f0:	9a04      	ldr	r2, [sp, #16]
   b87f2:	4302      	orrs	r2, r0
   b87f4:	d09e      	beq.n	b8734 <_strtod_l+0xc4>
   b87f6:	2500      	movs	r5, #0
   b87f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b87fc:	f108 0201 	add.w	r2, r8, #1
   b8800:	9217      	str	r2, [sp, #92]	; 0x5c
   b8802:	f898 2001 	ldrb.w	r2, [r8, #1]
   b8806:	2a2b      	cmp	r2, #43	; 0x2b
   b8808:	d075      	beq.n	b88f6 <_strtod_l+0x286>
   b880a:	2a2d      	cmp	r2, #45	; 0x2d
   b880c:	d07b      	beq.n	b8906 <_strtod_l+0x296>
   b880e:	f04f 0c00 	mov.w	ip, #0
   b8812:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b8816:	2909      	cmp	r1, #9
   b8818:	f240 8082 	bls.w	b8920 <_strtod_l+0x2b0>
   b881c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8820:	2600      	movs	r6, #0
   b8822:	e09d      	b.n	b8960 <_strtod_l+0x2f0>
   b8824:	2300      	movs	r3, #0
   b8826:	e7c4      	b.n	b87b2 <_strtod_l+0x142>
   b8828:	2f08      	cmp	r7, #8
   b882a:	bfd8      	it	le
   b882c:	9907      	ldrle	r1, [sp, #28]
   b882e:	f100 0001 	add.w	r0, r0, #1
   b8832:	bfda      	itte	le
   b8834:	fb02 3301 	mlale	r3, r2, r1, r3
   b8838:	9307      	strle	r3, [sp, #28]
   b883a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b883e:	3701      	adds	r7, #1
   b8840:	9017      	str	r0, [sp, #92]	; 0x5c
   b8842:	e7bf      	b.n	b87c4 <_strtod_l+0x154>
   b8844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8846:	195a      	adds	r2, r3, r5
   b8848:	9217      	str	r2, [sp, #92]	; 0x5c
   b884a:	5d5a      	ldrb	r2, [r3, r5]
   b884c:	2f00      	cmp	r7, #0
   b884e:	d037      	beq.n	b88c0 <_strtod_l+0x250>
   b8850:	9005      	str	r0, [sp, #20]
   b8852:	463d      	mov	r5, r7
   b8854:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8858:	2b09      	cmp	r3, #9
   b885a:	d912      	bls.n	b8882 <_strtod_l+0x212>
   b885c:	2301      	movs	r3, #1
   b885e:	e7c2      	b.n	b87e6 <_strtod_l+0x176>
   b8860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8862:	1c5a      	adds	r2, r3, #1
   b8864:	9217      	str	r2, [sp, #92]	; 0x5c
   b8866:	785a      	ldrb	r2, [r3, #1]
   b8868:	3001      	adds	r0, #1
   b886a:	2a30      	cmp	r2, #48	; 0x30
   b886c:	d0f8      	beq.n	b8860 <_strtod_l+0x1f0>
   b886e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b8872:	2b08      	cmp	r3, #8
   b8874:	f200 84d9 	bhi.w	b922a <_strtod_l+0xbba>
   b8878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b887a:	9005      	str	r0, [sp, #20]
   b887c:	2000      	movs	r0, #0
   b887e:	9308      	str	r3, [sp, #32]
   b8880:	4605      	mov	r5, r0
   b8882:	3a30      	subs	r2, #48	; 0x30
   b8884:	f100 0301 	add.w	r3, r0, #1
   b8888:	d014      	beq.n	b88b4 <_strtod_l+0x244>
   b888a:	9905      	ldr	r1, [sp, #20]
   b888c:	4419      	add	r1, r3
   b888e:	9105      	str	r1, [sp, #20]
   b8890:	462b      	mov	r3, r5
   b8892:	eb00 0e05 	add.w	lr, r0, r5
   b8896:	210a      	movs	r1, #10
   b8898:	4573      	cmp	r3, lr
   b889a:	d113      	bne.n	b88c4 <_strtod_l+0x254>
   b889c:	182b      	adds	r3, r5, r0
   b889e:	2b08      	cmp	r3, #8
   b88a0:	f105 0501 	add.w	r5, r5, #1
   b88a4:	4405      	add	r5, r0
   b88a6:	dc1c      	bgt.n	b88e2 <_strtod_l+0x272>
   b88a8:	9907      	ldr	r1, [sp, #28]
   b88aa:	230a      	movs	r3, #10
   b88ac:	fb03 2301 	mla	r3, r3, r1, r2
   b88b0:	9307      	str	r3, [sp, #28]
   b88b2:	2300      	movs	r3, #0
   b88b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b88b6:	1c51      	adds	r1, r2, #1
   b88b8:	9117      	str	r1, [sp, #92]	; 0x5c
   b88ba:	7852      	ldrb	r2, [r2, #1]
   b88bc:	4618      	mov	r0, r3
   b88be:	e7c9      	b.n	b8854 <_strtod_l+0x1e4>
   b88c0:	4638      	mov	r0, r7
   b88c2:	e7d2      	b.n	b886a <_strtod_l+0x1fa>
   b88c4:	2b08      	cmp	r3, #8
   b88c6:	dc04      	bgt.n	b88d2 <_strtod_l+0x262>
   b88c8:	9e07      	ldr	r6, [sp, #28]
   b88ca:	434e      	muls	r6, r1
   b88cc:	9607      	str	r6, [sp, #28]
   b88ce:	3301      	adds	r3, #1
   b88d0:	e7e2      	b.n	b8898 <_strtod_l+0x228>
   b88d2:	f103 0c01 	add.w	ip, r3, #1
   b88d6:	f1bc 0f10 	cmp.w	ip, #16
   b88da:	bfd8      	it	le
   b88dc:	fb01 f909 	mulle.w	r9, r1, r9
   b88e0:	e7f5      	b.n	b88ce <_strtod_l+0x25e>
   b88e2:	2d10      	cmp	r5, #16
   b88e4:	bfdc      	itt	le
   b88e6:	230a      	movle	r3, #10
   b88e8:	fb03 2909 	mlale	r9, r3, r9, r2
   b88ec:	e7e1      	b.n	b88b2 <_strtod_l+0x242>
   b88ee:	2300      	movs	r3, #0
   b88f0:	9305      	str	r3, [sp, #20]
   b88f2:	2301      	movs	r3, #1
   b88f4:	e77c      	b.n	b87f0 <_strtod_l+0x180>
   b88f6:	f04f 0c00 	mov.w	ip, #0
   b88fa:	f108 0202 	add.w	r2, r8, #2
   b88fe:	9217      	str	r2, [sp, #92]	; 0x5c
   b8900:	f898 2002 	ldrb.w	r2, [r8, #2]
   b8904:	e785      	b.n	b8812 <_strtod_l+0x1a2>
   b8906:	f04f 0c01 	mov.w	ip, #1
   b890a:	e7f6      	b.n	b88fa <_strtod_l+0x28a>
   b890c:	000bb54c 	.word	0x000bb54c
   b8910:	000bb384 	.word	0x000bb384
   b8914:	7ff00000 	.word	0x7ff00000
   b8918:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b891a:	1c51      	adds	r1, r2, #1
   b891c:	9117      	str	r1, [sp, #92]	; 0x5c
   b891e:	7852      	ldrb	r2, [r2, #1]
   b8920:	2a30      	cmp	r2, #48	; 0x30
   b8922:	d0f9      	beq.n	b8918 <_strtod_l+0x2a8>
   b8924:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8928:	2908      	cmp	r1, #8
   b892a:	f63f af79 	bhi.w	b8820 <_strtod_l+0x1b0>
   b892e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b8932:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8934:	9206      	str	r2, [sp, #24]
   b8936:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8938:	1c51      	adds	r1, r2, #1
   b893a:	9117      	str	r1, [sp, #92]	; 0x5c
   b893c:	7852      	ldrb	r2, [r2, #1]
   b893e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b8942:	2e09      	cmp	r6, #9
   b8944:	d937      	bls.n	b89b6 <_strtod_l+0x346>
   b8946:	9e06      	ldr	r6, [sp, #24]
   b8948:	1b89      	subs	r1, r1, r6
   b894a:	2908      	cmp	r1, #8
   b894c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8950:	dc02      	bgt.n	b8958 <_strtod_l+0x2e8>
   b8952:	4576      	cmp	r6, lr
   b8954:	bfa8      	it	ge
   b8956:	4676      	movge	r6, lr
   b8958:	f1bc 0f00 	cmp.w	ip, #0
   b895c:	d000      	beq.n	b8960 <_strtod_l+0x2f0>
   b895e:	4276      	negs	r6, r6
   b8960:	2d00      	cmp	r5, #0
   b8962:	d14d      	bne.n	b8a00 <_strtod_l+0x390>
   b8964:	9904      	ldr	r1, [sp, #16]
   b8966:	4301      	orrs	r1, r0
   b8968:	f47f aec6 	bne.w	b86f8 <_strtod_l+0x88>
   b896c:	2b00      	cmp	r3, #0
   b896e:	f47f aee1 	bne.w	b8734 <_strtod_l+0xc4>
   b8972:	2a69      	cmp	r2, #105	; 0x69
   b8974:	d027      	beq.n	b89c6 <_strtod_l+0x356>
   b8976:	dc24      	bgt.n	b89c2 <_strtod_l+0x352>
   b8978:	2a49      	cmp	r2, #73	; 0x49
   b897a:	d024      	beq.n	b89c6 <_strtod_l+0x356>
   b897c:	2a4e      	cmp	r2, #78	; 0x4e
   b897e:	f47f aed9 	bne.w	b8734 <_strtod_l+0xc4>
   b8982:	499f      	ldr	r1, [pc, #636]	; (b8c00 <_strtod_l+0x590>)
   b8984:	a817      	add	r0, sp, #92	; 0x5c
   b8986:	f000 ffa7 	bl	b98d8 <__match>
   b898a:	2800      	cmp	r0, #0
   b898c:	f43f aed2 	beq.w	b8734 <_strtod_l+0xc4>
   b8990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8992:	781b      	ldrb	r3, [r3, #0]
   b8994:	2b28      	cmp	r3, #40	; 0x28
   b8996:	d12d      	bne.n	b89f4 <_strtod_l+0x384>
   b8998:	499a      	ldr	r1, [pc, #616]	; (b8c04 <_strtod_l+0x594>)
   b899a:	aa1a      	add	r2, sp, #104	; 0x68
   b899c:	a817      	add	r0, sp, #92	; 0x5c
   b899e:	f000 ffaf 	bl	b9900 <__hexnan>
   b89a2:	2805      	cmp	r0, #5
   b89a4:	d126      	bne.n	b89f4 <_strtod_l+0x384>
   b89a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b89a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b89ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b89b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b89b4:	e6a0      	b.n	b86f8 <_strtod_l+0x88>
   b89b6:	210a      	movs	r1, #10
   b89b8:	fb01 2e0e 	mla	lr, r1, lr, r2
   b89bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b89c0:	e7b9      	b.n	b8936 <_strtod_l+0x2c6>
   b89c2:	2a6e      	cmp	r2, #110	; 0x6e
   b89c4:	e7db      	b.n	b897e <_strtod_l+0x30e>
   b89c6:	4990      	ldr	r1, [pc, #576]	; (b8c08 <_strtod_l+0x598>)
   b89c8:	a817      	add	r0, sp, #92	; 0x5c
   b89ca:	f000 ff85 	bl	b98d8 <__match>
   b89ce:	2800      	cmp	r0, #0
   b89d0:	f43f aeb0 	beq.w	b8734 <_strtod_l+0xc4>
   b89d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b89d6:	498d      	ldr	r1, [pc, #564]	; (b8c0c <_strtod_l+0x59c>)
   b89d8:	3b01      	subs	r3, #1
   b89da:	a817      	add	r0, sp, #92	; 0x5c
   b89dc:	9317      	str	r3, [sp, #92]	; 0x5c
   b89de:	f000 ff7b 	bl	b98d8 <__match>
   b89e2:	b910      	cbnz	r0, b89ea <_strtod_l+0x37a>
   b89e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b89e6:	3301      	adds	r3, #1
   b89e8:	9317      	str	r3, [sp, #92]	; 0x5c
   b89ea:	f8df b230 	ldr.w	fp, [pc, #560]	; b8c1c <_strtod_l+0x5ac>
   b89ee:	f04f 0a00 	mov.w	sl, #0
   b89f2:	e681      	b.n	b86f8 <_strtod_l+0x88>
   b89f4:	4886      	ldr	r0, [pc, #536]	; (b8c10 <_strtod_l+0x5a0>)
   b89f6:	f001 fd07 	bl	ba408 <nan>
   b89fa:	ec5b ab10 	vmov	sl, fp, d0
   b89fe:	e67b      	b.n	b86f8 <_strtod_l+0x88>
   b8a00:	9b05      	ldr	r3, [sp, #20]
   b8a02:	9807      	ldr	r0, [sp, #28]
   b8a04:	1af3      	subs	r3, r6, r3
   b8a06:	2f00      	cmp	r7, #0
   b8a08:	bf08      	it	eq
   b8a0a:	462f      	moveq	r7, r5
   b8a0c:	2d10      	cmp	r5, #16
   b8a0e:	9306      	str	r3, [sp, #24]
   b8a10:	46a8      	mov	r8, r5
   b8a12:	bfa8      	it	ge
   b8a14:	f04f 0810 	movge.w	r8, #16
   b8a18:	f7fb fc44 	bl	b42a4 <__aeabi_ui2d>
   b8a1c:	2d09      	cmp	r5, #9
   b8a1e:	4682      	mov	sl, r0
   b8a20:	468b      	mov	fp, r1
   b8a22:	dd13      	ble.n	b8a4c <_strtod_l+0x3dc>
   b8a24:	4b7b      	ldr	r3, [pc, #492]	; (b8c14 <_strtod_l+0x5a4>)
   b8a26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8a2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8a2e:	f7fb fcb3 	bl	b4398 <__aeabi_dmul>
   b8a32:	4682      	mov	sl, r0
   b8a34:	4648      	mov	r0, r9
   b8a36:	468b      	mov	fp, r1
   b8a38:	f7fb fc34 	bl	b42a4 <__aeabi_ui2d>
   b8a3c:	4602      	mov	r2, r0
   b8a3e:	460b      	mov	r3, r1
   b8a40:	4650      	mov	r0, sl
   b8a42:	4659      	mov	r1, fp
   b8a44:	f7fb faf2 	bl	b402c <__adddf3>
   b8a48:	4682      	mov	sl, r0
   b8a4a:	468b      	mov	fp, r1
   b8a4c:	2d0f      	cmp	r5, #15
   b8a4e:	dc38      	bgt.n	b8ac2 <_strtod_l+0x452>
   b8a50:	9b06      	ldr	r3, [sp, #24]
   b8a52:	2b00      	cmp	r3, #0
   b8a54:	f43f ae50 	beq.w	b86f8 <_strtod_l+0x88>
   b8a58:	dd24      	ble.n	b8aa4 <_strtod_l+0x434>
   b8a5a:	2b16      	cmp	r3, #22
   b8a5c:	dc0b      	bgt.n	b8a76 <_strtod_l+0x406>
   b8a5e:	496d      	ldr	r1, [pc, #436]	; (b8c14 <_strtod_l+0x5a4>)
   b8a60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8a64:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8a68:	4652      	mov	r2, sl
   b8a6a:	465b      	mov	r3, fp
   b8a6c:	f7fb fc94 	bl	b4398 <__aeabi_dmul>
   b8a70:	4682      	mov	sl, r0
   b8a72:	468b      	mov	fp, r1
   b8a74:	e640      	b.n	b86f8 <_strtod_l+0x88>
   b8a76:	9a06      	ldr	r2, [sp, #24]
   b8a78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b8a7c:	4293      	cmp	r3, r2
   b8a7e:	db20      	blt.n	b8ac2 <_strtod_l+0x452>
   b8a80:	4c64      	ldr	r4, [pc, #400]	; (b8c14 <_strtod_l+0x5a4>)
   b8a82:	f1c5 050f 	rsb	r5, r5, #15
   b8a86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b8a8a:	4652      	mov	r2, sl
   b8a8c:	465b      	mov	r3, fp
   b8a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8a92:	f7fb fc81 	bl	b4398 <__aeabi_dmul>
   b8a96:	9b06      	ldr	r3, [sp, #24]
   b8a98:	1b5d      	subs	r5, r3, r5
   b8a9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b8a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b8aa2:	e7e3      	b.n	b8a6c <_strtod_l+0x3fc>
   b8aa4:	9b06      	ldr	r3, [sp, #24]
   b8aa6:	3316      	adds	r3, #22
   b8aa8:	db0b      	blt.n	b8ac2 <_strtod_l+0x452>
   b8aaa:	9b05      	ldr	r3, [sp, #20]
   b8aac:	1b9e      	subs	r6, r3, r6
   b8aae:	4b59      	ldr	r3, [pc, #356]	; (b8c14 <_strtod_l+0x5a4>)
   b8ab0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b8ab4:	e9d6 2300 	ldrd	r2, r3, [r6]
   b8ab8:	4650      	mov	r0, sl
   b8aba:	4659      	mov	r1, fp
   b8abc:	f7fb fd96 	bl	b45ec <__aeabi_ddiv>
   b8ac0:	e7d6      	b.n	b8a70 <_strtod_l+0x400>
   b8ac2:	9b06      	ldr	r3, [sp, #24]
   b8ac4:	eba5 0808 	sub.w	r8, r5, r8
   b8ac8:	4498      	add	r8, r3
   b8aca:	f1b8 0f00 	cmp.w	r8, #0
   b8ace:	dd74      	ble.n	b8bba <_strtod_l+0x54a>
   b8ad0:	f018 030f 	ands.w	r3, r8, #15
   b8ad4:	d00a      	beq.n	b8aec <_strtod_l+0x47c>
   b8ad6:	494f      	ldr	r1, [pc, #316]	; (b8c14 <_strtod_l+0x5a4>)
   b8ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8adc:	4652      	mov	r2, sl
   b8ade:	465b      	mov	r3, fp
   b8ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8ae4:	f7fb fc58 	bl	b4398 <__aeabi_dmul>
   b8ae8:	4682      	mov	sl, r0
   b8aea:	468b      	mov	fp, r1
   b8aec:	f038 080f 	bics.w	r8, r8, #15
   b8af0:	d04f      	beq.n	b8b92 <_strtod_l+0x522>
   b8af2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b8af6:	dd22      	ble.n	b8b3e <_strtod_l+0x4ce>
   b8af8:	2500      	movs	r5, #0
   b8afa:	462e      	mov	r6, r5
   b8afc:	9507      	str	r5, [sp, #28]
   b8afe:	9505      	str	r5, [sp, #20]
   b8b00:	2322      	movs	r3, #34	; 0x22
   b8b02:	f8df b118 	ldr.w	fp, [pc, #280]	; b8c1c <_strtod_l+0x5ac>
   b8b06:	6023      	str	r3, [r4, #0]
   b8b08:	f04f 0a00 	mov.w	sl, #0
   b8b0c:	9b07      	ldr	r3, [sp, #28]
   b8b0e:	2b00      	cmp	r3, #0
   b8b10:	f43f adf2 	beq.w	b86f8 <_strtod_l+0x88>
   b8b14:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8b16:	4620      	mov	r0, r4
   b8b18:	f000 ffe4 	bl	b9ae4 <_Bfree>
   b8b1c:	9905      	ldr	r1, [sp, #20]
   b8b1e:	4620      	mov	r0, r4
   b8b20:	f000 ffe0 	bl	b9ae4 <_Bfree>
   b8b24:	4631      	mov	r1, r6
   b8b26:	4620      	mov	r0, r4
   b8b28:	f000 ffdc 	bl	b9ae4 <_Bfree>
   b8b2c:	9907      	ldr	r1, [sp, #28]
   b8b2e:	4620      	mov	r0, r4
   b8b30:	f000 ffd8 	bl	b9ae4 <_Bfree>
   b8b34:	4629      	mov	r1, r5
   b8b36:	4620      	mov	r0, r4
   b8b38:	f000 ffd4 	bl	b9ae4 <_Bfree>
   b8b3c:	e5dc      	b.n	b86f8 <_strtod_l+0x88>
   b8b3e:	4b36      	ldr	r3, [pc, #216]	; (b8c18 <_strtod_l+0x5a8>)
   b8b40:	9304      	str	r3, [sp, #16]
   b8b42:	2300      	movs	r3, #0
   b8b44:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8b48:	4650      	mov	r0, sl
   b8b4a:	4659      	mov	r1, fp
   b8b4c:	4699      	mov	r9, r3
   b8b4e:	f1b8 0f01 	cmp.w	r8, #1
   b8b52:	dc21      	bgt.n	b8b98 <_strtod_l+0x528>
   b8b54:	b10b      	cbz	r3, b8b5a <_strtod_l+0x4ea>
   b8b56:	4682      	mov	sl, r0
   b8b58:	468b      	mov	fp, r1
   b8b5a:	4b2f      	ldr	r3, [pc, #188]	; (b8c18 <_strtod_l+0x5a8>)
   b8b5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8b60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8b64:	4652      	mov	r2, sl
   b8b66:	465b      	mov	r3, fp
   b8b68:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8b6c:	f7fb fc14 	bl	b4398 <__aeabi_dmul>
   b8b70:	4b2a      	ldr	r3, [pc, #168]	; (b8c1c <_strtod_l+0x5ac>)
   b8b72:	460a      	mov	r2, r1
   b8b74:	400b      	ands	r3, r1
   b8b76:	492a      	ldr	r1, [pc, #168]	; (b8c20 <_strtod_l+0x5b0>)
   b8b78:	428b      	cmp	r3, r1
   b8b7a:	4682      	mov	sl, r0
   b8b7c:	d8bc      	bhi.n	b8af8 <_strtod_l+0x488>
   b8b7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8b82:	428b      	cmp	r3, r1
   b8b84:	bf86      	itte	hi
   b8b86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8c24 <_strtod_l+0x5b4>
   b8b8a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b8b8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b8b92:	2300      	movs	r3, #0
   b8b94:	9304      	str	r3, [sp, #16]
   b8b96:	e084      	b.n	b8ca2 <_strtod_l+0x632>
   b8b98:	f018 0f01 	tst.w	r8, #1
   b8b9c:	d005      	beq.n	b8baa <_strtod_l+0x53a>
   b8b9e:	9b04      	ldr	r3, [sp, #16]
   b8ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ba4:	f7fb fbf8 	bl	b4398 <__aeabi_dmul>
   b8ba8:	2301      	movs	r3, #1
   b8baa:	9a04      	ldr	r2, [sp, #16]
   b8bac:	3208      	adds	r2, #8
   b8bae:	f109 0901 	add.w	r9, r9, #1
   b8bb2:	ea4f 0868 	mov.w	r8, r8, asr #1
   b8bb6:	9204      	str	r2, [sp, #16]
   b8bb8:	e7c9      	b.n	b8b4e <_strtod_l+0x4de>
   b8bba:	d0ea      	beq.n	b8b92 <_strtod_l+0x522>
   b8bbc:	f1c8 0800 	rsb	r8, r8, #0
   b8bc0:	f018 020f 	ands.w	r2, r8, #15
   b8bc4:	d00a      	beq.n	b8bdc <_strtod_l+0x56c>
   b8bc6:	4b13      	ldr	r3, [pc, #76]	; (b8c14 <_strtod_l+0x5a4>)
   b8bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8bcc:	4650      	mov	r0, sl
   b8bce:	4659      	mov	r1, fp
   b8bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8bd4:	f7fb fd0a 	bl	b45ec <__aeabi_ddiv>
   b8bd8:	4682      	mov	sl, r0
   b8bda:	468b      	mov	fp, r1
   b8bdc:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8be0:	d0d7      	beq.n	b8b92 <_strtod_l+0x522>
   b8be2:	f1b8 0f1f 	cmp.w	r8, #31
   b8be6:	dd1f      	ble.n	b8c28 <_strtod_l+0x5b8>
   b8be8:	2500      	movs	r5, #0
   b8bea:	462e      	mov	r6, r5
   b8bec:	9507      	str	r5, [sp, #28]
   b8bee:	9505      	str	r5, [sp, #20]
   b8bf0:	2322      	movs	r3, #34	; 0x22
   b8bf2:	f04f 0a00 	mov.w	sl, #0
   b8bf6:	f04f 0b00 	mov.w	fp, #0
   b8bfa:	6023      	str	r3, [r4, #0]
   b8bfc:	e786      	b.n	b8b0c <_strtod_l+0x49c>
   b8bfe:	bf00      	nop
   b8c00:	000bb0c9 	.word	0x000bb0c9
   b8c04:	000bb398 	.word	0x000bb398
   b8c08:	000bb0cd 	.word	0x000bb0cd
   b8c0c:	000bb37d 	.word	0x000bb37d
   b8c10:	000baa34 	.word	0x000baa34
   b8c14:	000bb5e8 	.word	0x000bb5e8
   b8c18:	000bb5c0 	.word	0x000bb5c0
   b8c1c:	7ff00000 	.word	0x7ff00000
   b8c20:	7ca00000 	.word	0x7ca00000
   b8c24:	7fefffff 	.word	0x7fefffff
   b8c28:	f018 0310 	ands.w	r3, r8, #16
   b8c2c:	bf18      	it	ne
   b8c2e:	236a      	movne	r3, #106	; 0x6a
   b8c30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8fe0 <_strtod_l+0x970>
   b8c34:	9304      	str	r3, [sp, #16]
   b8c36:	4650      	mov	r0, sl
   b8c38:	4659      	mov	r1, fp
   b8c3a:	2300      	movs	r3, #0
   b8c3c:	f018 0f01 	tst.w	r8, #1
   b8c40:	d004      	beq.n	b8c4c <_strtod_l+0x5dc>
   b8c42:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8c46:	f7fb fba7 	bl	b4398 <__aeabi_dmul>
   b8c4a:	2301      	movs	r3, #1
   b8c4c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8c50:	f109 0908 	add.w	r9, r9, #8
   b8c54:	d1f2      	bne.n	b8c3c <_strtod_l+0x5cc>
   b8c56:	b10b      	cbz	r3, b8c5c <_strtod_l+0x5ec>
   b8c58:	4682      	mov	sl, r0
   b8c5a:	468b      	mov	fp, r1
   b8c5c:	9b04      	ldr	r3, [sp, #16]
   b8c5e:	b1c3      	cbz	r3, b8c92 <_strtod_l+0x622>
   b8c60:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8c64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8c68:	2b00      	cmp	r3, #0
   b8c6a:	4659      	mov	r1, fp
   b8c6c:	dd11      	ble.n	b8c92 <_strtod_l+0x622>
   b8c6e:	2b1f      	cmp	r3, #31
   b8c70:	f340 8124 	ble.w	b8ebc <_strtod_l+0x84c>
   b8c74:	2b34      	cmp	r3, #52	; 0x34
   b8c76:	bfde      	ittt	le
   b8c78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8c7c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b8c80:	fa03 f202 	lslle.w	r2, r3, r2
   b8c84:	f04f 0a00 	mov.w	sl, #0
   b8c88:	bfcc      	ite	gt
   b8c8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8c8e:	ea02 0b01 	andle.w	fp, r2, r1
   b8c92:	2200      	movs	r2, #0
   b8c94:	2300      	movs	r3, #0
   b8c96:	4650      	mov	r0, sl
   b8c98:	4659      	mov	r1, fp
   b8c9a:	f7fb fde5 	bl	b4868 <__aeabi_dcmpeq>
   b8c9e:	2800      	cmp	r0, #0
   b8ca0:	d1a2      	bne.n	b8be8 <_strtod_l+0x578>
   b8ca2:	9b07      	ldr	r3, [sp, #28]
   b8ca4:	9300      	str	r3, [sp, #0]
   b8ca6:	9908      	ldr	r1, [sp, #32]
   b8ca8:	462b      	mov	r3, r5
   b8caa:	463a      	mov	r2, r7
   b8cac:	4620      	mov	r0, r4
   b8cae:	f000 ff81 	bl	b9bb4 <__s2b>
   b8cb2:	9007      	str	r0, [sp, #28]
   b8cb4:	2800      	cmp	r0, #0
   b8cb6:	f43f af1f 	beq.w	b8af8 <_strtod_l+0x488>
   b8cba:	9b05      	ldr	r3, [sp, #20]
   b8cbc:	1b9e      	subs	r6, r3, r6
   b8cbe:	9b06      	ldr	r3, [sp, #24]
   b8cc0:	2b00      	cmp	r3, #0
   b8cc2:	bfb4      	ite	lt
   b8cc4:	4633      	movlt	r3, r6
   b8cc6:	2300      	movge	r3, #0
   b8cc8:	930c      	str	r3, [sp, #48]	; 0x30
   b8cca:	9b06      	ldr	r3, [sp, #24]
   b8ccc:	2500      	movs	r5, #0
   b8cce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8cd2:	9312      	str	r3, [sp, #72]	; 0x48
   b8cd4:	462e      	mov	r6, r5
   b8cd6:	9b07      	ldr	r3, [sp, #28]
   b8cd8:	4620      	mov	r0, r4
   b8cda:	6859      	ldr	r1, [r3, #4]
   b8cdc:	f000 fec2 	bl	b9a64 <_Balloc>
   b8ce0:	9005      	str	r0, [sp, #20]
   b8ce2:	2800      	cmp	r0, #0
   b8ce4:	f43f af0c 	beq.w	b8b00 <_strtod_l+0x490>
   b8ce8:	9b07      	ldr	r3, [sp, #28]
   b8cea:	691a      	ldr	r2, [r3, #16]
   b8cec:	3202      	adds	r2, #2
   b8cee:	f103 010c 	add.w	r1, r3, #12
   b8cf2:	0092      	lsls	r2, r2, #2
   b8cf4:	300c      	adds	r0, #12
   b8cf6:	f7ff fc46 	bl	b8586 <memcpy>
   b8cfa:	ec4b ab10 	vmov	d0, sl, fp
   b8cfe:	aa1a      	add	r2, sp, #104	; 0x68
   b8d00:	a919      	add	r1, sp, #100	; 0x64
   b8d02:	4620      	mov	r0, r4
   b8d04:	f001 fa9c 	bl	ba240 <__d2b>
   b8d08:	ec4b ab18 	vmov	d8, sl, fp
   b8d0c:	9018      	str	r0, [sp, #96]	; 0x60
   b8d0e:	2800      	cmp	r0, #0
   b8d10:	f43f aef6 	beq.w	b8b00 <_strtod_l+0x490>
   b8d14:	2101      	movs	r1, #1
   b8d16:	4620      	mov	r0, r4
   b8d18:	f000 ffe6 	bl	b9ce8 <__i2b>
   b8d1c:	4606      	mov	r6, r0
   b8d1e:	2800      	cmp	r0, #0
   b8d20:	f43f aeee 	beq.w	b8b00 <_strtod_l+0x490>
   b8d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8d26:	9904      	ldr	r1, [sp, #16]
   b8d28:	2b00      	cmp	r3, #0
   b8d2a:	bfab      	itete	ge
   b8d2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8d2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8d30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8d32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8d36:	bfac      	ite	ge
   b8d38:	eb03 0902 	addge.w	r9, r3, r2
   b8d3c:	1ad7      	sublt	r7, r2, r3
   b8d3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8d40:	eba3 0801 	sub.w	r8, r3, r1
   b8d44:	4490      	add	r8, r2
   b8d46:	4ba1      	ldr	r3, [pc, #644]	; (b8fcc <_strtod_l+0x95c>)
   b8d48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8d4c:	4598      	cmp	r8, r3
   b8d4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8d52:	f280 80c7 	bge.w	b8ee4 <_strtod_l+0x874>
   b8d56:	eba3 0308 	sub.w	r3, r3, r8
   b8d5a:	2b1f      	cmp	r3, #31
   b8d5c:	eba2 0203 	sub.w	r2, r2, r3
   b8d60:	f04f 0101 	mov.w	r1, #1
   b8d64:	f300 80b1 	bgt.w	b8eca <_strtod_l+0x85a>
   b8d68:	fa01 f303 	lsl.w	r3, r1, r3
   b8d6c:	930d      	str	r3, [sp, #52]	; 0x34
   b8d6e:	2300      	movs	r3, #0
   b8d70:	9308      	str	r3, [sp, #32]
   b8d72:	eb09 0802 	add.w	r8, r9, r2
   b8d76:	9b04      	ldr	r3, [sp, #16]
   b8d78:	45c1      	cmp	r9, r8
   b8d7a:	4417      	add	r7, r2
   b8d7c:	441f      	add	r7, r3
   b8d7e:	464b      	mov	r3, r9
   b8d80:	bfa8      	it	ge
   b8d82:	4643      	movge	r3, r8
   b8d84:	42bb      	cmp	r3, r7
   b8d86:	bfa8      	it	ge
   b8d88:	463b      	movge	r3, r7
   b8d8a:	2b00      	cmp	r3, #0
   b8d8c:	bfc2      	ittt	gt
   b8d8e:	eba8 0803 	subgt.w	r8, r8, r3
   b8d92:	1aff      	subgt	r7, r7, r3
   b8d94:	eba9 0903 	subgt.w	r9, r9, r3
   b8d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8d9a:	2b00      	cmp	r3, #0
   b8d9c:	dd17      	ble.n	b8dce <_strtod_l+0x75e>
   b8d9e:	4631      	mov	r1, r6
   b8da0:	461a      	mov	r2, r3
   b8da2:	4620      	mov	r0, r4
   b8da4:	f001 f860 	bl	b9e68 <__pow5mult>
   b8da8:	4606      	mov	r6, r0
   b8daa:	2800      	cmp	r0, #0
   b8dac:	f43f aea8 	beq.w	b8b00 <_strtod_l+0x490>
   b8db0:	4601      	mov	r1, r0
   b8db2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8db4:	4620      	mov	r0, r4
   b8db6:	f000 ffad 	bl	b9d14 <__multiply>
   b8dba:	900b      	str	r0, [sp, #44]	; 0x2c
   b8dbc:	2800      	cmp	r0, #0
   b8dbe:	f43f ae9f 	beq.w	b8b00 <_strtod_l+0x490>
   b8dc2:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8dc4:	4620      	mov	r0, r4
   b8dc6:	f000 fe8d 	bl	b9ae4 <_Bfree>
   b8dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8dcc:	9318      	str	r3, [sp, #96]	; 0x60
   b8dce:	f1b8 0f00 	cmp.w	r8, #0
   b8dd2:	f300 808c 	bgt.w	b8eee <_strtod_l+0x87e>
   b8dd6:	9b06      	ldr	r3, [sp, #24]
   b8dd8:	2b00      	cmp	r3, #0
   b8dda:	dd08      	ble.n	b8dee <_strtod_l+0x77e>
   b8ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8dde:	9905      	ldr	r1, [sp, #20]
   b8de0:	4620      	mov	r0, r4
   b8de2:	f001 f841 	bl	b9e68 <__pow5mult>
   b8de6:	9005      	str	r0, [sp, #20]
   b8de8:	2800      	cmp	r0, #0
   b8dea:	f43f ae89 	beq.w	b8b00 <_strtod_l+0x490>
   b8dee:	2f00      	cmp	r7, #0
   b8df0:	dd08      	ble.n	b8e04 <_strtod_l+0x794>
   b8df2:	9905      	ldr	r1, [sp, #20]
   b8df4:	463a      	mov	r2, r7
   b8df6:	4620      	mov	r0, r4
   b8df8:	f001 f890 	bl	b9f1c <__lshift>
   b8dfc:	9005      	str	r0, [sp, #20]
   b8dfe:	2800      	cmp	r0, #0
   b8e00:	f43f ae7e 	beq.w	b8b00 <_strtod_l+0x490>
   b8e04:	f1b9 0f00 	cmp.w	r9, #0
   b8e08:	dd08      	ble.n	b8e1c <_strtod_l+0x7ac>
   b8e0a:	4631      	mov	r1, r6
   b8e0c:	464a      	mov	r2, r9
   b8e0e:	4620      	mov	r0, r4
   b8e10:	f001 f884 	bl	b9f1c <__lshift>
   b8e14:	4606      	mov	r6, r0
   b8e16:	2800      	cmp	r0, #0
   b8e18:	f43f ae72 	beq.w	b8b00 <_strtod_l+0x490>
   b8e1c:	9a05      	ldr	r2, [sp, #20]
   b8e1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8e20:	4620      	mov	r0, r4
   b8e22:	f001 f907 	bl	ba034 <__mdiff>
   b8e26:	4605      	mov	r5, r0
   b8e28:	2800      	cmp	r0, #0
   b8e2a:	f43f ae69 	beq.w	b8b00 <_strtod_l+0x490>
   b8e2e:	68c3      	ldr	r3, [r0, #12]
   b8e30:	930b      	str	r3, [sp, #44]	; 0x2c
   b8e32:	2300      	movs	r3, #0
   b8e34:	60c3      	str	r3, [r0, #12]
   b8e36:	4631      	mov	r1, r6
   b8e38:	f001 f8e0 	bl	b9ffc <__mcmp>
   b8e3c:	2800      	cmp	r0, #0
   b8e3e:	da60      	bge.n	b8f02 <_strtod_l+0x892>
   b8e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8e42:	ea53 030a 	orrs.w	r3, r3, sl
   b8e46:	f040 8082 	bne.w	b8f4e <_strtod_l+0x8de>
   b8e4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8e4e:	2b00      	cmp	r3, #0
   b8e50:	d17d      	bne.n	b8f4e <_strtod_l+0x8de>
   b8e52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8e56:	0d1b      	lsrs	r3, r3, #20
   b8e58:	051b      	lsls	r3, r3, #20
   b8e5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8e5e:	d976      	bls.n	b8f4e <_strtod_l+0x8de>
   b8e60:	696b      	ldr	r3, [r5, #20]
   b8e62:	b913      	cbnz	r3, b8e6a <_strtod_l+0x7fa>
   b8e64:	692b      	ldr	r3, [r5, #16]
   b8e66:	2b01      	cmp	r3, #1
   b8e68:	dd71      	ble.n	b8f4e <_strtod_l+0x8de>
   b8e6a:	4629      	mov	r1, r5
   b8e6c:	2201      	movs	r2, #1
   b8e6e:	4620      	mov	r0, r4
   b8e70:	f001 f854 	bl	b9f1c <__lshift>
   b8e74:	4631      	mov	r1, r6
   b8e76:	4605      	mov	r5, r0
   b8e78:	f001 f8c0 	bl	b9ffc <__mcmp>
   b8e7c:	2800      	cmp	r0, #0
   b8e7e:	dd66      	ble.n	b8f4e <_strtod_l+0x8de>
   b8e80:	9904      	ldr	r1, [sp, #16]
   b8e82:	4a53      	ldr	r2, [pc, #332]	; (b8fd0 <_strtod_l+0x960>)
   b8e84:	465b      	mov	r3, fp
   b8e86:	2900      	cmp	r1, #0
   b8e88:	f000 8081 	beq.w	b8f8e <_strtod_l+0x91e>
   b8e8c:	ea02 010b 	and.w	r1, r2, fp
   b8e90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8e94:	dc7b      	bgt.n	b8f8e <_strtod_l+0x91e>
   b8e96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8e9a:	f77f aea9 	ble.w	b8bf0 <_strtod_l+0x580>
   b8e9e:	4b4d      	ldr	r3, [pc, #308]	; (b8fd4 <_strtod_l+0x964>)
   b8ea0:	4650      	mov	r0, sl
   b8ea2:	4659      	mov	r1, fp
   b8ea4:	2200      	movs	r2, #0
   b8ea6:	f7fb fa77 	bl	b4398 <__aeabi_dmul>
   b8eaa:	460b      	mov	r3, r1
   b8eac:	4303      	orrs	r3, r0
   b8eae:	bf08      	it	eq
   b8eb0:	2322      	moveq	r3, #34	; 0x22
   b8eb2:	4682      	mov	sl, r0
   b8eb4:	468b      	mov	fp, r1
   b8eb6:	bf08      	it	eq
   b8eb8:	6023      	streq	r3, [r4, #0]
   b8eba:	e62b      	b.n	b8b14 <_strtod_l+0x4a4>
   b8ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8ec0:	fa02 f303 	lsl.w	r3, r2, r3
   b8ec4:	ea03 0a0a 	and.w	sl, r3, sl
   b8ec8:	e6e3      	b.n	b8c92 <_strtod_l+0x622>
   b8eca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8ece:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8ed2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8ed6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8eda:	fa01 f308 	lsl.w	r3, r1, r8
   b8ede:	9308      	str	r3, [sp, #32]
   b8ee0:	910d      	str	r1, [sp, #52]	; 0x34
   b8ee2:	e746      	b.n	b8d72 <_strtod_l+0x702>
   b8ee4:	2300      	movs	r3, #0
   b8ee6:	9308      	str	r3, [sp, #32]
   b8ee8:	2301      	movs	r3, #1
   b8eea:	930d      	str	r3, [sp, #52]	; 0x34
   b8eec:	e741      	b.n	b8d72 <_strtod_l+0x702>
   b8eee:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8ef0:	4642      	mov	r2, r8
   b8ef2:	4620      	mov	r0, r4
   b8ef4:	f001 f812 	bl	b9f1c <__lshift>
   b8ef8:	9018      	str	r0, [sp, #96]	; 0x60
   b8efa:	2800      	cmp	r0, #0
   b8efc:	f47f af6b 	bne.w	b8dd6 <_strtod_l+0x766>
   b8f00:	e5fe      	b.n	b8b00 <_strtod_l+0x490>
   b8f02:	465f      	mov	r7, fp
   b8f04:	d16e      	bne.n	b8fe4 <_strtod_l+0x974>
   b8f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8f0c:	b342      	cbz	r2, b8f60 <_strtod_l+0x8f0>
   b8f0e:	4a32      	ldr	r2, [pc, #200]	; (b8fd8 <_strtod_l+0x968>)
   b8f10:	4293      	cmp	r3, r2
   b8f12:	d128      	bne.n	b8f66 <_strtod_l+0x8f6>
   b8f14:	9b04      	ldr	r3, [sp, #16]
   b8f16:	4651      	mov	r1, sl
   b8f18:	b1eb      	cbz	r3, b8f56 <_strtod_l+0x8e6>
   b8f1a:	4b2d      	ldr	r3, [pc, #180]	; (b8fd0 <_strtod_l+0x960>)
   b8f1c:	403b      	ands	r3, r7
   b8f1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8f26:	d819      	bhi.n	b8f5c <_strtod_l+0x8ec>
   b8f28:	0d1b      	lsrs	r3, r3, #20
   b8f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8f2e:	fa02 f303 	lsl.w	r3, r2, r3
   b8f32:	4299      	cmp	r1, r3
   b8f34:	d117      	bne.n	b8f66 <_strtod_l+0x8f6>
   b8f36:	4b29      	ldr	r3, [pc, #164]	; (b8fdc <_strtod_l+0x96c>)
   b8f38:	429f      	cmp	r7, r3
   b8f3a:	d102      	bne.n	b8f42 <_strtod_l+0x8d2>
   b8f3c:	3101      	adds	r1, #1
   b8f3e:	f43f addf 	beq.w	b8b00 <_strtod_l+0x490>
   b8f42:	4b23      	ldr	r3, [pc, #140]	; (b8fd0 <_strtod_l+0x960>)
   b8f44:	403b      	ands	r3, r7
   b8f46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8f4a:	f04f 0a00 	mov.w	sl, #0
   b8f4e:	9b04      	ldr	r3, [sp, #16]
   b8f50:	2b00      	cmp	r3, #0
   b8f52:	d1a4      	bne.n	b8e9e <_strtod_l+0x82e>
   b8f54:	e5de      	b.n	b8b14 <_strtod_l+0x4a4>
   b8f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8f5a:	e7ea      	b.n	b8f32 <_strtod_l+0x8c2>
   b8f5c:	4613      	mov	r3, r2
   b8f5e:	e7e8      	b.n	b8f32 <_strtod_l+0x8c2>
   b8f60:	ea53 030a 	orrs.w	r3, r3, sl
   b8f64:	d08c      	beq.n	b8e80 <_strtod_l+0x810>
   b8f66:	9b08      	ldr	r3, [sp, #32]
   b8f68:	b1db      	cbz	r3, b8fa2 <_strtod_l+0x932>
   b8f6a:	423b      	tst	r3, r7
   b8f6c:	d0ef      	beq.n	b8f4e <_strtod_l+0x8de>
   b8f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8f70:	9a04      	ldr	r2, [sp, #16]
   b8f72:	4650      	mov	r0, sl
   b8f74:	4659      	mov	r1, fp
   b8f76:	b1c3      	cbz	r3, b8faa <_strtod_l+0x93a>
   b8f78:	f7ff fb5e 	bl	b8638 <sulp>
   b8f7c:	4602      	mov	r2, r0
   b8f7e:	460b      	mov	r3, r1
   b8f80:	ec51 0b18 	vmov	r0, r1, d8
   b8f84:	f7fb f852 	bl	b402c <__adddf3>
   b8f88:	4682      	mov	sl, r0
   b8f8a:	468b      	mov	fp, r1
   b8f8c:	e7df      	b.n	b8f4e <_strtod_l+0x8de>
   b8f8e:	4013      	ands	r3, r2
   b8f90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8f94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8f98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8f9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8fa0:	e7d5      	b.n	b8f4e <_strtod_l+0x8de>
   b8fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8fa4:	ea13 0f0a 	tst.w	r3, sl
   b8fa8:	e7e0      	b.n	b8f6c <_strtod_l+0x8fc>
   b8faa:	f7ff fb45 	bl	b8638 <sulp>
   b8fae:	4602      	mov	r2, r0
   b8fb0:	460b      	mov	r3, r1
   b8fb2:	ec51 0b18 	vmov	r0, r1, d8
   b8fb6:	f7fb f837 	bl	b4028 <__aeabi_dsub>
   b8fba:	2200      	movs	r2, #0
   b8fbc:	2300      	movs	r3, #0
   b8fbe:	4682      	mov	sl, r0
   b8fc0:	468b      	mov	fp, r1
   b8fc2:	f7fb fc51 	bl	b4868 <__aeabi_dcmpeq>
   b8fc6:	2800      	cmp	r0, #0
   b8fc8:	d0c1      	beq.n	b8f4e <_strtod_l+0x8de>
   b8fca:	e611      	b.n	b8bf0 <_strtod_l+0x580>
   b8fcc:	fffffc02 	.word	0xfffffc02
   b8fd0:	7ff00000 	.word	0x7ff00000
   b8fd4:	39500000 	.word	0x39500000
   b8fd8:	000fffff 	.word	0x000fffff
   b8fdc:	7fefffff 	.word	0x7fefffff
   b8fe0:	000bb3b0 	.word	0x000bb3b0
   b8fe4:	4631      	mov	r1, r6
   b8fe6:	4628      	mov	r0, r5
   b8fe8:	f001 f986 	bl	ba2f8 <__ratio>
   b8fec:	ec59 8b10 	vmov	r8, r9, d0
   b8ff0:	ee10 0a10 	vmov	r0, s0
   b8ff4:	2200      	movs	r2, #0
   b8ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8ffa:	4649      	mov	r1, r9
   b8ffc:	f7fb fc48 	bl	b4890 <__aeabi_dcmple>
   b9000:	2800      	cmp	r0, #0
   b9002:	d07a      	beq.n	b90fa <_strtod_l+0xa8a>
   b9004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9006:	2b00      	cmp	r3, #0
   b9008:	d04a      	beq.n	b90a0 <_strtod_l+0xa30>
   b900a:	4b95      	ldr	r3, [pc, #596]	; (b9260 <_strtod_l+0xbf0>)
   b900c:	2200      	movs	r2, #0
   b900e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9012:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9260 <_strtod_l+0xbf0>
   b9016:	f04f 0800 	mov.w	r8, #0
   b901a:	4b92      	ldr	r3, [pc, #584]	; (b9264 <_strtod_l+0xbf4>)
   b901c:	403b      	ands	r3, r7
   b901e:	930d      	str	r3, [sp, #52]	; 0x34
   b9020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9022:	4b91      	ldr	r3, [pc, #580]	; (b9268 <_strtod_l+0xbf8>)
   b9024:	429a      	cmp	r2, r3
   b9026:	f040 80b0 	bne.w	b918a <_strtod_l+0xb1a>
   b902a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b902e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9032:	ec4b ab10 	vmov	d0, sl, fp
   b9036:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b903a:	f001 f885 	bl	ba148 <__ulp>
   b903e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9042:	ec53 2b10 	vmov	r2, r3, d0
   b9046:	f7fb f9a7 	bl	b4398 <__aeabi_dmul>
   b904a:	4652      	mov	r2, sl
   b904c:	465b      	mov	r3, fp
   b904e:	f7fa ffed 	bl	b402c <__adddf3>
   b9052:	460b      	mov	r3, r1
   b9054:	4983      	ldr	r1, [pc, #524]	; (b9264 <_strtod_l+0xbf4>)
   b9056:	4a85      	ldr	r2, [pc, #532]	; (b926c <_strtod_l+0xbfc>)
   b9058:	4019      	ands	r1, r3
   b905a:	4291      	cmp	r1, r2
   b905c:	4682      	mov	sl, r0
   b905e:	d960      	bls.n	b9122 <_strtod_l+0xab2>
   b9060:	ee18 3a90 	vmov	r3, s17
   b9064:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9068:	4293      	cmp	r3, r2
   b906a:	d104      	bne.n	b9076 <_strtod_l+0xa06>
   b906c:	ee18 3a10 	vmov	r3, s16
   b9070:	3301      	adds	r3, #1
   b9072:	f43f ad45 	beq.w	b8b00 <_strtod_l+0x490>
   b9076:	f8df b200 	ldr.w	fp, [pc, #512]	; b9278 <_strtod_l+0xc08>
   b907a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b907e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9080:	4620      	mov	r0, r4
   b9082:	f000 fd2f 	bl	b9ae4 <_Bfree>
   b9086:	9905      	ldr	r1, [sp, #20]
   b9088:	4620      	mov	r0, r4
   b908a:	f000 fd2b 	bl	b9ae4 <_Bfree>
   b908e:	4631      	mov	r1, r6
   b9090:	4620      	mov	r0, r4
   b9092:	f000 fd27 	bl	b9ae4 <_Bfree>
   b9096:	4629      	mov	r1, r5
   b9098:	4620      	mov	r0, r4
   b909a:	f000 fd23 	bl	b9ae4 <_Bfree>
   b909e:	e61a      	b.n	b8cd6 <_strtod_l+0x666>
   b90a0:	f1ba 0f00 	cmp.w	sl, #0
   b90a4:	d11b      	bne.n	b90de <_strtod_l+0xa6e>
   b90a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b90aa:	b9f3      	cbnz	r3, b90ea <_strtod_l+0xa7a>
   b90ac:	4b6c      	ldr	r3, [pc, #432]	; (b9260 <_strtod_l+0xbf0>)
   b90ae:	2200      	movs	r2, #0
   b90b0:	4640      	mov	r0, r8
   b90b2:	4649      	mov	r1, r9
   b90b4:	f7fb fbe2 	bl	b487c <__aeabi_dcmplt>
   b90b8:	b9d0      	cbnz	r0, b90f0 <_strtod_l+0xa80>
   b90ba:	4640      	mov	r0, r8
   b90bc:	4649      	mov	r1, r9
   b90be:	4b6c      	ldr	r3, [pc, #432]	; (b9270 <_strtod_l+0xc00>)
   b90c0:	2200      	movs	r2, #0
   b90c2:	f7fb f969 	bl	b4398 <__aeabi_dmul>
   b90c6:	4680      	mov	r8, r0
   b90c8:	4689      	mov	r9, r1
   b90ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b90ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b90d2:	9315      	str	r3, [sp, #84]	; 0x54
   b90d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b90d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b90dc:	e79d      	b.n	b901a <_strtod_l+0x9aa>
   b90de:	f1ba 0f01 	cmp.w	sl, #1
   b90e2:	d102      	bne.n	b90ea <_strtod_l+0xa7a>
   b90e4:	2f00      	cmp	r7, #0
   b90e6:	f43f ad83 	beq.w	b8bf0 <_strtod_l+0x580>
   b90ea:	4b62      	ldr	r3, [pc, #392]	; (b9274 <_strtod_l+0xc04>)
   b90ec:	2200      	movs	r2, #0
   b90ee:	e78e      	b.n	b900e <_strtod_l+0x99e>
   b90f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9270 <_strtod_l+0xc00>
   b90f4:	f04f 0800 	mov.w	r8, #0
   b90f8:	e7e7      	b.n	b90ca <_strtod_l+0xa5a>
   b90fa:	4b5d      	ldr	r3, [pc, #372]	; (b9270 <_strtod_l+0xc00>)
   b90fc:	4640      	mov	r0, r8
   b90fe:	4649      	mov	r1, r9
   b9100:	2200      	movs	r2, #0
   b9102:	f7fb f949 	bl	b4398 <__aeabi_dmul>
   b9106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9108:	4680      	mov	r8, r0
   b910a:	4689      	mov	r9, r1
   b910c:	b933      	cbnz	r3, b911c <_strtod_l+0xaac>
   b910e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9112:	900e      	str	r0, [sp, #56]	; 0x38
   b9114:	930f      	str	r3, [sp, #60]	; 0x3c
   b9116:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b911a:	e7dd      	b.n	b90d8 <_strtod_l+0xa68>
   b911c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9120:	e7f9      	b.n	b9116 <_strtod_l+0xaa6>
   b9122:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9126:	9b04      	ldr	r3, [sp, #16]
   b9128:	2b00      	cmp	r3, #0
   b912a:	d1a8      	bne.n	b907e <_strtod_l+0xa0e>
   b912c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9132:	0d1b      	lsrs	r3, r3, #20
   b9134:	051b      	lsls	r3, r3, #20
   b9136:	429a      	cmp	r2, r3
   b9138:	d1a1      	bne.n	b907e <_strtod_l+0xa0e>
   b913a:	4640      	mov	r0, r8
   b913c:	4649      	mov	r1, r9
   b913e:	f7fb fca3 	bl	b4a88 <__aeabi_d2lz>
   b9142:	f7fb f8fb 	bl	b433c <__aeabi_l2d>
   b9146:	4602      	mov	r2, r0
   b9148:	460b      	mov	r3, r1
   b914a:	4640      	mov	r0, r8
   b914c:	4649      	mov	r1, r9
   b914e:	f7fa ff6b 	bl	b4028 <__aeabi_dsub>
   b9152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9154:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9158:	ea43 030a 	orr.w	r3, r3, sl
   b915c:	4313      	orrs	r3, r2
   b915e:	4680      	mov	r8, r0
   b9160:	4689      	mov	r9, r1
   b9162:	d055      	beq.n	b9210 <_strtod_l+0xba0>
   b9164:	a336      	add	r3, pc, #216	; (adr r3, b9240 <_strtod_l+0xbd0>)
   b9166:	e9d3 2300 	ldrd	r2, r3, [r3]
   b916a:	f7fb fb87 	bl	b487c <__aeabi_dcmplt>
   b916e:	2800      	cmp	r0, #0
   b9170:	f47f acd0 	bne.w	b8b14 <_strtod_l+0x4a4>
   b9174:	a334      	add	r3, pc, #208	; (adr r3, b9248 <_strtod_l+0xbd8>)
   b9176:	e9d3 2300 	ldrd	r2, r3, [r3]
   b917a:	4640      	mov	r0, r8
   b917c:	4649      	mov	r1, r9
   b917e:	f7fb fb9b 	bl	b48b8 <__aeabi_dcmpgt>
   b9182:	2800      	cmp	r0, #0
   b9184:	f43f af7b 	beq.w	b907e <_strtod_l+0xa0e>
   b9188:	e4c4      	b.n	b8b14 <_strtod_l+0x4a4>
   b918a:	9b04      	ldr	r3, [sp, #16]
   b918c:	b333      	cbz	r3, b91dc <_strtod_l+0xb6c>
   b918e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9190:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9194:	d822      	bhi.n	b91dc <_strtod_l+0xb6c>
   b9196:	a32e      	add	r3, pc, #184	; (adr r3, b9250 <_strtod_l+0xbe0>)
   b9198:	e9d3 2300 	ldrd	r2, r3, [r3]
   b919c:	4640      	mov	r0, r8
   b919e:	4649      	mov	r1, r9
   b91a0:	f7fb fb76 	bl	b4890 <__aeabi_dcmple>
   b91a4:	b1a0      	cbz	r0, b91d0 <_strtod_l+0xb60>
   b91a6:	4649      	mov	r1, r9
   b91a8:	4640      	mov	r0, r8
   b91aa:	f7fb fbcd 	bl	b4948 <__aeabi_d2uiz>
   b91ae:	2801      	cmp	r0, #1
   b91b0:	bf38      	it	cc
   b91b2:	2001      	movcc	r0, #1
   b91b4:	f7fb f876 	bl	b42a4 <__aeabi_ui2d>
   b91b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b91ba:	4680      	mov	r8, r0
   b91bc:	4689      	mov	r9, r1
   b91be:	bb23      	cbnz	r3, b920a <_strtod_l+0xb9a>
   b91c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b91c4:	9010      	str	r0, [sp, #64]	; 0x40
   b91c6:	9311      	str	r3, [sp, #68]	; 0x44
   b91c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b91cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b91d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b91d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b91d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b91d8:	1a9b      	subs	r3, r3, r2
   b91da:	9309      	str	r3, [sp, #36]	; 0x24
   b91dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b91e0:	eeb0 0a48 	vmov.f32	s0, s16
   b91e4:	eef0 0a68 	vmov.f32	s1, s17
   b91e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b91ec:	f000 ffac 	bl	ba148 <__ulp>
   b91f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b91f4:	ec53 2b10 	vmov	r2, r3, d0
   b91f8:	f7fb f8ce 	bl	b4398 <__aeabi_dmul>
   b91fc:	ec53 2b18 	vmov	r2, r3, d8
   b9200:	f7fa ff14 	bl	b402c <__adddf3>
   b9204:	4682      	mov	sl, r0
   b9206:	468b      	mov	fp, r1
   b9208:	e78d      	b.n	b9126 <_strtod_l+0xab6>
   b920a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b920e:	e7db      	b.n	b91c8 <_strtod_l+0xb58>
   b9210:	a311      	add	r3, pc, #68	; (adr r3, b9258 <_strtod_l+0xbe8>)
   b9212:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9216:	f7fb fb31 	bl	b487c <__aeabi_dcmplt>
   b921a:	e7b2      	b.n	b9182 <_strtod_l+0xb12>
   b921c:	2300      	movs	r3, #0
   b921e:	930a      	str	r3, [sp, #40]	; 0x28
   b9220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9222:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9224:	6013      	str	r3, [r2, #0]
   b9226:	f7ff ba6b 	b.w	b8700 <_strtod_l+0x90>
   b922a:	2a65      	cmp	r2, #101	; 0x65
   b922c:	f43f ab5f 	beq.w	b88ee <_strtod_l+0x27e>
   b9230:	2a45      	cmp	r2, #69	; 0x45
   b9232:	f43f ab5c 	beq.w	b88ee <_strtod_l+0x27e>
   b9236:	2301      	movs	r3, #1
   b9238:	f7ff bb94 	b.w	b8964 <_strtod_l+0x2f4>
   b923c:	f3af 8000 	nop.w
   b9240:	94a03595 	.word	0x94a03595
   b9244:	3fdfffff 	.word	0x3fdfffff
   b9248:	35afe535 	.word	0x35afe535
   b924c:	3fe00000 	.word	0x3fe00000
   b9250:	ffc00000 	.word	0xffc00000
   b9254:	41dfffff 	.word	0x41dfffff
   b9258:	94a03595 	.word	0x94a03595
   b925c:	3fcfffff 	.word	0x3fcfffff
   b9260:	3ff00000 	.word	0x3ff00000
   b9264:	7ff00000 	.word	0x7ff00000
   b9268:	7fe00000 	.word	0x7fe00000
   b926c:	7c9fffff 	.word	0x7c9fffff
   b9270:	3fe00000 	.word	0x3fe00000
   b9274:	bff00000 	.word	0xbff00000
   b9278:	7fefffff 	.word	0x7fefffff

000b927c <strtod>:
   b927c:	460a      	mov	r2, r1
   b927e:	4601      	mov	r1, r0
   b9280:	4802      	ldr	r0, [pc, #8]	; (b928c <strtod+0x10>)
   b9282:	4b03      	ldr	r3, [pc, #12]	; (b9290 <strtod+0x14>)
   b9284:	6800      	ldr	r0, [r0, #0]
   b9286:	f7ff b9f3 	b.w	b8670 <_strtod_l>
   b928a:	bf00      	nop
   b928c:	2003e3e0 	.word	0x2003e3e0
   b9290:	2003e44c 	.word	0x2003e44c

000b9294 <__register_exitproc>:
   b9294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9298:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9354 <__register_exitproc+0xc0>
   b929c:	4606      	mov	r6, r0
   b929e:	f8d8 0000 	ldr.w	r0, [r8]
   b92a2:	461f      	mov	r7, r3
   b92a4:	460d      	mov	r5, r1
   b92a6:	4691      	mov	r9, r2
   b92a8:	f000 fbc6 	bl	b9a38 <__retarget_lock_acquire_recursive>
   b92ac:	4b25      	ldr	r3, [pc, #148]	; (b9344 <__register_exitproc+0xb0>)
   b92ae:	681c      	ldr	r4, [r3, #0]
   b92b0:	b934      	cbnz	r4, b92c0 <__register_exitproc+0x2c>
   b92b2:	4c25      	ldr	r4, [pc, #148]	; (b9348 <__register_exitproc+0xb4>)
   b92b4:	601c      	str	r4, [r3, #0]
   b92b6:	4b25      	ldr	r3, [pc, #148]	; (b934c <__register_exitproc+0xb8>)
   b92b8:	b113      	cbz	r3, b92c0 <__register_exitproc+0x2c>
   b92ba:	681b      	ldr	r3, [r3, #0]
   b92bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b92c0:	6863      	ldr	r3, [r4, #4]
   b92c2:	2b1f      	cmp	r3, #31
   b92c4:	dd07      	ble.n	b92d6 <__register_exitproc+0x42>
   b92c6:	f8d8 0000 	ldr.w	r0, [r8]
   b92ca:	f000 fbb7 	bl	b9a3c <__retarget_lock_release_recursive>
   b92ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b92d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b92d6:	b34e      	cbz	r6, b932c <__register_exitproc+0x98>
   b92d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b92dc:	b988      	cbnz	r0, b9302 <__register_exitproc+0x6e>
   b92de:	4b1c      	ldr	r3, [pc, #112]	; (b9350 <__register_exitproc+0xbc>)
   b92e0:	b923      	cbnz	r3, b92ec <__register_exitproc+0x58>
   b92e2:	f8d8 0000 	ldr.w	r0, [r8]
   b92e6:	f000 fba8 	bl	b9a3a <__retarget_lock_release>
   b92ea:	e7f0      	b.n	b92ce <__register_exitproc+0x3a>
   b92ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b92f0:	f7fd fd8a 	bl	b6e08 <malloc>
   b92f4:	2800      	cmp	r0, #0
   b92f6:	d0f4      	beq.n	b92e2 <__register_exitproc+0x4e>
   b92f8:	2300      	movs	r3, #0
   b92fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b92fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9302:	6863      	ldr	r3, [r4, #4]
   b9304:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9308:	2201      	movs	r2, #1
   b930a:	409a      	lsls	r2, r3
   b930c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9310:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9314:	4313      	orrs	r3, r2
   b9316:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b931a:	2e02      	cmp	r6, #2
   b931c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9320:	bf02      	ittt	eq
   b9322:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9326:	4313      	orreq	r3, r2
   b9328:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b932c:	6863      	ldr	r3, [r4, #4]
   b932e:	f8d8 0000 	ldr.w	r0, [r8]
   b9332:	1c5a      	adds	r2, r3, #1
   b9334:	3302      	adds	r3, #2
   b9336:	6062      	str	r2, [r4, #4]
   b9338:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b933c:	f000 fb7e 	bl	b9a3c <__retarget_lock_release_recursive>
   b9340:	2000      	movs	r0, #0
   b9342:	e7c6      	b.n	b92d2 <__register_exitproc+0x3e>
   b9344:	2003e7e8 	.word	0x2003e7e8
   b9348:	2003e75c 	.word	0x2003e75c
   b934c:	00000000 	.word	0x00000000
   b9350:	000b6e09 	.word	0x000b6e09
   b9354:	2003e444 	.word	0x2003e444

000b9358 <rshift>:
   b9358:	6903      	ldr	r3, [r0, #16]
   b935a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b935e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9362:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9366:	f100 0414 	add.w	r4, r0, #20
   b936a:	dd45      	ble.n	b93f8 <rshift+0xa0>
   b936c:	f011 011f 	ands.w	r1, r1, #31
   b9370:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9374:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9378:	d10c      	bne.n	b9394 <rshift+0x3c>
   b937a:	f100 0710 	add.w	r7, r0, #16
   b937e:	4629      	mov	r1, r5
   b9380:	42b1      	cmp	r1, r6
   b9382:	d334      	bcc.n	b93ee <rshift+0x96>
   b9384:	1a9b      	subs	r3, r3, r2
   b9386:	009b      	lsls	r3, r3, #2
   b9388:	1eea      	subs	r2, r5, #3
   b938a:	4296      	cmp	r6, r2
   b938c:	bf38      	it	cc
   b938e:	2300      	movcc	r3, #0
   b9390:	4423      	add	r3, r4
   b9392:	e015      	b.n	b93c0 <rshift+0x68>
   b9394:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9398:	f1c1 0820 	rsb	r8, r1, #32
   b939c:	40cf      	lsrs	r7, r1
   b939e:	f105 0e04 	add.w	lr, r5, #4
   b93a2:	46a1      	mov	r9, r4
   b93a4:	4576      	cmp	r6, lr
   b93a6:	46f4      	mov	ip, lr
   b93a8:	d815      	bhi.n	b93d6 <rshift+0x7e>
   b93aa:	1a9a      	subs	r2, r3, r2
   b93ac:	0092      	lsls	r2, r2, #2
   b93ae:	3a04      	subs	r2, #4
   b93b0:	3501      	adds	r5, #1
   b93b2:	42ae      	cmp	r6, r5
   b93b4:	bf38      	it	cc
   b93b6:	2200      	movcc	r2, #0
   b93b8:	18a3      	adds	r3, r4, r2
   b93ba:	50a7      	str	r7, [r4, r2]
   b93bc:	b107      	cbz	r7, b93c0 <rshift+0x68>
   b93be:	3304      	adds	r3, #4
   b93c0:	1b1a      	subs	r2, r3, r4
   b93c2:	42a3      	cmp	r3, r4
   b93c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b93c8:	bf08      	it	eq
   b93ca:	2300      	moveq	r3, #0
   b93cc:	6102      	str	r2, [r0, #16]
   b93ce:	bf08      	it	eq
   b93d0:	6143      	streq	r3, [r0, #20]
   b93d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b93d6:	f8dc c000 	ldr.w	ip, [ip]
   b93da:	fa0c fc08 	lsl.w	ip, ip, r8
   b93de:	ea4c 0707 	orr.w	r7, ip, r7
   b93e2:	f849 7b04 	str.w	r7, [r9], #4
   b93e6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b93ea:	40cf      	lsrs	r7, r1
   b93ec:	e7da      	b.n	b93a4 <rshift+0x4c>
   b93ee:	f851 cb04 	ldr.w	ip, [r1], #4
   b93f2:	f847 cf04 	str.w	ip, [r7, #4]!
   b93f6:	e7c3      	b.n	b9380 <rshift+0x28>
   b93f8:	4623      	mov	r3, r4
   b93fa:	e7e1      	b.n	b93c0 <rshift+0x68>

000b93fc <__hexdig_fun>:
   b93fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9400:	2b09      	cmp	r3, #9
   b9402:	d802      	bhi.n	b940a <__hexdig_fun+0xe>
   b9404:	3820      	subs	r0, #32
   b9406:	b2c0      	uxtb	r0, r0
   b9408:	4770      	bx	lr
   b940a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b940e:	2b05      	cmp	r3, #5
   b9410:	d801      	bhi.n	b9416 <__hexdig_fun+0x1a>
   b9412:	3847      	subs	r0, #71	; 0x47
   b9414:	e7f7      	b.n	b9406 <__hexdig_fun+0xa>
   b9416:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b941a:	2b05      	cmp	r3, #5
   b941c:	d801      	bhi.n	b9422 <__hexdig_fun+0x26>
   b941e:	3827      	subs	r0, #39	; 0x27
   b9420:	e7f1      	b.n	b9406 <__hexdig_fun+0xa>
   b9422:	2000      	movs	r0, #0
   b9424:	4770      	bx	lr
	...

000b9428 <__gethex>:
   b9428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b942c:	ed2d 8b02 	vpush	{d8}
   b9430:	b089      	sub	sp, #36	; 0x24
   b9432:	ee08 0a10 	vmov	s16, r0
   b9436:	9304      	str	r3, [sp, #16]
   b9438:	4bb4      	ldr	r3, [pc, #720]	; (b970c <__gethex+0x2e4>)
   b943a:	681b      	ldr	r3, [r3, #0]
   b943c:	9301      	str	r3, [sp, #4]
   b943e:	4618      	mov	r0, r3
   b9440:	468b      	mov	fp, r1
   b9442:	4690      	mov	r8, r2
   b9444:	f7fb fb18 	bl	b4a78 <strlen>
   b9448:	9b01      	ldr	r3, [sp, #4]
   b944a:	f8db 2000 	ldr.w	r2, [fp]
   b944e:	4403      	add	r3, r0
   b9450:	4682      	mov	sl, r0
   b9452:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9456:	9305      	str	r3, [sp, #20]
   b9458:	1c93      	adds	r3, r2, #2
   b945a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b945e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9462:	32fe      	adds	r2, #254	; 0xfe
   b9464:	18d1      	adds	r1, r2, r3
   b9466:	461f      	mov	r7, r3
   b9468:	f813 0b01 	ldrb.w	r0, [r3], #1
   b946c:	9100      	str	r1, [sp, #0]
   b946e:	2830      	cmp	r0, #48	; 0x30
   b9470:	d0f8      	beq.n	b9464 <__gethex+0x3c>
   b9472:	f7ff ffc3 	bl	b93fc <__hexdig_fun>
   b9476:	4604      	mov	r4, r0
   b9478:	2800      	cmp	r0, #0
   b947a:	d13a      	bne.n	b94f2 <__gethex+0xca>
   b947c:	9901      	ldr	r1, [sp, #4]
   b947e:	4652      	mov	r2, sl
   b9480:	4638      	mov	r0, r7
   b9482:	f7ff f8c5 	bl	b8610 <strncmp>
   b9486:	4605      	mov	r5, r0
   b9488:	2800      	cmp	r0, #0
   b948a:	d168      	bne.n	b955e <__gethex+0x136>
   b948c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9490:	eb07 060a 	add.w	r6, r7, sl
   b9494:	f7ff ffb2 	bl	b93fc <__hexdig_fun>
   b9498:	2800      	cmp	r0, #0
   b949a:	d062      	beq.n	b9562 <__gethex+0x13a>
   b949c:	4633      	mov	r3, r6
   b949e:	7818      	ldrb	r0, [r3, #0]
   b94a0:	2830      	cmp	r0, #48	; 0x30
   b94a2:	461f      	mov	r7, r3
   b94a4:	f103 0301 	add.w	r3, r3, #1
   b94a8:	d0f9      	beq.n	b949e <__gethex+0x76>
   b94aa:	f7ff ffa7 	bl	b93fc <__hexdig_fun>
   b94ae:	2301      	movs	r3, #1
   b94b0:	fab0 f480 	clz	r4, r0
   b94b4:	0964      	lsrs	r4, r4, #5
   b94b6:	4635      	mov	r5, r6
   b94b8:	9300      	str	r3, [sp, #0]
   b94ba:	463a      	mov	r2, r7
   b94bc:	4616      	mov	r6, r2
   b94be:	3201      	adds	r2, #1
   b94c0:	7830      	ldrb	r0, [r6, #0]
   b94c2:	f7ff ff9b 	bl	b93fc <__hexdig_fun>
   b94c6:	2800      	cmp	r0, #0
   b94c8:	d1f8      	bne.n	b94bc <__gethex+0x94>
   b94ca:	9901      	ldr	r1, [sp, #4]
   b94cc:	4652      	mov	r2, sl
   b94ce:	4630      	mov	r0, r6
   b94d0:	f7ff f89e 	bl	b8610 <strncmp>
   b94d4:	b980      	cbnz	r0, b94f8 <__gethex+0xd0>
   b94d6:	b94d      	cbnz	r5, b94ec <__gethex+0xc4>
   b94d8:	eb06 050a 	add.w	r5, r6, sl
   b94dc:	462a      	mov	r2, r5
   b94de:	4616      	mov	r6, r2
   b94e0:	3201      	adds	r2, #1
   b94e2:	7830      	ldrb	r0, [r6, #0]
   b94e4:	f7ff ff8a 	bl	b93fc <__hexdig_fun>
   b94e8:	2800      	cmp	r0, #0
   b94ea:	d1f8      	bne.n	b94de <__gethex+0xb6>
   b94ec:	1bad      	subs	r5, r5, r6
   b94ee:	00ad      	lsls	r5, r5, #2
   b94f0:	e004      	b.n	b94fc <__gethex+0xd4>
   b94f2:	2400      	movs	r4, #0
   b94f4:	4625      	mov	r5, r4
   b94f6:	e7e0      	b.n	b94ba <__gethex+0x92>
   b94f8:	2d00      	cmp	r5, #0
   b94fa:	d1f7      	bne.n	b94ec <__gethex+0xc4>
   b94fc:	7833      	ldrb	r3, [r6, #0]
   b94fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9502:	2b50      	cmp	r3, #80	; 0x50
   b9504:	d13b      	bne.n	b957e <__gethex+0x156>
   b9506:	7873      	ldrb	r3, [r6, #1]
   b9508:	2b2b      	cmp	r3, #43	; 0x2b
   b950a:	d02c      	beq.n	b9566 <__gethex+0x13e>
   b950c:	2b2d      	cmp	r3, #45	; 0x2d
   b950e:	d02e      	beq.n	b956e <__gethex+0x146>
   b9510:	1c71      	adds	r1, r6, #1
   b9512:	f04f 0900 	mov.w	r9, #0
   b9516:	7808      	ldrb	r0, [r1, #0]
   b9518:	f7ff ff70 	bl	b93fc <__hexdig_fun>
   b951c:	1e43      	subs	r3, r0, #1
   b951e:	b2db      	uxtb	r3, r3
   b9520:	2b18      	cmp	r3, #24
   b9522:	d82c      	bhi.n	b957e <__gethex+0x156>
   b9524:	f1a0 0210 	sub.w	r2, r0, #16
   b9528:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b952c:	f7ff ff66 	bl	b93fc <__hexdig_fun>
   b9530:	1e43      	subs	r3, r0, #1
   b9532:	b2db      	uxtb	r3, r3
   b9534:	2b18      	cmp	r3, #24
   b9536:	d91d      	bls.n	b9574 <__gethex+0x14c>
   b9538:	f1b9 0f00 	cmp.w	r9, #0
   b953c:	d000      	beq.n	b9540 <__gethex+0x118>
   b953e:	4252      	negs	r2, r2
   b9540:	4415      	add	r5, r2
   b9542:	f8cb 1000 	str.w	r1, [fp]
   b9546:	b1e4      	cbz	r4, b9582 <__gethex+0x15a>
   b9548:	9b00      	ldr	r3, [sp, #0]
   b954a:	2b00      	cmp	r3, #0
   b954c:	bf14      	ite	ne
   b954e:	2700      	movne	r7, #0
   b9550:	2706      	moveq	r7, #6
   b9552:	4638      	mov	r0, r7
   b9554:	b009      	add	sp, #36	; 0x24
   b9556:	ecbd 8b02 	vpop	{d8}
   b955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b955e:	463e      	mov	r6, r7
   b9560:	4625      	mov	r5, r4
   b9562:	2401      	movs	r4, #1
   b9564:	e7ca      	b.n	b94fc <__gethex+0xd4>
   b9566:	f04f 0900 	mov.w	r9, #0
   b956a:	1cb1      	adds	r1, r6, #2
   b956c:	e7d3      	b.n	b9516 <__gethex+0xee>
   b956e:	f04f 0901 	mov.w	r9, #1
   b9572:	e7fa      	b.n	b956a <__gethex+0x142>
   b9574:	230a      	movs	r3, #10
   b9576:	fb03 0202 	mla	r2, r3, r2, r0
   b957a:	3a10      	subs	r2, #16
   b957c:	e7d4      	b.n	b9528 <__gethex+0x100>
   b957e:	4631      	mov	r1, r6
   b9580:	e7df      	b.n	b9542 <__gethex+0x11a>
   b9582:	1bf3      	subs	r3, r6, r7
   b9584:	3b01      	subs	r3, #1
   b9586:	4621      	mov	r1, r4
   b9588:	2b07      	cmp	r3, #7
   b958a:	dc0b      	bgt.n	b95a4 <__gethex+0x17c>
   b958c:	ee18 0a10 	vmov	r0, s16
   b9590:	f000 fa68 	bl	b9a64 <_Balloc>
   b9594:	4604      	mov	r4, r0
   b9596:	b940      	cbnz	r0, b95aa <__gethex+0x182>
   b9598:	4b5d      	ldr	r3, [pc, #372]	; (b9710 <__gethex+0x2e8>)
   b959a:	4602      	mov	r2, r0
   b959c:	21de      	movs	r1, #222	; 0xde
   b959e:	485d      	ldr	r0, [pc, #372]	; (b9714 <__gethex+0x2ec>)
   b95a0:	f7fd fc62 	bl	b6e68 <__assert_func>
   b95a4:	3101      	adds	r1, #1
   b95a6:	105b      	asrs	r3, r3, #1
   b95a8:	e7ee      	b.n	b9588 <__gethex+0x160>
   b95aa:	f100 0914 	add.w	r9, r0, #20
   b95ae:	f04f 0b00 	mov.w	fp, #0
   b95b2:	f1ca 0301 	rsb	r3, sl, #1
   b95b6:	f8cd 9008 	str.w	r9, [sp, #8]
   b95ba:	f8cd b000 	str.w	fp, [sp]
   b95be:	9306      	str	r3, [sp, #24]
   b95c0:	42b7      	cmp	r7, r6
   b95c2:	d340      	bcc.n	b9646 <__gethex+0x21e>
   b95c4:	9802      	ldr	r0, [sp, #8]
   b95c6:	9b00      	ldr	r3, [sp, #0]
   b95c8:	f840 3b04 	str.w	r3, [r0], #4
   b95cc:	eba0 0009 	sub.w	r0, r0, r9
   b95d0:	1080      	asrs	r0, r0, #2
   b95d2:	0146      	lsls	r6, r0, #5
   b95d4:	6120      	str	r0, [r4, #16]
   b95d6:	4618      	mov	r0, r3
   b95d8:	f000 fb36 	bl	b9c48 <__hi0bits>
   b95dc:	1a30      	subs	r0, r6, r0
   b95de:	f8d8 6000 	ldr.w	r6, [r8]
   b95e2:	42b0      	cmp	r0, r6
   b95e4:	dd63      	ble.n	b96ae <__gethex+0x286>
   b95e6:	1b87      	subs	r7, r0, r6
   b95e8:	4639      	mov	r1, r7
   b95ea:	4620      	mov	r0, r4
   b95ec:	f000 feda 	bl	ba3a4 <__any_on>
   b95f0:	4682      	mov	sl, r0
   b95f2:	b1a8      	cbz	r0, b9620 <__gethex+0x1f8>
   b95f4:	1e7b      	subs	r3, r7, #1
   b95f6:	1159      	asrs	r1, r3, #5
   b95f8:	f003 021f 	and.w	r2, r3, #31
   b95fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9600:	f04f 0a01 	mov.w	sl, #1
   b9604:	fa0a f202 	lsl.w	r2, sl, r2
   b9608:	420a      	tst	r2, r1
   b960a:	d009      	beq.n	b9620 <__gethex+0x1f8>
   b960c:	4553      	cmp	r3, sl
   b960e:	dd05      	ble.n	b961c <__gethex+0x1f4>
   b9610:	1eb9      	subs	r1, r7, #2
   b9612:	4620      	mov	r0, r4
   b9614:	f000 fec6 	bl	ba3a4 <__any_on>
   b9618:	2800      	cmp	r0, #0
   b961a:	d145      	bne.n	b96a8 <__gethex+0x280>
   b961c:	f04f 0a02 	mov.w	sl, #2
   b9620:	4639      	mov	r1, r7
   b9622:	4620      	mov	r0, r4
   b9624:	f7ff fe98 	bl	b9358 <rshift>
   b9628:	443d      	add	r5, r7
   b962a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b962e:	42ab      	cmp	r3, r5
   b9630:	da4c      	bge.n	b96cc <__gethex+0x2a4>
   b9632:	ee18 0a10 	vmov	r0, s16
   b9636:	4621      	mov	r1, r4
   b9638:	f000 fa54 	bl	b9ae4 <_Bfree>
   b963c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b963e:	2300      	movs	r3, #0
   b9640:	6013      	str	r3, [r2, #0]
   b9642:	27a3      	movs	r7, #163	; 0xa3
   b9644:	e785      	b.n	b9552 <__gethex+0x12a>
   b9646:	1e73      	subs	r3, r6, #1
   b9648:	9a05      	ldr	r2, [sp, #20]
   b964a:	9303      	str	r3, [sp, #12]
   b964c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9650:	4293      	cmp	r3, r2
   b9652:	d019      	beq.n	b9688 <__gethex+0x260>
   b9654:	f1bb 0f20 	cmp.w	fp, #32
   b9658:	d107      	bne.n	b966a <__gethex+0x242>
   b965a:	9b02      	ldr	r3, [sp, #8]
   b965c:	9a00      	ldr	r2, [sp, #0]
   b965e:	f843 2b04 	str.w	r2, [r3], #4
   b9662:	9302      	str	r3, [sp, #8]
   b9664:	2300      	movs	r3, #0
   b9666:	9300      	str	r3, [sp, #0]
   b9668:	469b      	mov	fp, r3
   b966a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b966e:	f7ff fec5 	bl	b93fc <__hexdig_fun>
   b9672:	9b00      	ldr	r3, [sp, #0]
   b9674:	f000 000f 	and.w	r0, r0, #15
   b9678:	fa00 f00b 	lsl.w	r0, r0, fp
   b967c:	4303      	orrs	r3, r0
   b967e:	9300      	str	r3, [sp, #0]
   b9680:	f10b 0b04 	add.w	fp, fp, #4
   b9684:	9b03      	ldr	r3, [sp, #12]
   b9686:	e00d      	b.n	b96a4 <__gethex+0x27c>
   b9688:	9b03      	ldr	r3, [sp, #12]
   b968a:	9a06      	ldr	r2, [sp, #24]
   b968c:	4413      	add	r3, r2
   b968e:	42bb      	cmp	r3, r7
   b9690:	d3e0      	bcc.n	b9654 <__gethex+0x22c>
   b9692:	4618      	mov	r0, r3
   b9694:	9901      	ldr	r1, [sp, #4]
   b9696:	9307      	str	r3, [sp, #28]
   b9698:	4652      	mov	r2, sl
   b969a:	f7fe ffb9 	bl	b8610 <strncmp>
   b969e:	9b07      	ldr	r3, [sp, #28]
   b96a0:	2800      	cmp	r0, #0
   b96a2:	d1d7      	bne.n	b9654 <__gethex+0x22c>
   b96a4:	461e      	mov	r6, r3
   b96a6:	e78b      	b.n	b95c0 <__gethex+0x198>
   b96a8:	f04f 0a03 	mov.w	sl, #3
   b96ac:	e7b8      	b.n	b9620 <__gethex+0x1f8>
   b96ae:	da0a      	bge.n	b96c6 <__gethex+0x29e>
   b96b0:	1a37      	subs	r7, r6, r0
   b96b2:	4621      	mov	r1, r4
   b96b4:	ee18 0a10 	vmov	r0, s16
   b96b8:	463a      	mov	r2, r7
   b96ba:	f000 fc2f 	bl	b9f1c <__lshift>
   b96be:	1bed      	subs	r5, r5, r7
   b96c0:	4604      	mov	r4, r0
   b96c2:	f100 0914 	add.w	r9, r0, #20
   b96c6:	f04f 0a00 	mov.w	sl, #0
   b96ca:	e7ae      	b.n	b962a <__gethex+0x202>
   b96cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b96d0:	42a8      	cmp	r0, r5
   b96d2:	dd72      	ble.n	b97ba <__gethex+0x392>
   b96d4:	1b45      	subs	r5, r0, r5
   b96d6:	42ae      	cmp	r6, r5
   b96d8:	dc36      	bgt.n	b9748 <__gethex+0x320>
   b96da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b96de:	2b02      	cmp	r3, #2
   b96e0:	d02a      	beq.n	b9738 <__gethex+0x310>
   b96e2:	2b03      	cmp	r3, #3
   b96e4:	d02c      	beq.n	b9740 <__gethex+0x318>
   b96e6:	2b01      	cmp	r3, #1
   b96e8:	d11c      	bne.n	b9724 <__gethex+0x2fc>
   b96ea:	42ae      	cmp	r6, r5
   b96ec:	d11a      	bne.n	b9724 <__gethex+0x2fc>
   b96ee:	2e01      	cmp	r6, #1
   b96f0:	d112      	bne.n	b9718 <__gethex+0x2f0>
   b96f2:	9a04      	ldr	r2, [sp, #16]
   b96f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b96f8:	6013      	str	r3, [r2, #0]
   b96fa:	2301      	movs	r3, #1
   b96fc:	6123      	str	r3, [r4, #16]
   b96fe:	f8c9 3000 	str.w	r3, [r9]
   b9702:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9704:	2762      	movs	r7, #98	; 0x62
   b9706:	601c      	str	r4, [r3, #0]
   b9708:	e723      	b.n	b9552 <__gethex+0x12a>
   b970a:	bf00      	nop
   b970c:	000bb54c 	.word	0x000bb54c
   b9710:	000bb4d9 	.word	0x000bb4d9
   b9714:	000bb4ea 	.word	0x000bb4ea
   b9718:	1e71      	subs	r1, r6, #1
   b971a:	4620      	mov	r0, r4
   b971c:	f000 fe42 	bl	ba3a4 <__any_on>
   b9720:	2800      	cmp	r0, #0
   b9722:	d1e6      	bne.n	b96f2 <__gethex+0x2ca>
   b9724:	ee18 0a10 	vmov	r0, s16
   b9728:	4621      	mov	r1, r4
   b972a:	f000 f9db 	bl	b9ae4 <_Bfree>
   b972e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9730:	2300      	movs	r3, #0
   b9732:	6013      	str	r3, [r2, #0]
   b9734:	2750      	movs	r7, #80	; 0x50
   b9736:	e70c      	b.n	b9552 <__gethex+0x12a>
   b9738:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b973a:	2b00      	cmp	r3, #0
   b973c:	d1f2      	bne.n	b9724 <__gethex+0x2fc>
   b973e:	e7d8      	b.n	b96f2 <__gethex+0x2ca>
   b9740:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9742:	2b00      	cmp	r3, #0
   b9744:	d1d5      	bne.n	b96f2 <__gethex+0x2ca>
   b9746:	e7ed      	b.n	b9724 <__gethex+0x2fc>
   b9748:	1e6f      	subs	r7, r5, #1
   b974a:	f1ba 0f00 	cmp.w	sl, #0
   b974e:	d131      	bne.n	b97b4 <__gethex+0x38c>
   b9750:	b127      	cbz	r7, b975c <__gethex+0x334>
   b9752:	4639      	mov	r1, r7
   b9754:	4620      	mov	r0, r4
   b9756:	f000 fe25 	bl	ba3a4 <__any_on>
   b975a:	4682      	mov	sl, r0
   b975c:	117b      	asrs	r3, r7, #5
   b975e:	2101      	movs	r1, #1
   b9760:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9764:	f007 071f 	and.w	r7, r7, #31
   b9768:	fa01 f707 	lsl.w	r7, r1, r7
   b976c:	421f      	tst	r7, r3
   b976e:	4629      	mov	r1, r5
   b9770:	4620      	mov	r0, r4
   b9772:	bf18      	it	ne
   b9774:	f04a 0a02 	orrne.w	sl, sl, #2
   b9778:	1b76      	subs	r6, r6, r5
   b977a:	f7ff fded 	bl	b9358 <rshift>
   b977e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9782:	2702      	movs	r7, #2
   b9784:	f1ba 0f00 	cmp.w	sl, #0
   b9788:	d048      	beq.n	b981c <__gethex+0x3f4>
   b978a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b978e:	2b02      	cmp	r3, #2
   b9790:	d015      	beq.n	b97be <__gethex+0x396>
   b9792:	2b03      	cmp	r3, #3
   b9794:	d017      	beq.n	b97c6 <__gethex+0x39e>
   b9796:	2b01      	cmp	r3, #1
   b9798:	d109      	bne.n	b97ae <__gethex+0x386>
   b979a:	f01a 0f02 	tst.w	sl, #2
   b979e:	d006      	beq.n	b97ae <__gethex+0x386>
   b97a0:	f8d9 0000 	ldr.w	r0, [r9]
   b97a4:	ea4a 0a00 	orr.w	sl, sl, r0
   b97a8:	f01a 0f01 	tst.w	sl, #1
   b97ac:	d10e      	bne.n	b97cc <__gethex+0x3a4>
   b97ae:	f047 0710 	orr.w	r7, r7, #16
   b97b2:	e033      	b.n	b981c <__gethex+0x3f4>
   b97b4:	f04f 0a01 	mov.w	sl, #1
   b97b8:	e7d0      	b.n	b975c <__gethex+0x334>
   b97ba:	2701      	movs	r7, #1
   b97bc:	e7e2      	b.n	b9784 <__gethex+0x35c>
   b97be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b97c0:	f1c3 0301 	rsb	r3, r3, #1
   b97c4:	9315      	str	r3, [sp, #84]	; 0x54
   b97c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b97c8:	2b00      	cmp	r3, #0
   b97ca:	d0f0      	beq.n	b97ae <__gethex+0x386>
   b97cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b97d0:	f104 0314 	add.w	r3, r4, #20
   b97d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b97d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b97dc:	f04f 0c00 	mov.w	ip, #0
   b97e0:	4618      	mov	r0, r3
   b97e2:	f853 2b04 	ldr.w	r2, [r3], #4
   b97e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b97ea:	d01c      	beq.n	b9826 <__gethex+0x3fe>
   b97ec:	3201      	adds	r2, #1
   b97ee:	6002      	str	r2, [r0, #0]
   b97f0:	2f02      	cmp	r7, #2
   b97f2:	f104 0314 	add.w	r3, r4, #20
   b97f6:	d13f      	bne.n	b9878 <__gethex+0x450>
   b97f8:	f8d8 2000 	ldr.w	r2, [r8]
   b97fc:	3a01      	subs	r2, #1
   b97fe:	42b2      	cmp	r2, r6
   b9800:	d10a      	bne.n	b9818 <__gethex+0x3f0>
   b9802:	1171      	asrs	r1, r6, #5
   b9804:	2201      	movs	r2, #1
   b9806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b980a:	f006 061f 	and.w	r6, r6, #31
   b980e:	fa02 f606 	lsl.w	r6, r2, r6
   b9812:	421e      	tst	r6, r3
   b9814:	bf18      	it	ne
   b9816:	4617      	movne	r7, r2
   b9818:	f047 0720 	orr.w	r7, r7, #32
   b981c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b981e:	601c      	str	r4, [r3, #0]
   b9820:	9b04      	ldr	r3, [sp, #16]
   b9822:	601d      	str	r5, [r3, #0]
   b9824:	e695      	b.n	b9552 <__gethex+0x12a>
   b9826:	4299      	cmp	r1, r3
   b9828:	f843 cc04 	str.w	ip, [r3, #-4]
   b982c:	d8d8      	bhi.n	b97e0 <__gethex+0x3b8>
   b982e:	68a3      	ldr	r3, [r4, #8]
   b9830:	459b      	cmp	fp, r3
   b9832:	db19      	blt.n	b9868 <__gethex+0x440>
   b9834:	6861      	ldr	r1, [r4, #4]
   b9836:	ee18 0a10 	vmov	r0, s16
   b983a:	3101      	adds	r1, #1
   b983c:	f000 f912 	bl	b9a64 <_Balloc>
   b9840:	4681      	mov	r9, r0
   b9842:	b918      	cbnz	r0, b984c <__gethex+0x424>
   b9844:	4b1a      	ldr	r3, [pc, #104]	; (b98b0 <__gethex+0x488>)
   b9846:	4602      	mov	r2, r0
   b9848:	2184      	movs	r1, #132	; 0x84
   b984a:	e6a8      	b.n	b959e <__gethex+0x176>
   b984c:	6922      	ldr	r2, [r4, #16]
   b984e:	3202      	adds	r2, #2
   b9850:	f104 010c 	add.w	r1, r4, #12
   b9854:	0092      	lsls	r2, r2, #2
   b9856:	300c      	adds	r0, #12
   b9858:	f7fe fe95 	bl	b8586 <memcpy>
   b985c:	4621      	mov	r1, r4
   b985e:	ee18 0a10 	vmov	r0, s16
   b9862:	f000 f93f 	bl	b9ae4 <_Bfree>
   b9866:	464c      	mov	r4, r9
   b9868:	6923      	ldr	r3, [r4, #16]
   b986a:	1c5a      	adds	r2, r3, #1
   b986c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9870:	6122      	str	r2, [r4, #16]
   b9872:	2201      	movs	r2, #1
   b9874:	615a      	str	r2, [r3, #20]
   b9876:	e7bb      	b.n	b97f0 <__gethex+0x3c8>
   b9878:	6922      	ldr	r2, [r4, #16]
   b987a:	455a      	cmp	r2, fp
   b987c:	dd0b      	ble.n	b9896 <__gethex+0x46e>
   b987e:	2101      	movs	r1, #1
   b9880:	4620      	mov	r0, r4
   b9882:	f7ff fd69 	bl	b9358 <rshift>
   b9886:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b988a:	3501      	adds	r5, #1
   b988c:	42ab      	cmp	r3, r5
   b988e:	f6ff aed0 	blt.w	b9632 <__gethex+0x20a>
   b9892:	2701      	movs	r7, #1
   b9894:	e7c0      	b.n	b9818 <__gethex+0x3f0>
   b9896:	f016 061f 	ands.w	r6, r6, #31
   b989a:	d0fa      	beq.n	b9892 <__gethex+0x46a>
   b989c:	4453      	add	r3, sl
   b989e:	f1c6 0620 	rsb	r6, r6, #32
   b98a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b98a6:	f000 f9cf 	bl	b9c48 <__hi0bits>
   b98aa:	42b0      	cmp	r0, r6
   b98ac:	dbe7      	blt.n	b987e <__gethex+0x456>
   b98ae:	e7f0      	b.n	b9892 <__gethex+0x46a>
   b98b0:	000bb4d9 	.word	0x000bb4d9

000b98b4 <L_shift>:
   b98b4:	f1c2 0208 	rsb	r2, r2, #8
   b98b8:	0092      	lsls	r2, r2, #2
   b98ba:	b570      	push	{r4, r5, r6, lr}
   b98bc:	f1c2 0620 	rsb	r6, r2, #32
   b98c0:	6843      	ldr	r3, [r0, #4]
   b98c2:	6804      	ldr	r4, [r0, #0]
   b98c4:	fa03 f506 	lsl.w	r5, r3, r6
   b98c8:	432c      	orrs	r4, r5
   b98ca:	40d3      	lsrs	r3, r2
   b98cc:	6004      	str	r4, [r0, #0]
   b98ce:	f840 3f04 	str.w	r3, [r0, #4]!
   b98d2:	4288      	cmp	r0, r1
   b98d4:	d3f4      	bcc.n	b98c0 <L_shift+0xc>
   b98d6:	bd70      	pop	{r4, r5, r6, pc}

000b98d8 <__match>:
   b98d8:	b530      	push	{r4, r5, lr}
   b98da:	6803      	ldr	r3, [r0, #0]
   b98dc:	3301      	adds	r3, #1
   b98de:	f811 4b01 	ldrb.w	r4, [r1], #1
   b98e2:	b914      	cbnz	r4, b98ea <__match+0x12>
   b98e4:	6003      	str	r3, [r0, #0]
   b98e6:	2001      	movs	r0, #1
   b98e8:	bd30      	pop	{r4, r5, pc}
   b98ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   b98ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b98f2:	2d19      	cmp	r5, #25
   b98f4:	bf98      	it	ls
   b98f6:	3220      	addls	r2, #32
   b98f8:	42a2      	cmp	r2, r4
   b98fa:	d0f0      	beq.n	b98de <__match+0x6>
   b98fc:	2000      	movs	r0, #0
   b98fe:	e7f3      	b.n	b98e8 <__match+0x10>

000b9900 <__hexnan>:
   b9900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9904:	680b      	ldr	r3, [r1, #0]
   b9906:	115e      	asrs	r6, r3, #5
   b9908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b990c:	f013 031f 	ands.w	r3, r3, #31
   b9910:	b087      	sub	sp, #28
   b9912:	bf18      	it	ne
   b9914:	3604      	addne	r6, #4
   b9916:	2500      	movs	r5, #0
   b9918:	1f37      	subs	r7, r6, #4
   b991a:	4690      	mov	r8, r2
   b991c:	6802      	ldr	r2, [r0, #0]
   b991e:	9301      	str	r3, [sp, #4]
   b9920:	4682      	mov	sl, r0
   b9922:	f846 5c04 	str.w	r5, [r6, #-4]
   b9926:	46b9      	mov	r9, r7
   b9928:	463c      	mov	r4, r7
   b992a:	9502      	str	r5, [sp, #8]
   b992c:	46ab      	mov	fp, r5
   b992e:	7851      	ldrb	r1, [r2, #1]
   b9930:	1c53      	adds	r3, r2, #1
   b9932:	9303      	str	r3, [sp, #12]
   b9934:	b341      	cbz	r1, b9988 <__hexnan+0x88>
   b9936:	4608      	mov	r0, r1
   b9938:	9205      	str	r2, [sp, #20]
   b993a:	9104      	str	r1, [sp, #16]
   b993c:	f7ff fd5e 	bl	b93fc <__hexdig_fun>
   b9940:	2800      	cmp	r0, #0
   b9942:	d14f      	bne.n	b99e4 <__hexnan+0xe4>
   b9944:	9904      	ldr	r1, [sp, #16]
   b9946:	9a05      	ldr	r2, [sp, #20]
   b9948:	2920      	cmp	r1, #32
   b994a:	d818      	bhi.n	b997e <__hexnan+0x7e>
   b994c:	9b02      	ldr	r3, [sp, #8]
   b994e:	459b      	cmp	fp, r3
   b9950:	dd13      	ble.n	b997a <__hexnan+0x7a>
   b9952:	454c      	cmp	r4, r9
   b9954:	d206      	bcs.n	b9964 <__hexnan+0x64>
   b9956:	2d07      	cmp	r5, #7
   b9958:	dc04      	bgt.n	b9964 <__hexnan+0x64>
   b995a:	462a      	mov	r2, r5
   b995c:	4649      	mov	r1, r9
   b995e:	4620      	mov	r0, r4
   b9960:	f7ff ffa8 	bl	b98b4 <L_shift>
   b9964:	4544      	cmp	r4, r8
   b9966:	d950      	bls.n	b9a0a <__hexnan+0x10a>
   b9968:	2300      	movs	r3, #0
   b996a:	f1a4 0904 	sub.w	r9, r4, #4
   b996e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9972:	f8cd b008 	str.w	fp, [sp, #8]
   b9976:	464c      	mov	r4, r9
   b9978:	461d      	mov	r5, r3
   b997a:	9a03      	ldr	r2, [sp, #12]
   b997c:	e7d7      	b.n	b992e <__hexnan+0x2e>
   b997e:	2929      	cmp	r1, #41	; 0x29
   b9980:	d156      	bne.n	b9a30 <__hexnan+0x130>
   b9982:	3202      	adds	r2, #2
   b9984:	f8ca 2000 	str.w	r2, [sl]
   b9988:	f1bb 0f00 	cmp.w	fp, #0
   b998c:	d050      	beq.n	b9a30 <__hexnan+0x130>
   b998e:	454c      	cmp	r4, r9
   b9990:	d206      	bcs.n	b99a0 <__hexnan+0xa0>
   b9992:	2d07      	cmp	r5, #7
   b9994:	dc04      	bgt.n	b99a0 <__hexnan+0xa0>
   b9996:	462a      	mov	r2, r5
   b9998:	4649      	mov	r1, r9
   b999a:	4620      	mov	r0, r4
   b999c:	f7ff ff8a 	bl	b98b4 <L_shift>
   b99a0:	4544      	cmp	r4, r8
   b99a2:	d934      	bls.n	b9a0e <__hexnan+0x10e>
   b99a4:	f1a8 0204 	sub.w	r2, r8, #4
   b99a8:	4623      	mov	r3, r4
   b99aa:	f853 1b04 	ldr.w	r1, [r3], #4
   b99ae:	f842 1f04 	str.w	r1, [r2, #4]!
   b99b2:	429f      	cmp	r7, r3
   b99b4:	d2f9      	bcs.n	b99aa <__hexnan+0xaa>
   b99b6:	1b3b      	subs	r3, r7, r4
   b99b8:	f023 0303 	bic.w	r3, r3, #3
   b99bc:	3304      	adds	r3, #4
   b99be:	3401      	adds	r4, #1
   b99c0:	3e03      	subs	r6, #3
   b99c2:	42b4      	cmp	r4, r6
   b99c4:	bf88      	it	hi
   b99c6:	2304      	movhi	r3, #4
   b99c8:	4443      	add	r3, r8
   b99ca:	2200      	movs	r2, #0
   b99cc:	f843 2b04 	str.w	r2, [r3], #4
   b99d0:	429f      	cmp	r7, r3
   b99d2:	d2fb      	bcs.n	b99cc <__hexnan+0xcc>
   b99d4:	683b      	ldr	r3, [r7, #0]
   b99d6:	b91b      	cbnz	r3, b99e0 <__hexnan+0xe0>
   b99d8:	4547      	cmp	r7, r8
   b99da:	d127      	bne.n	b9a2c <__hexnan+0x12c>
   b99dc:	2301      	movs	r3, #1
   b99de:	603b      	str	r3, [r7, #0]
   b99e0:	2005      	movs	r0, #5
   b99e2:	e026      	b.n	b9a32 <__hexnan+0x132>
   b99e4:	3501      	adds	r5, #1
   b99e6:	2d08      	cmp	r5, #8
   b99e8:	f10b 0b01 	add.w	fp, fp, #1
   b99ec:	dd06      	ble.n	b99fc <__hexnan+0xfc>
   b99ee:	4544      	cmp	r4, r8
   b99f0:	d9c3      	bls.n	b997a <__hexnan+0x7a>
   b99f2:	2300      	movs	r3, #0
   b99f4:	f844 3c04 	str.w	r3, [r4, #-4]
   b99f8:	2501      	movs	r5, #1
   b99fa:	3c04      	subs	r4, #4
   b99fc:	6822      	ldr	r2, [r4, #0]
   b99fe:	f000 000f 	and.w	r0, r0, #15
   b9a02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b9a06:	6022      	str	r2, [r4, #0]
   b9a08:	e7b7      	b.n	b997a <__hexnan+0x7a>
   b9a0a:	2508      	movs	r5, #8
   b9a0c:	e7b5      	b.n	b997a <__hexnan+0x7a>
   b9a0e:	9b01      	ldr	r3, [sp, #4]
   b9a10:	2b00      	cmp	r3, #0
   b9a12:	d0df      	beq.n	b99d4 <__hexnan+0xd4>
   b9a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a18:	f1c3 0320 	rsb	r3, r3, #32
   b9a1c:	fa22 f303 	lsr.w	r3, r2, r3
   b9a20:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9a24:	401a      	ands	r2, r3
   b9a26:	f846 2c04 	str.w	r2, [r6, #-4]
   b9a2a:	e7d3      	b.n	b99d4 <__hexnan+0xd4>
   b9a2c:	3f04      	subs	r7, #4
   b9a2e:	e7d1      	b.n	b99d4 <__hexnan+0xd4>
   b9a30:	2004      	movs	r0, #4
   b9a32:	b007      	add	sp, #28
   b9a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9a38 <__retarget_lock_acquire_recursive>:
   b9a38:	4770      	bx	lr

000b9a3a <__retarget_lock_release>:
   b9a3a:	4770      	bx	lr

000b9a3c <__retarget_lock_release_recursive>:
   b9a3c:	4770      	bx	lr

000b9a3e <__ascii_mbtowc>:
   b9a3e:	b082      	sub	sp, #8
   b9a40:	b901      	cbnz	r1, b9a44 <__ascii_mbtowc+0x6>
   b9a42:	a901      	add	r1, sp, #4
   b9a44:	b142      	cbz	r2, b9a58 <__ascii_mbtowc+0x1a>
   b9a46:	b14b      	cbz	r3, b9a5c <__ascii_mbtowc+0x1e>
   b9a48:	7813      	ldrb	r3, [r2, #0]
   b9a4a:	600b      	str	r3, [r1, #0]
   b9a4c:	7812      	ldrb	r2, [r2, #0]
   b9a4e:	1e10      	subs	r0, r2, #0
   b9a50:	bf18      	it	ne
   b9a52:	2001      	movne	r0, #1
   b9a54:	b002      	add	sp, #8
   b9a56:	4770      	bx	lr
   b9a58:	4610      	mov	r0, r2
   b9a5a:	e7fb      	b.n	b9a54 <__ascii_mbtowc+0x16>
   b9a5c:	f06f 0001 	mvn.w	r0, #1
   b9a60:	e7f8      	b.n	b9a54 <__ascii_mbtowc+0x16>
	...

000b9a64 <_Balloc>:
   b9a64:	b570      	push	{r4, r5, r6, lr}
   b9a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9a68:	4604      	mov	r4, r0
   b9a6a:	460d      	mov	r5, r1
   b9a6c:	b976      	cbnz	r6, b9a8c <_Balloc+0x28>
   b9a6e:	2010      	movs	r0, #16
   b9a70:	f7fd f9ca 	bl	b6e08 <malloc>
   b9a74:	4602      	mov	r2, r0
   b9a76:	6260      	str	r0, [r4, #36]	; 0x24
   b9a78:	b920      	cbnz	r0, b9a84 <_Balloc+0x20>
   b9a7a:	4b18      	ldr	r3, [pc, #96]	; (b9adc <_Balloc+0x78>)
   b9a7c:	4818      	ldr	r0, [pc, #96]	; (b9ae0 <_Balloc+0x7c>)
   b9a7e:	2166      	movs	r1, #102	; 0x66
   b9a80:	f7fd f9f2 	bl	b6e68 <__assert_func>
   b9a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9a88:	6006      	str	r6, [r0, #0]
   b9a8a:	60c6      	str	r6, [r0, #12]
   b9a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9a8e:	68f3      	ldr	r3, [r6, #12]
   b9a90:	b183      	cbz	r3, b9ab4 <_Balloc+0x50>
   b9a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a94:	68db      	ldr	r3, [r3, #12]
   b9a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b9a9a:	b9b8      	cbnz	r0, b9acc <_Balloc+0x68>
   b9a9c:	2101      	movs	r1, #1
   b9a9e:	fa01 f605 	lsl.w	r6, r1, r5
   b9aa2:	1d72      	adds	r2, r6, #5
   b9aa4:	0092      	lsls	r2, r2, #2
   b9aa6:	4620      	mov	r0, r4
   b9aa8:	f000 fc9d 	bl	ba3e6 <_calloc_r>
   b9aac:	b160      	cbz	r0, b9ac8 <_Balloc+0x64>
   b9aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b9ab2:	e00e      	b.n	b9ad2 <_Balloc+0x6e>
   b9ab4:	2221      	movs	r2, #33	; 0x21
   b9ab6:	2104      	movs	r1, #4
   b9ab8:	4620      	mov	r0, r4
   b9aba:	f000 fc94 	bl	ba3e6 <_calloc_r>
   b9abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9ac0:	60f0      	str	r0, [r6, #12]
   b9ac2:	68db      	ldr	r3, [r3, #12]
   b9ac4:	2b00      	cmp	r3, #0
   b9ac6:	d1e4      	bne.n	b9a92 <_Balloc+0x2e>
   b9ac8:	2000      	movs	r0, #0
   b9aca:	bd70      	pop	{r4, r5, r6, pc}
   b9acc:	6802      	ldr	r2, [r0, #0]
   b9ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9ad2:	2300      	movs	r3, #0
   b9ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9ad8:	e7f7      	b.n	b9aca <_Balloc+0x66>
   b9ada:	bf00      	nop
   b9adc:	000bb30d 	.word	0x000bb30d
   b9ae0:	000bb560 	.word	0x000bb560

000b9ae4 <_Bfree>:
   b9ae4:	b570      	push	{r4, r5, r6, lr}
   b9ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9ae8:	4605      	mov	r5, r0
   b9aea:	460c      	mov	r4, r1
   b9aec:	b976      	cbnz	r6, b9b0c <_Bfree+0x28>
   b9aee:	2010      	movs	r0, #16
   b9af0:	f7fd f98a 	bl	b6e08 <malloc>
   b9af4:	4602      	mov	r2, r0
   b9af6:	6268      	str	r0, [r5, #36]	; 0x24
   b9af8:	b920      	cbnz	r0, b9b04 <_Bfree+0x20>
   b9afa:	4b09      	ldr	r3, [pc, #36]	; (b9b20 <_Bfree+0x3c>)
   b9afc:	4809      	ldr	r0, [pc, #36]	; (b9b24 <_Bfree+0x40>)
   b9afe:	218a      	movs	r1, #138	; 0x8a
   b9b00:	f7fd f9b2 	bl	b6e68 <__assert_func>
   b9b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9b08:	6006      	str	r6, [r0, #0]
   b9b0a:	60c6      	str	r6, [r0, #12]
   b9b0c:	b13c      	cbz	r4, b9b1e <_Bfree+0x3a>
   b9b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9b10:	6862      	ldr	r2, [r4, #4]
   b9b12:	68db      	ldr	r3, [r3, #12]
   b9b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9b18:	6021      	str	r1, [r4, #0]
   b9b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9b1e:	bd70      	pop	{r4, r5, r6, pc}
   b9b20:	000bb30d 	.word	0x000bb30d
   b9b24:	000bb560 	.word	0x000bb560

000b9b28 <__multadd>:
   b9b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b2c:	690d      	ldr	r5, [r1, #16]
   b9b2e:	4607      	mov	r7, r0
   b9b30:	460c      	mov	r4, r1
   b9b32:	461e      	mov	r6, r3
   b9b34:	f101 0c14 	add.w	ip, r1, #20
   b9b38:	2000      	movs	r0, #0
   b9b3a:	f8dc 3000 	ldr.w	r3, [ip]
   b9b3e:	b299      	uxth	r1, r3
   b9b40:	fb02 6101 	mla	r1, r2, r1, r6
   b9b44:	0c1e      	lsrs	r6, r3, #16
   b9b46:	0c0b      	lsrs	r3, r1, #16
   b9b48:	fb02 3306 	mla	r3, r2, r6, r3
   b9b4c:	b289      	uxth	r1, r1
   b9b4e:	3001      	adds	r0, #1
   b9b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9b54:	4285      	cmp	r5, r0
   b9b56:	f84c 1b04 	str.w	r1, [ip], #4
   b9b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9b5e:	dcec      	bgt.n	b9b3a <__multadd+0x12>
   b9b60:	b30e      	cbz	r6, b9ba6 <__multadd+0x7e>
   b9b62:	68a3      	ldr	r3, [r4, #8]
   b9b64:	42ab      	cmp	r3, r5
   b9b66:	dc19      	bgt.n	b9b9c <__multadd+0x74>
   b9b68:	6861      	ldr	r1, [r4, #4]
   b9b6a:	4638      	mov	r0, r7
   b9b6c:	3101      	adds	r1, #1
   b9b6e:	f7ff ff79 	bl	b9a64 <_Balloc>
   b9b72:	4680      	mov	r8, r0
   b9b74:	b928      	cbnz	r0, b9b82 <__multadd+0x5a>
   b9b76:	4602      	mov	r2, r0
   b9b78:	4b0c      	ldr	r3, [pc, #48]	; (b9bac <__multadd+0x84>)
   b9b7a:	480d      	ldr	r0, [pc, #52]	; (b9bb0 <__multadd+0x88>)
   b9b7c:	21b5      	movs	r1, #181	; 0xb5
   b9b7e:	f7fd f973 	bl	b6e68 <__assert_func>
   b9b82:	6922      	ldr	r2, [r4, #16]
   b9b84:	3202      	adds	r2, #2
   b9b86:	f104 010c 	add.w	r1, r4, #12
   b9b8a:	0092      	lsls	r2, r2, #2
   b9b8c:	300c      	adds	r0, #12
   b9b8e:	f7fe fcfa 	bl	b8586 <memcpy>
   b9b92:	4621      	mov	r1, r4
   b9b94:	4638      	mov	r0, r7
   b9b96:	f7ff ffa5 	bl	b9ae4 <_Bfree>
   b9b9a:	4644      	mov	r4, r8
   b9b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9ba0:	3501      	adds	r5, #1
   b9ba2:	615e      	str	r6, [r3, #20]
   b9ba4:	6125      	str	r5, [r4, #16]
   b9ba6:	4620      	mov	r0, r4
   b9ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9bac:	000bb4d9 	.word	0x000bb4d9
   b9bb0:	000bb560 	.word	0x000bb560

000b9bb4 <__s2b>:
   b9bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9bb8:	460c      	mov	r4, r1
   b9bba:	4615      	mov	r5, r2
   b9bbc:	461f      	mov	r7, r3
   b9bbe:	2209      	movs	r2, #9
   b9bc0:	3308      	adds	r3, #8
   b9bc2:	4606      	mov	r6, r0
   b9bc4:	fb93 f3f2 	sdiv	r3, r3, r2
   b9bc8:	2100      	movs	r1, #0
   b9bca:	2201      	movs	r2, #1
   b9bcc:	429a      	cmp	r2, r3
   b9bce:	db09      	blt.n	b9be4 <__s2b+0x30>
   b9bd0:	4630      	mov	r0, r6
   b9bd2:	f7ff ff47 	bl	b9a64 <_Balloc>
   b9bd6:	b940      	cbnz	r0, b9bea <__s2b+0x36>
   b9bd8:	4602      	mov	r2, r0
   b9bda:	4b19      	ldr	r3, [pc, #100]	; (b9c40 <__s2b+0x8c>)
   b9bdc:	4819      	ldr	r0, [pc, #100]	; (b9c44 <__s2b+0x90>)
   b9bde:	21ce      	movs	r1, #206	; 0xce
   b9be0:	f7fd f942 	bl	b6e68 <__assert_func>
   b9be4:	0052      	lsls	r2, r2, #1
   b9be6:	3101      	adds	r1, #1
   b9be8:	e7f0      	b.n	b9bcc <__s2b+0x18>
   b9bea:	9b08      	ldr	r3, [sp, #32]
   b9bec:	6143      	str	r3, [r0, #20]
   b9bee:	2d09      	cmp	r5, #9
   b9bf0:	f04f 0301 	mov.w	r3, #1
   b9bf4:	6103      	str	r3, [r0, #16]
   b9bf6:	dd16      	ble.n	b9c26 <__s2b+0x72>
   b9bf8:	f104 0909 	add.w	r9, r4, #9
   b9bfc:	46c8      	mov	r8, r9
   b9bfe:	442c      	add	r4, r5
   b9c00:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9c04:	4601      	mov	r1, r0
   b9c06:	3b30      	subs	r3, #48	; 0x30
   b9c08:	220a      	movs	r2, #10
   b9c0a:	4630      	mov	r0, r6
   b9c0c:	f7ff ff8c 	bl	b9b28 <__multadd>
   b9c10:	45a0      	cmp	r8, r4
   b9c12:	d1f5      	bne.n	b9c00 <__s2b+0x4c>
   b9c14:	f1a5 0408 	sub.w	r4, r5, #8
   b9c18:	444c      	add	r4, r9
   b9c1a:	1b2d      	subs	r5, r5, r4
   b9c1c:	1963      	adds	r3, r4, r5
   b9c1e:	42bb      	cmp	r3, r7
   b9c20:	db04      	blt.n	b9c2c <__s2b+0x78>
   b9c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9c26:	340a      	adds	r4, #10
   b9c28:	2509      	movs	r5, #9
   b9c2a:	e7f6      	b.n	b9c1a <__s2b+0x66>
   b9c2c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9c30:	4601      	mov	r1, r0
   b9c32:	3b30      	subs	r3, #48	; 0x30
   b9c34:	220a      	movs	r2, #10
   b9c36:	4630      	mov	r0, r6
   b9c38:	f7ff ff76 	bl	b9b28 <__multadd>
   b9c3c:	e7ee      	b.n	b9c1c <__s2b+0x68>
   b9c3e:	bf00      	nop
   b9c40:	000bb4d9 	.word	0x000bb4d9
   b9c44:	000bb560 	.word	0x000bb560

000b9c48 <__hi0bits>:
   b9c48:	0c03      	lsrs	r3, r0, #16
   b9c4a:	041b      	lsls	r3, r3, #16
   b9c4c:	b9d3      	cbnz	r3, b9c84 <__hi0bits+0x3c>
   b9c4e:	0400      	lsls	r0, r0, #16
   b9c50:	2310      	movs	r3, #16
   b9c52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9c56:	bf04      	itt	eq
   b9c58:	0200      	lsleq	r0, r0, #8
   b9c5a:	3308      	addeq	r3, #8
   b9c5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9c60:	bf04      	itt	eq
   b9c62:	0100      	lsleq	r0, r0, #4
   b9c64:	3304      	addeq	r3, #4
   b9c66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9c6a:	bf04      	itt	eq
   b9c6c:	0080      	lsleq	r0, r0, #2
   b9c6e:	3302      	addeq	r3, #2
   b9c70:	2800      	cmp	r0, #0
   b9c72:	db05      	blt.n	b9c80 <__hi0bits+0x38>
   b9c74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9c78:	f103 0301 	add.w	r3, r3, #1
   b9c7c:	bf08      	it	eq
   b9c7e:	2320      	moveq	r3, #32
   b9c80:	4618      	mov	r0, r3
   b9c82:	4770      	bx	lr
   b9c84:	2300      	movs	r3, #0
   b9c86:	e7e4      	b.n	b9c52 <__hi0bits+0xa>

000b9c88 <__lo0bits>:
   b9c88:	6803      	ldr	r3, [r0, #0]
   b9c8a:	f013 0207 	ands.w	r2, r3, #7
   b9c8e:	4601      	mov	r1, r0
   b9c90:	d00b      	beq.n	b9caa <__lo0bits+0x22>
   b9c92:	07da      	lsls	r2, r3, #31
   b9c94:	d423      	bmi.n	b9cde <__lo0bits+0x56>
   b9c96:	0798      	lsls	r0, r3, #30
   b9c98:	bf49      	itett	mi
   b9c9a:	085b      	lsrmi	r3, r3, #1
   b9c9c:	089b      	lsrpl	r3, r3, #2
   b9c9e:	2001      	movmi	r0, #1
   b9ca0:	600b      	strmi	r3, [r1, #0]
   b9ca2:	bf5c      	itt	pl
   b9ca4:	600b      	strpl	r3, [r1, #0]
   b9ca6:	2002      	movpl	r0, #2
   b9ca8:	4770      	bx	lr
   b9caa:	b298      	uxth	r0, r3
   b9cac:	b9a8      	cbnz	r0, b9cda <__lo0bits+0x52>
   b9cae:	0c1b      	lsrs	r3, r3, #16
   b9cb0:	2010      	movs	r0, #16
   b9cb2:	b2da      	uxtb	r2, r3
   b9cb4:	b90a      	cbnz	r2, b9cba <__lo0bits+0x32>
   b9cb6:	3008      	adds	r0, #8
   b9cb8:	0a1b      	lsrs	r3, r3, #8
   b9cba:	071a      	lsls	r2, r3, #28
   b9cbc:	bf04      	itt	eq
   b9cbe:	091b      	lsreq	r3, r3, #4
   b9cc0:	3004      	addeq	r0, #4
   b9cc2:	079a      	lsls	r2, r3, #30
   b9cc4:	bf04      	itt	eq
   b9cc6:	089b      	lsreq	r3, r3, #2
   b9cc8:	3002      	addeq	r0, #2
   b9cca:	07da      	lsls	r2, r3, #31
   b9ccc:	d403      	bmi.n	b9cd6 <__lo0bits+0x4e>
   b9cce:	085b      	lsrs	r3, r3, #1
   b9cd0:	f100 0001 	add.w	r0, r0, #1
   b9cd4:	d005      	beq.n	b9ce2 <__lo0bits+0x5a>
   b9cd6:	600b      	str	r3, [r1, #0]
   b9cd8:	4770      	bx	lr
   b9cda:	4610      	mov	r0, r2
   b9cdc:	e7e9      	b.n	b9cb2 <__lo0bits+0x2a>
   b9cde:	2000      	movs	r0, #0
   b9ce0:	4770      	bx	lr
   b9ce2:	2020      	movs	r0, #32
   b9ce4:	4770      	bx	lr
	...

000b9ce8 <__i2b>:
   b9ce8:	b510      	push	{r4, lr}
   b9cea:	460c      	mov	r4, r1
   b9cec:	2101      	movs	r1, #1
   b9cee:	f7ff feb9 	bl	b9a64 <_Balloc>
   b9cf2:	4602      	mov	r2, r0
   b9cf4:	b928      	cbnz	r0, b9d02 <__i2b+0x1a>
   b9cf6:	4b05      	ldr	r3, [pc, #20]	; (b9d0c <__i2b+0x24>)
   b9cf8:	4805      	ldr	r0, [pc, #20]	; (b9d10 <__i2b+0x28>)
   b9cfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9cfe:	f7fd f8b3 	bl	b6e68 <__assert_func>
   b9d02:	2301      	movs	r3, #1
   b9d04:	6144      	str	r4, [r0, #20]
   b9d06:	6103      	str	r3, [r0, #16]
   b9d08:	bd10      	pop	{r4, pc}
   b9d0a:	bf00      	nop
   b9d0c:	000bb4d9 	.word	0x000bb4d9
   b9d10:	000bb560 	.word	0x000bb560

000b9d14 <__multiply>:
   b9d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d18:	4691      	mov	r9, r2
   b9d1a:	690a      	ldr	r2, [r1, #16]
   b9d1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9d20:	429a      	cmp	r2, r3
   b9d22:	bfb8      	it	lt
   b9d24:	460b      	movlt	r3, r1
   b9d26:	460c      	mov	r4, r1
   b9d28:	bfbc      	itt	lt
   b9d2a:	464c      	movlt	r4, r9
   b9d2c:	4699      	movlt	r9, r3
   b9d2e:	6927      	ldr	r7, [r4, #16]
   b9d30:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9d34:	68a3      	ldr	r3, [r4, #8]
   b9d36:	6861      	ldr	r1, [r4, #4]
   b9d38:	eb07 060a 	add.w	r6, r7, sl
   b9d3c:	42b3      	cmp	r3, r6
   b9d3e:	b085      	sub	sp, #20
   b9d40:	bfb8      	it	lt
   b9d42:	3101      	addlt	r1, #1
   b9d44:	f7ff fe8e 	bl	b9a64 <_Balloc>
   b9d48:	b930      	cbnz	r0, b9d58 <__multiply+0x44>
   b9d4a:	4602      	mov	r2, r0
   b9d4c:	4b44      	ldr	r3, [pc, #272]	; (b9e60 <__multiply+0x14c>)
   b9d4e:	4845      	ldr	r0, [pc, #276]	; (b9e64 <__multiply+0x150>)
   b9d50:	f240 115d 	movw	r1, #349	; 0x15d
   b9d54:	f7fd f888 	bl	b6e68 <__assert_func>
   b9d58:	f100 0514 	add.w	r5, r0, #20
   b9d5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9d60:	462b      	mov	r3, r5
   b9d62:	2200      	movs	r2, #0
   b9d64:	4543      	cmp	r3, r8
   b9d66:	d321      	bcc.n	b9dac <__multiply+0x98>
   b9d68:	f104 0314 	add.w	r3, r4, #20
   b9d6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9d70:	f109 0314 	add.w	r3, r9, #20
   b9d74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9d78:	9202      	str	r2, [sp, #8]
   b9d7a:	1b3a      	subs	r2, r7, r4
   b9d7c:	3a15      	subs	r2, #21
   b9d7e:	f022 0203 	bic.w	r2, r2, #3
   b9d82:	3204      	adds	r2, #4
   b9d84:	f104 0115 	add.w	r1, r4, #21
   b9d88:	428f      	cmp	r7, r1
   b9d8a:	bf38      	it	cc
   b9d8c:	2204      	movcc	r2, #4
   b9d8e:	9201      	str	r2, [sp, #4]
   b9d90:	9a02      	ldr	r2, [sp, #8]
   b9d92:	9303      	str	r3, [sp, #12]
   b9d94:	429a      	cmp	r2, r3
   b9d96:	d80c      	bhi.n	b9db2 <__multiply+0x9e>
   b9d98:	2e00      	cmp	r6, #0
   b9d9a:	dd03      	ble.n	b9da4 <__multiply+0x90>
   b9d9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9da0:	2b00      	cmp	r3, #0
   b9da2:	d05a      	beq.n	b9e5a <__multiply+0x146>
   b9da4:	6106      	str	r6, [r0, #16]
   b9da6:	b005      	add	sp, #20
   b9da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9dac:	f843 2b04 	str.w	r2, [r3], #4
   b9db0:	e7d8      	b.n	b9d64 <__multiply+0x50>
   b9db2:	f8b3 a000 	ldrh.w	sl, [r3]
   b9db6:	f1ba 0f00 	cmp.w	sl, #0
   b9dba:	d024      	beq.n	b9e06 <__multiply+0xf2>
   b9dbc:	f104 0e14 	add.w	lr, r4, #20
   b9dc0:	46a9      	mov	r9, r5
   b9dc2:	f04f 0c00 	mov.w	ip, #0
   b9dc6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9dca:	f8d9 1000 	ldr.w	r1, [r9]
   b9dce:	fa1f fb82 	uxth.w	fp, r2
   b9dd2:	b289      	uxth	r1, r1
   b9dd4:	fb0a 110b 	mla	r1, sl, fp, r1
   b9dd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9ddc:	f8d9 2000 	ldr.w	r2, [r9]
   b9de0:	4461      	add	r1, ip
   b9de2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9de6:	fb0a c20b 	mla	r2, sl, fp, ip
   b9dea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9dee:	b289      	uxth	r1, r1
   b9df0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9df4:	4577      	cmp	r7, lr
   b9df6:	f849 1b04 	str.w	r1, [r9], #4
   b9dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9dfe:	d8e2      	bhi.n	b9dc6 <__multiply+0xb2>
   b9e00:	9a01      	ldr	r2, [sp, #4]
   b9e02:	f845 c002 	str.w	ip, [r5, r2]
   b9e06:	9a03      	ldr	r2, [sp, #12]
   b9e08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9e0c:	3304      	adds	r3, #4
   b9e0e:	f1b9 0f00 	cmp.w	r9, #0
   b9e12:	d020      	beq.n	b9e56 <__multiply+0x142>
   b9e14:	6829      	ldr	r1, [r5, #0]
   b9e16:	f104 0c14 	add.w	ip, r4, #20
   b9e1a:	46ae      	mov	lr, r5
   b9e1c:	f04f 0a00 	mov.w	sl, #0
   b9e20:	f8bc b000 	ldrh.w	fp, [ip]
   b9e24:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9e28:	fb09 220b 	mla	r2, r9, fp, r2
   b9e2c:	4492      	add	sl, r2
   b9e2e:	b289      	uxth	r1, r1
   b9e30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9e34:	f84e 1b04 	str.w	r1, [lr], #4
   b9e38:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9e3c:	f8be 1000 	ldrh.w	r1, [lr]
   b9e40:	0c12      	lsrs	r2, r2, #16
   b9e42:	fb09 1102 	mla	r1, r9, r2, r1
   b9e46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9e4a:	4567      	cmp	r7, ip
   b9e4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9e50:	d8e6      	bhi.n	b9e20 <__multiply+0x10c>
   b9e52:	9a01      	ldr	r2, [sp, #4]
   b9e54:	50a9      	str	r1, [r5, r2]
   b9e56:	3504      	adds	r5, #4
   b9e58:	e79a      	b.n	b9d90 <__multiply+0x7c>
   b9e5a:	3e01      	subs	r6, #1
   b9e5c:	e79c      	b.n	b9d98 <__multiply+0x84>
   b9e5e:	bf00      	nop
   b9e60:	000bb4d9 	.word	0x000bb4d9
   b9e64:	000bb560 	.word	0x000bb560

000b9e68 <__pow5mult>:
   b9e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9e6c:	4615      	mov	r5, r2
   b9e6e:	f012 0203 	ands.w	r2, r2, #3
   b9e72:	4606      	mov	r6, r0
   b9e74:	460f      	mov	r7, r1
   b9e76:	d007      	beq.n	b9e88 <__pow5mult+0x20>
   b9e78:	4c25      	ldr	r4, [pc, #148]	; (b9f10 <__pow5mult+0xa8>)
   b9e7a:	3a01      	subs	r2, #1
   b9e7c:	2300      	movs	r3, #0
   b9e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9e82:	f7ff fe51 	bl	b9b28 <__multadd>
   b9e86:	4607      	mov	r7, r0
   b9e88:	10ad      	asrs	r5, r5, #2
   b9e8a:	d03d      	beq.n	b9f08 <__pow5mult+0xa0>
   b9e8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9e8e:	b97c      	cbnz	r4, b9eb0 <__pow5mult+0x48>
   b9e90:	2010      	movs	r0, #16
   b9e92:	f7fc ffb9 	bl	b6e08 <malloc>
   b9e96:	4602      	mov	r2, r0
   b9e98:	6270      	str	r0, [r6, #36]	; 0x24
   b9e9a:	b928      	cbnz	r0, b9ea8 <__pow5mult+0x40>
   b9e9c:	4b1d      	ldr	r3, [pc, #116]	; (b9f14 <__pow5mult+0xac>)
   b9e9e:	481e      	ldr	r0, [pc, #120]	; (b9f18 <__pow5mult+0xb0>)
   b9ea0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9ea4:	f7fc ffe0 	bl	b6e68 <__assert_func>
   b9ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9eac:	6004      	str	r4, [r0, #0]
   b9eae:	60c4      	str	r4, [r0, #12]
   b9eb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9eb8:	b94c      	cbnz	r4, b9ece <__pow5mult+0x66>
   b9eba:	f240 2171 	movw	r1, #625	; 0x271
   b9ebe:	4630      	mov	r0, r6
   b9ec0:	f7ff ff12 	bl	b9ce8 <__i2b>
   b9ec4:	2300      	movs	r3, #0
   b9ec6:	f8c8 0008 	str.w	r0, [r8, #8]
   b9eca:	4604      	mov	r4, r0
   b9ecc:	6003      	str	r3, [r0, #0]
   b9ece:	f04f 0900 	mov.w	r9, #0
   b9ed2:	07eb      	lsls	r3, r5, #31
   b9ed4:	d50a      	bpl.n	b9eec <__pow5mult+0x84>
   b9ed6:	4639      	mov	r1, r7
   b9ed8:	4622      	mov	r2, r4
   b9eda:	4630      	mov	r0, r6
   b9edc:	f7ff ff1a 	bl	b9d14 <__multiply>
   b9ee0:	4639      	mov	r1, r7
   b9ee2:	4680      	mov	r8, r0
   b9ee4:	4630      	mov	r0, r6
   b9ee6:	f7ff fdfd 	bl	b9ae4 <_Bfree>
   b9eea:	4647      	mov	r7, r8
   b9eec:	106d      	asrs	r5, r5, #1
   b9eee:	d00b      	beq.n	b9f08 <__pow5mult+0xa0>
   b9ef0:	6820      	ldr	r0, [r4, #0]
   b9ef2:	b938      	cbnz	r0, b9f04 <__pow5mult+0x9c>
   b9ef4:	4622      	mov	r2, r4
   b9ef6:	4621      	mov	r1, r4
   b9ef8:	4630      	mov	r0, r6
   b9efa:	f7ff ff0b 	bl	b9d14 <__multiply>
   b9efe:	6020      	str	r0, [r4, #0]
   b9f00:	f8c0 9000 	str.w	r9, [r0]
   b9f04:	4604      	mov	r4, r0
   b9f06:	e7e4      	b.n	b9ed2 <__pow5mult+0x6a>
   b9f08:	4638      	mov	r0, r7
   b9f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9f0e:	bf00      	nop
   b9f10:	000bb6b0 	.word	0x000bb6b0
   b9f14:	000bb30d 	.word	0x000bb30d
   b9f18:	000bb560 	.word	0x000bb560

000b9f1c <__lshift>:
   b9f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9f20:	460c      	mov	r4, r1
   b9f22:	6849      	ldr	r1, [r1, #4]
   b9f24:	6923      	ldr	r3, [r4, #16]
   b9f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9f2a:	68a3      	ldr	r3, [r4, #8]
   b9f2c:	4607      	mov	r7, r0
   b9f2e:	4691      	mov	r9, r2
   b9f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9f34:	f108 0601 	add.w	r6, r8, #1
   b9f38:	42b3      	cmp	r3, r6
   b9f3a:	db0b      	blt.n	b9f54 <__lshift+0x38>
   b9f3c:	4638      	mov	r0, r7
   b9f3e:	f7ff fd91 	bl	b9a64 <_Balloc>
   b9f42:	4605      	mov	r5, r0
   b9f44:	b948      	cbnz	r0, b9f5a <__lshift+0x3e>
   b9f46:	4602      	mov	r2, r0
   b9f48:	4b2a      	ldr	r3, [pc, #168]	; (b9ff4 <__lshift+0xd8>)
   b9f4a:	482b      	ldr	r0, [pc, #172]	; (b9ff8 <__lshift+0xdc>)
   b9f4c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9f50:	f7fc ff8a 	bl	b6e68 <__assert_func>
   b9f54:	3101      	adds	r1, #1
   b9f56:	005b      	lsls	r3, r3, #1
   b9f58:	e7ee      	b.n	b9f38 <__lshift+0x1c>
   b9f5a:	2300      	movs	r3, #0
   b9f5c:	f100 0114 	add.w	r1, r0, #20
   b9f60:	f100 0210 	add.w	r2, r0, #16
   b9f64:	4618      	mov	r0, r3
   b9f66:	4553      	cmp	r3, sl
   b9f68:	db37      	blt.n	b9fda <__lshift+0xbe>
   b9f6a:	6920      	ldr	r0, [r4, #16]
   b9f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9f70:	f104 0314 	add.w	r3, r4, #20
   b9f74:	f019 091f 	ands.w	r9, r9, #31
   b9f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9f7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9f80:	d02f      	beq.n	b9fe2 <__lshift+0xc6>
   b9f82:	f1c9 0e20 	rsb	lr, r9, #32
   b9f86:	468a      	mov	sl, r1
   b9f88:	f04f 0c00 	mov.w	ip, #0
   b9f8c:	681a      	ldr	r2, [r3, #0]
   b9f8e:	fa02 f209 	lsl.w	r2, r2, r9
   b9f92:	ea42 020c 	orr.w	r2, r2, ip
   b9f96:	f84a 2b04 	str.w	r2, [sl], #4
   b9f9a:	f853 2b04 	ldr.w	r2, [r3], #4
   b9f9e:	4298      	cmp	r0, r3
   b9fa0:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9fa4:	d8f2      	bhi.n	b9f8c <__lshift+0x70>
   b9fa6:	1b03      	subs	r3, r0, r4
   b9fa8:	3b15      	subs	r3, #21
   b9faa:	f023 0303 	bic.w	r3, r3, #3
   b9fae:	3304      	adds	r3, #4
   b9fb0:	f104 0215 	add.w	r2, r4, #21
   b9fb4:	4290      	cmp	r0, r2
   b9fb6:	bf38      	it	cc
   b9fb8:	2304      	movcc	r3, #4
   b9fba:	f841 c003 	str.w	ip, [r1, r3]
   b9fbe:	f1bc 0f00 	cmp.w	ip, #0
   b9fc2:	d001      	beq.n	b9fc8 <__lshift+0xac>
   b9fc4:	f108 0602 	add.w	r6, r8, #2
   b9fc8:	3e01      	subs	r6, #1
   b9fca:	4638      	mov	r0, r7
   b9fcc:	612e      	str	r6, [r5, #16]
   b9fce:	4621      	mov	r1, r4
   b9fd0:	f7ff fd88 	bl	b9ae4 <_Bfree>
   b9fd4:	4628      	mov	r0, r5
   b9fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9fda:	f842 0f04 	str.w	r0, [r2, #4]!
   b9fde:	3301      	adds	r3, #1
   b9fe0:	e7c1      	b.n	b9f66 <__lshift+0x4a>
   b9fe2:	3904      	subs	r1, #4
   b9fe4:	f853 2b04 	ldr.w	r2, [r3], #4
   b9fe8:	f841 2f04 	str.w	r2, [r1, #4]!
   b9fec:	4298      	cmp	r0, r3
   b9fee:	d8f9      	bhi.n	b9fe4 <__lshift+0xc8>
   b9ff0:	e7ea      	b.n	b9fc8 <__lshift+0xac>
   b9ff2:	bf00      	nop
   b9ff4:	000bb4d9 	.word	0x000bb4d9
   b9ff8:	000bb560 	.word	0x000bb560

000b9ffc <__mcmp>:
   b9ffc:	b530      	push	{r4, r5, lr}
   b9ffe:	6902      	ldr	r2, [r0, #16]
   ba000:	690c      	ldr	r4, [r1, #16]
   ba002:	1b12      	subs	r2, r2, r4
   ba004:	d10e      	bne.n	ba024 <__mcmp+0x28>
   ba006:	f100 0314 	add.w	r3, r0, #20
   ba00a:	3114      	adds	r1, #20
   ba00c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ba010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ba014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ba018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ba01c:	42a5      	cmp	r5, r4
   ba01e:	d003      	beq.n	ba028 <__mcmp+0x2c>
   ba020:	d305      	bcc.n	ba02e <__mcmp+0x32>
   ba022:	2201      	movs	r2, #1
   ba024:	4610      	mov	r0, r2
   ba026:	bd30      	pop	{r4, r5, pc}
   ba028:	4283      	cmp	r3, r0
   ba02a:	d3f3      	bcc.n	ba014 <__mcmp+0x18>
   ba02c:	e7fa      	b.n	ba024 <__mcmp+0x28>
   ba02e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba032:	e7f7      	b.n	ba024 <__mcmp+0x28>

000ba034 <__mdiff>:
   ba034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba038:	460c      	mov	r4, r1
   ba03a:	4606      	mov	r6, r0
   ba03c:	4611      	mov	r1, r2
   ba03e:	4620      	mov	r0, r4
   ba040:	4690      	mov	r8, r2
   ba042:	f7ff ffdb 	bl	b9ffc <__mcmp>
   ba046:	1e05      	subs	r5, r0, #0
   ba048:	d110      	bne.n	ba06c <__mdiff+0x38>
   ba04a:	4629      	mov	r1, r5
   ba04c:	4630      	mov	r0, r6
   ba04e:	f7ff fd09 	bl	b9a64 <_Balloc>
   ba052:	b930      	cbnz	r0, ba062 <__mdiff+0x2e>
   ba054:	4b3a      	ldr	r3, [pc, #232]	; (ba140 <__mdiff+0x10c>)
   ba056:	4602      	mov	r2, r0
   ba058:	f240 2132 	movw	r1, #562	; 0x232
   ba05c:	4839      	ldr	r0, [pc, #228]	; (ba144 <__mdiff+0x110>)
   ba05e:	f7fc ff03 	bl	b6e68 <__assert_func>
   ba062:	2301      	movs	r3, #1
   ba064:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ba068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba06c:	bfa4      	itt	ge
   ba06e:	4643      	movge	r3, r8
   ba070:	46a0      	movge	r8, r4
   ba072:	4630      	mov	r0, r6
   ba074:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ba078:	bfa6      	itte	ge
   ba07a:	461c      	movge	r4, r3
   ba07c:	2500      	movge	r5, #0
   ba07e:	2501      	movlt	r5, #1
   ba080:	f7ff fcf0 	bl	b9a64 <_Balloc>
   ba084:	b920      	cbnz	r0, ba090 <__mdiff+0x5c>
   ba086:	4b2e      	ldr	r3, [pc, #184]	; (ba140 <__mdiff+0x10c>)
   ba088:	4602      	mov	r2, r0
   ba08a:	f44f 7110 	mov.w	r1, #576	; 0x240
   ba08e:	e7e5      	b.n	ba05c <__mdiff+0x28>
   ba090:	f8d8 7010 	ldr.w	r7, [r8, #16]
   ba094:	6926      	ldr	r6, [r4, #16]
   ba096:	60c5      	str	r5, [r0, #12]
   ba098:	f104 0914 	add.w	r9, r4, #20
   ba09c:	f108 0514 	add.w	r5, r8, #20
   ba0a0:	f100 0e14 	add.w	lr, r0, #20
   ba0a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   ba0a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   ba0ac:	f108 0210 	add.w	r2, r8, #16
   ba0b0:	46f2      	mov	sl, lr
   ba0b2:	2100      	movs	r1, #0
   ba0b4:	f859 3b04 	ldr.w	r3, [r9], #4
   ba0b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ba0bc:	fa1f f883 	uxth.w	r8, r3
   ba0c0:	fa11 f18b 	uxtah	r1, r1, fp
   ba0c4:	0c1b      	lsrs	r3, r3, #16
   ba0c6:	eba1 0808 	sub.w	r8, r1, r8
   ba0ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba0ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ba0d2:	fa1f f888 	uxth.w	r8, r8
   ba0d6:	1419      	asrs	r1, r3, #16
   ba0d8:	454e      	cmp	r6, r9
   ba0da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ba0de:	f84a 3b04 	str.w	r3, [sl], #4
   ba0e2:	d8e7      	bhi.n	ba0b4 <__mdiff+0x80>
   ba0e4:	1b33      	subs	r3, r6, r4
   ba0e6:	3b15      	subs	r3, #21
   ba0e8:	f023 0303 	bic.w	r3, r3, #3
   ba0ec:	3304      	adds	r3, #4
   ba0ee:	3415      	adds	r4, #21
   ba0f0:	42a6      	cmp	r6, r4
   ba0f2:	bf38      	it	cc
   ba0f4:	2304      	movcc	r3, #4
   ba0f6:	441d      	add	r5, r3
   ba0f8:	4473      	add	r3, lr
   ba0fa:	469e      	mov	lr, r3
   ba0fc:	462e      	mov	r6, r5
   ba0fe:	4566      	cmp	r6, ip
   ba100:	d30e      	bcc.n	ba120 <__mdiff+0xec>
   ba102:	f10c 0203 	add.w	r2, ip, #3
   ba106:	1b52      	subs	r2, r2, r5
   ba108:	f022 0203 	bic.w	r2, r2, #3
   ba10c:	3d03      	subs	r5, #3
   ba10e:	45ac      	cmp	ip, r5
   ba110:	bf38      	it	cc
   ba112:	2200      	movcc	r2, #0
   ba114:	441a      	add	r2, r3
   ba116:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba11a:	b17b      	cbz	r3, ba13c <__mdiff+0x108>
   ba11c:	6107      	str	r7, [r0, #16]
   ba11e:	e7a3      	b.n	ba068 <__mdiff+0x34>
   ba120:	f856 8b04 	ldr.w	r8, [r6], #4
   ba124:	fa11 f288 	uxtah	r2, r1, r8
   ba128:	1414      	asrs	r4, r2, #16
   ba12a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba12e:	b292      	uxth	r2, r2
   ba130:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba134:	f84e 2b04 	str.w	r2, [lr], #4
   ba138:	1421      	asrs	r1, r4, #16
   ba13a:	e7e0      	b.n	ba0fe <__mdiff+0xca>
   ba13c:	3f01      	subs	r7, #1
   ba13e:	e7ea      	b.n	ba116 <__mdiff+0xe2>
   ba140:	000bb4d9 	.word	0x000bb4d9
   ba144:	000bb560 	.word	0x000bb560

000ba148 <__ulp>:
   ba148:	b082      	sub	sp, #8
   ba14a:	ed8d 0b00 	vstr	d0, [sp]
   ba14e:	9b01      	ldr	r3, [sp, #4]
   ba150:	4912      	ldr	r1, [pc, #72]	; (ba19c <__ulp+0x54>)
   ba152:	4019      	ands	r1, r3
   ba154:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba158:	2900      	cmp	r1, #0
   ba15a:	dd05      	ble.n	ba168 <__ulp+0x20>
   ba15c:	2200      	movs	r2, #0
   ba15e:	460b      	mov	r3, r1
   ba160:	ec43 2b10 	vmov	d0, r2, r3
   ba164:	b002      	add	sp, #8
   ba166:	4770      	bx	lr
   ba168:	4249      	negs	r1, r1
   ba16a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba16e:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba172:	f04f 0200 	mov.w	r2, #0
   ba176:	f04f 0300 	mov.w	r3, #0
   ba17a:	da04      	bge.n	ba186 <__ulp+0x3e>
   ba17c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba180:	fa41 f300 	asr.w	r3, r1, r0
   ba184:	e7ec      	b.n	ba160 <__ulp+0x18>
   ba186:	f1a0 0114 	sub.w	r1, r0, #20
   ba18a:	291e      	cmp	r1, #30
   ba18c:	bfda      	itte	le
   ba18e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba192:	fa20 f101 	lsrle.w	r1, r0, r1
   ba196:	2101      	movgt	r1, #1
   ba198:	460a      	mov	r2, r1
   ba19a:	e7e1      	b.n	ba160 <__ulp+0x18>
   ba19c:	7ff00000 	.word	0x7ff00000

000ba1a0 <__b2d>:
   ba1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba1a2:	6905      	ldr	r5, [r0, #16]
   ba1a4:	f100 0714 	add.w	r7, r0, #20
   ba1a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba1ac:	1f2e      	subs	r6, r5, #4
   ba1ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba1b2:	4620      	mov	r0, r4
   ba1b4:	f7ff fd48 	bl	b9c48 <__hi0bits>
   ba1b8:	f1c0 0320 	rsb	r3, r0, #32
   ba1bc:	280a      	cmp	r0, #10
   ba1be:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba23c <__b2d+0x9c>
   ba1c2:	600b      	str	r3, [r1, #0]
   ba1c4:	dc14      	bgt.n	ba1f0 <__b2d+0x50>
   ba1c6:	f1c0 0e0b 	rsb	lr, r0, #11
   ba1ca:	fa24 f10e 	lsr.w	r1, r4, lr
   ba1ce:	42b7      	cmp	r7, r6
   ba1d0:	ea41 030c 	orr.w	r3, r1, ip
   ba1d4:	bf34      	ite	cc
   ba1d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba1da:	2100      	movcs	r1, #0
   ba1dc:	3015      	adds	r0, #21
   ba1de:	fa04 f000 	lsl.w	r0, r4, r0
   ba1e2:	fa21 f10e 	lsr.w	r1, r1, lr
   ba1e6:	ea40 0201 	orr.w	r2, r0, r1
   ba1ea:	ec43 2b10 	vmov	d0, r2, r3
   ba1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba1f0:	42b7      	cmp	r7, r6
   ba1f2:	bf3a      	itte	cc
   ba1f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba1f8:	f1a5 0608 	subcc.w	r6, r5, #8
   ba1fc:	2100      	movcs	r1, #0
   ba1fe:	380b      	subs	r0, #11
   ba200:	d017      	beq.n	ba232 <__b2d+0x92>
   ba202:	f1c0 0c20 	rsb	ip, r0, #32
   ba206:	fa04 f500 	lsl.w	r5, r4, r0
   ba20a:	42be      	cmp	r6, r7
   ba20c:	fa21 f40c 	lsr.w	r4, r1, ip
   ba210:	ea45 0504 	orr.w	r5, r5, r4
   ba214:	bf8c      	ite	hi
   ba216:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba21a:	2400      	movls	r4, #0
   ba21c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba220:	fa01 f000 	lsl.w	r0, r1, r0
   ba224:	fa24 f40c 	lsr.w	r4, r4, ip
   ba228:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba22c:	ea40 0204 	orr.w	r2, r0, r4
   ba230:	e7db      	b.n	ba1ea <__b2d+0x4a>
   ba232:	ea44 030c 	orr.w	r3, r4, ip
   ba236:	460a      	mov	r2, r1
   ba238:	e7d7      	b.n	ba1ea <__b2d+0x4a>
   ba23a:	bf00      	nop
   ba23c:	3ff00000 	.word	0x3ff00000

000ba240 <__d2b>:
   ba240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba244:	4689      	mov	r9, r1
   ba246:	2101      	movs	r1, #1
   ba248:	ec57 6b10 	vmov	r6, r7, d0
   ba24c:	4690      	mov	r8, r2
   ba24e:	f7ff fc09 	bl	b9a64 <_Balloc>
   ba252:	4604      	mov	r4, r0
   ba254:	b930      	cbnz	r0, ba264 <__d2b+0x24>
   ba256:	4602      	mov	r2, r0
   ba258:	4b25      	ldr	r3, [pc, #148]	; (ba2f0 <__d2b+0xb0>)
   ba25a:	4826      	ldr	r0, [pc, #152]	; (ba2f4 <__d2b+0xb4>)
   ba25c:	f240 310a 	movw	r1, #778	; 0x30a
   ba260:	f7fc fe02 	bl	b6e68 <__assert_func>
   ba264:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba268:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba26c:	bb35      	cbnz	r5, ba2bc <__d2b+0x7c>
   ba26e:	2e00      	cmp	r6, #0
   ba270:	9301      	str	r3, [sp, #4]
   ba272:	d028      	beq.n	ba2c6 <__d2b+0x86>
   ba274:	4668      	mov	r0, sp
   ba276:	9600      	str	r6, [sp, #0]
   ba278:	f7ff fd06 	bl	b9c88 <__lo0bits>
   ba27c:	9900      	ldr	r1, [sp, #0]
   ba27e:	b300      	cbz	r0, ba2c2 <__d2b+0x82>
   ba280:	9a01      	ldr	r2, [sp, #4]
   ba282:	f1c0 0320 	rsb	r3, r0, #32
   ba286:	fa02 f303 	lsl.w	r3, r2, r3
   ba28a:	430b      	orrs	r3, r1
   ba28c:	40c2      	lsrs	r2, r0
   ba28e:	6163      	str	r3, [r4, #20]
   ba290:	9201      	str	r2, [sp, #4]
   ba292:	9b01      	ldr	r3, [sp, #4]
   ba294:	61a3      	str	r3, [r4, #24]
   ba296:	2b00      	cmp	r3, #0
   ba298:	bf14      	ite	ne
   ba29a:	2202      	movne	r2, #2
   ba29c:	2201      	moveq	r2, #1
   ba29e:	6122      	str	r2, [r4, #16]
   ba2a0:	b1d5      	cbz	r5, ba2d8 <__d2b+0x98>
   ba2a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba2a6:	4405      	add	r5, r0
   ba2a8:	f8c9 5000 	str.w	r5, [r9]
   ba2ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba2b0:	f8c8 0000 	str.w	r0, [r8]
   ba2b4:	4620      	mov	r0, r4
   ba2b6:	b003      	add	sp, #12
   ba2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba2bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba2c0:	e7d5      	b.n	ba26e <__d2b+0x2e>
   ba2c2:	6161      	str	r1, [r4, #20]
   ba2c4:	e7e5      	b.n	ba292 <__d2b+0x52>
   ba2c6:	a801      	add	r0, sp, #4
   ba2c8:	f7ff fcde 	bl	b9c88 <__lo0bits>
   ba2cc:	9b01      	ldr	r3, [sp, #4]
   ba2ce:	6163      	str	r3, [r4, #20]
   ba2d0:	2201      	movs	r2, #1
   ba2d2:	6122      	str	r2, [r4, #16]
   ba2d4:	3020      	adds	r0, #32
   ba2d6:	e7e3      	b.n	ba2a0 <__d2b+0x60>
   ba2d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba2dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba2e0:	f8c9 0000 	str.w	r0, [r9]
   ba2e4:	6918      	ldr	r0, [r3, #16]
   ba2e6:	f7ff fcaf 	bl	b9c48 <__hi0bits>
   ba2ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba2ee:	e7df      	b.n	ba2b0 <__d2b+0x70>
   ba2f0:	000bb4d9 	.word	0x000bb4d9
   ba2f4:	000bb560 	.word	0x000bb560

000ba2f8 <__ratio>:
   ba2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba2fc:	4688      	mov	r8, r1
   ba2fe:	4669      	mov	r1, sp
   ba300:	4681      	mov	r9, r0
   ba302:	f7ff ff4d 	bl	ba1a0 <__b2d>
   ba306:	a901      	add	r1, sp, #4
   ba308:	4640      	mov	r0, r8
   ba30a:	ec55 4b10 	vmov	r4, r5, d0
   ba30e:	f7ff ff47 	bl	ba1a0 <__b2d>
   ba312:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba316:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba31a:	eba3 0c02 	sub.w	ip, r3, r2
   ba31e:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba322:	1a9b      	subs	r3, r3, r2
   ba324:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba328:	ec51 0b10 	vmov	r0, r1, d0
   ba32c:	2b00      	cmp	r3, #0
   ba32e:	bfd6      	itet	le
   ba330:	460a      	movle	r2, r1
   ba332:	462a      	movgt	r2, r5
   ba334:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba338:	468b      	mov	fp, r1
   ba33a:	462f      	mov	r7, r5
   ba33c:	bfd4      	ite	le
   ba33e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba342:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba346:	4620      	mov	r0, r4
   ba348:	ee10 2a10 	vmov	r2, s0
   ba34c:	465b      	mov	r3, fp
   ba34e:	4639      	mov	r1, r7
   ba350:	f7fa f94c 	bl	b45ec <__aeabi_ddiv>
   ba354:	ec41 0b10 	vmov	d0, r0, r1
   ba358:	b003      	add	sp, #12
   ba35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba35e <__copybits>:
   ba35e:	3901      	subs	r1, #1
   ba360:	b570      	push	{r4, r5, r6, lr}
   ba362:	1149      	asrs	r1, r1, #5
   ba364:	6914      	ldr	r4, [r2, #16]
   ba366:	3101      	adds	r1, #1
   ba368:	f102 0314 	add.w	r3, r2, #20
   ba36c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba370:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba374:	1f05      	subs	r5, r0, #4
   ba376:	42a3      	cmp	r3, r4
   ba378:	d30c      	bcc.n	ba394 <__copybits+0x36>
   ba37a:	1aa3      	subs	r3, r4, r2
   ba37c:	3b11      	subs	r3, #17
   ba37e:	f023 0303 	bic.w	r3, r3, #3
   ba382:	3211      	adds	r2, #17
   ba384:	42a2      	cmp	r2, r4
   ba386:	bf88      	it	hi
   ba388:	2300      	movhi	r3, #0
   ba38a:	4418      	add	r0, r3
   ba38c:	2300      	movs	r3, #0
   ba38e:	4288      	cmp	r0, r1
   ba390:	d305      	bcc.n	ba39e <__copybits+0x40>
   ba392:	bd70      	pop	{r4, r5, r6, pc}
   ba394:	f853 6b04 	ldr.w	r6, [r3], #4
   ba398:	f845 6f04 	str.w	r6, [r5, #4]!
   ba39c:	e7eb      	b.n	ba376 <__copybits+0x18>
   ba39e:	f840 3b04 	str.w	r3, [r0], #4
   ba3a2:	e7f4      	b.n	ba38e <__copybits+0x30>

000ba3a4 <__any_on>:
   ba3a4:	f100 0214 	add.w	r2, r0, #20
   ba3a8:	6900      	ldr	r0, [r0, #16]
   ba3aa:	114b      	asrs	r3, r1, #5
   ba3ac:	4298      	cmp	r0, r3
   ba3ae:	b510      	push	{r4, lr}
   ba3b0:	db11      	blt.n	ba3d6 <__any_on+0x32>
   ba3b2:	dd0a      	ble.n	ba3ca <__any_on+0x26>
   ba3b4:	f011 011f 	ands.w	r1, r1, #31
   ba3b8:	d007      	beq.n	ba3ca <__any_on+0x26>
   ba3ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba3be:	fa24 f001 	lsr.w	r0, r4, r1
   ba3c2:	fa00 f101 	lsl.w	r1, r0, r1
   ba3c6:	428c      	cmp	r4, r1
   ba3c8:	d10b      	bne.n	ba3e2 <__any_on+0x3e>
   ba3ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba3ce:	4293      	cmp	r3, r2
   ba3d0:	d803      	bhi.n	ba3da <__any_on+0x36>
   ba3d2:	2000      	movs	r0, #0
   ba3d4:	bd10      	pop	{r4, pc}
   ba3d6:	4603      	mov	r3, r0
   ba3d8:	e7f7      	b.n	ba3ca <__any_on+0x26>
   ba3da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba3de:	2900      	cmp	r1, #0
   ba3e0:	d0f5      	beq.n	ba3ce <__any_on+0x2a>
   ba3e2:	2001      	movs	r0, #1
   ba3e4:	e7f6      	b.n	ba3d4 <__any_on+0x30>

000ba3e6 <_calloc_r>:
   ba3e6:	b513      	push	{r0, r1, r4, lr}
   ba3e8:	434a      	muls	r2, r1
   ba3ea:	4611      	mov	r1, r2
   ba3ec:	9201      	str	r2, [sp, #4]
   ba3ee:	f7fc fd2b 	bl	b6e48 <_malloc_r>
   ba3f2:	4604      	mov	r4, r0
   ba3f4:	b118      	cbz	r0, ba3fe <_calloc_r+0x18>
   ba3f6:	9a01      	ldr	r2, [sp, #4]
   ba3f8:	2100      	movs	r1, #0
   ba3fa:	f7fe f8d2 	bl	b85a2 <memset>
   ba3fe:	4620      	mov	r0, r4
   ba400:	b002      	add	sp, #8
   ba402:	bd10      	pop	{r4, pc}
   ba404:	0000      	movs	r0, r0
	...

000ba408 <nan>:
   ba408:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba410 <nan+0x8>
   ba40c:	4770      	bx	lr
   ba40e:	bf00      	nop
   ba410:	00000000 	.word	0x00000000
   ba414:	7ff80000 	.word	0x7ff80000

000ba418 <__ascii_wctomb>:
   ba418:	b149      	cbz	r1, ba42e <__ascii_wctomb+0x16>
   ba41a:	2aff      	cmp	r2, #255	; 0xff
   ba41c:	bf85      	ittet	hi
   ba41e:	238a      	movhi	r3, #138	; 0x8a
   ba420:	6003      	strhi	r3, [r0, #0]
   ba422:	700a      	strbls	r2, [r1, #0]
   ba424:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   ba428:	bf98      	it	ls
   ba42a:	2001      	movls	r0, #1
   ba42c:	4770      	bx	lr
   ba42e:	4608      	mov	r0, r1
   ba430:	4770      	bx	lr

000ba432 <link_code_end>:
	...

000ba434 <link_const_data_start>:
   ba434:	514d0400 	.word	0x514d0400
   ba438:	00045454 	.word	0x00045454
   ba43c:	49514d06 	.word	0x49514d06
   ba440:	03706473 	.word	0x03706473

000ba444 <dynalib_user>:
   ba444:	000b4ab9 000b4af5 000b4b1d 000b4b21     .J...J...K..!K..
   ba454:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   ba464:	72697620 6c617574 6e655300 65740064      virtual.Send.te
   ba474:	6f747473 2f636970 696d6152 6c6f6f43     sttopic/RamiCool
   ba484:	73657400 706f7474 522f6369 43696d61     .testtopic/RamiC
   ba494:	326c6f6f 73657400 706f7474 522f6369     ool2.testtopic/R
   ba4a4:	43696d61 316c6f6f 44494400 2054274e     amiCool1.DIDN'T 
   ba4b4:	4b524f57 00732500 0054414c 474e4f4c     WORK.%s.LAT.LONG
   ba4c4:	62616c00 6568742e 2e6c6377 006d6f63     .lab.thewcl.com.

000ba4d4 <_ZL4font>:
   ba4d4:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   ba4e4:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   ba4f4:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   ba504:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   ba514:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   ba524:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   ba534:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   ba544:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   ba554:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   ba564:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   ba574:	00000000 5f000000 07000000 14000700     ......._........
   ba584:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   ba594:	00502056 00030708 41221c00 22410000     V P......."A..A"
   ba5a4:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   ba5b4:	08080800 00000808 20006060 02040810     ........``. ....
   ba5c4:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   ba5d4:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   ba5e4:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   ba5f4:	00001e29 00000014 00003440 22140800     ).......@4....."
   ba604:	14141441 41001414 02081422 06095901     A......A"....Y..
   ba614:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   ba624:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   ba634:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   ba644:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   ba654:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   ba664:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   ba674:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   ba684:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   ba694:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   ba6a4:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   ba6b4:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   ba6c4:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   ba6d4:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   ba6e4:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   ba6f4:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   ba704:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   ba714:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   ba724:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   ba734:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   ba744:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   ba754:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   ba764:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   ba774:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   ba784:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   ba794:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   ba7a4:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   ba7b4:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   ba7c4:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   ba7d4:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   ba7e4:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   ba7f4:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   ba804:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   ba814:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   ba824:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   ba834:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   ba844:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   ba854:	00ff0000 ff101010 14141400 101000ff     ................
   ba864:	10ff00ff f010f010 fc141414 f7141400     ................
   ba874:	0000ff00 14ff00ff fc04f414 10171414     ................
   ba884:	1f10101f 14141f10 10001f14 00f01010     ................
   ba894:	1f000000 10101010 1010101f 0010f010     ................
   ba8a4:	10ff0000 10101010 10101010 000010ff     ................
   ba8b4:	0014ff00 ff00ff00 101f0000 fc000017     ................
   ba8c4:	1414f404 14171017 f404f414 00ff0000     ................
   ba8d4:	141414f7 14141414 14f700f7 14171414     ................
   ba8e4:	101f1010 1414141f 101014f4 00f010f0     ................
   ba8f4:	1f101f00 1f000000 00000014 000014fc     ................
   ba904:	10f010f0 ff10ff10 ff141414 10101014     ................
   ba914:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   ba924:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   ba934:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   ba944:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   ba954:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   ba964:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   ba974:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   ba984:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   ba994:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   ba9a4:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   ba9b4:	00000018 30001010 0101ff40 01011f00     .......0@.......
   ba9c4:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000ba9d4 <_ZTV12Adafruit_GFX>:
	...
   ba9e4:	000b547d 000b7271 000b4b41 000b4e83     }T..qr..AK...N..
   ba9f4:	000b4e85 000b4eb7 000b4e93 000b4ea5     .N...N...N...N..
   baa04:	000b4dc5 000b4e83 000b50af 000b50ad     .M...N...P...P..
   baa14:	000b4ecf 000b4f0d 000b4f47 000b4f8d     .N...O..GO...O..
   baa24:	000b4fa9 000b502d 61666564 20746c75     .O..-P..default 
   baa34:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   baa44:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   baa54:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   baa64:	20732520 45444f4d 003e7525               %s MODE%u>.

000baa70 <_ZTVN8particle11SPISettingsE>:
	...
   baa78:	000b559d 000b558b 000b558d              .U...U...U..

000baa84 <_ZL12splash1_data>:
   baa84:	00000000 00800100 00000000 00000000     ................
   baa94:	00008003 00000000 07000000 000000c0     ................
   baaa4:	00000000 c0070000 00000000 00000000     ................
   baab4:	00c00f00 00000000 00000000 0000e01f     ................
   baac4:	00000000 1f000000 000000e0 00000000     ................
   baad4:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   baaec:	0000f07f 00000000 7ff81f00 000000f0     ................
   baafc:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   bab0c:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   bab1c:	00000000 f9ff0f00 0000c0ff 00000000     ................
   bab2c:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   bab3c:	00000000 fc030000 80ffff73 00000000     ........s.......
   bab4c:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   bab5c:	000000ff 00000000 fc1ffe7f 00000000     ................
   bab6c:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   bab7c:	0000e0ff 00000000 ff191f00 000000c0     ................
   bab8c:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   bab9c:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   babac:	00000000 fcffff00 00000000 00000000     ................
   babbc:	00feffff 00000000 ff000000 0000feff     ................
   babcc:	00000000 efff0100 000000fe 00000000     ................
   babdc:	fecfff01 00000000 03000000 00fe07ff     ................
   babec:	00000000 fc030000 0000fe07 00000000     ................
   babfc:	03f00300 000000fe 00000000 fe008001     ................
	...
   bac14:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bac2c:	0000000c 07000000 00fc0080 00c00300     ................
   bac3c:	80070000 0000fc01 0000c003 01800700     ................
   bac4c:	030000fc 000000c0 e0018007 1e000000     ................
   bac5c:	07000000 00e00180 001e0000 9ff7e37f     ................
   bac6c:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bac7c:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bac8c:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   bac9c:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   bacac:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   bacbc:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   baccc:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bacdc:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bacec:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bacfc:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bad0c:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bad1c:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bad2c:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bad3c:	5b6bfdff c0fd6adb                       ..k[.j..

000bad44 <_ZL12splash2_data>:
   bad44:	00600000 00000000 00000000 00000000     ..`.............
   bad54:	0000e000 00000000 00000000 01000000     ................
   bad64:	000000e0 00000000 00000000 f0010000     ................
	...
   bad80:	00f00300 00000000 00000000 00000000     ................
   bad90:	0000f007 00000000 00000000 07000000     ................
   bada0:	000000f8 00000000 00000000 f80f0000     ................
   badb0:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   badc0:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   badd0:	00c00300 010000fe ffff00e0 000000f8     ................
   bade0:	f000c003 0f000000 7ffe7f00 030000c0     ................
   badf0:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bae00:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bae10:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bae20:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bae30:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bae40:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bae50:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bae60:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bae70:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bae80:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bae90:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   baea0:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   baeb0:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   baec0:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   baed8:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   baee8:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   baef8:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   baf08:	ff7f000f a5feffff 198d9dad 060000e0     ................
   baf18:	ffff7f00 adb5feff e07eb5ed              ..........~.

000baf24 <_ZTV16Adafruit_SSD1306>:
	...
   baf2c:	000b55f1 000b5609 000b547d 000b7271     .U...V..}T..qr..
   baf3c:	000b561d 000b4e83 000b4e85 000b4eb7     .V...N...N...N..
   baf4c:	000b4e93 000b4ea5 000b4dc5 000b4e83     .N...N...M...N..
   baf5c:	000b50af 000b57bb 000b5d63 000b5d15     .P...W..c]...]..
   baf6c:	000b4f47 000b4f8d 000b4fa9 000b502d     GO...O...O..-P..

000baf7c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   baf7c:	e0c08000 fefcf8f0                       ........

000baf84 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   baf84:	07030100 7f3f1f0f                       ......?.

000baf8c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   baf8c:	a880d5ae                                ....

000baf90 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   baf90:	8d4000d3                                ..@.

000baf94 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   baf94:	c8a10020                                 ...

000baf98 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   baf98:	a6a440db                                 .@....

000baf9e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   baf9e:	8f8102da                                ....

000bafa2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bafa2:	                                         ...

000bafa5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bafa5:	                                         ...

000bafa8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bafa8:	21ff0022 00000000                       "..!....

000bafb0 <_ZTV16OledWingAdafruit>:
	...
   bafb8:	000b680d 000b682d 000b547d 000b7271     .h..-h..}T..qr..
   bafc8:	000b561d 000b4e83 000b4e85 000b4eb7     .V...N...N...N..
   bafd8:	000b4e93 000b4ea5 000b4dc5 000b4e83     .N...N...M...N..
   bafe8:	000b50af 000b57bb 000b5d63 000b5d15     .P...W..c]...]..
   baff8:	000b4f47 000b4f8d 000b4fa9 000b502d     GO...O...O..-P..

000bb008 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bb010 <_ZTVN5spark13EthernetClassE>:
	...
   bb018:	000b6eff 000b6ef5 000b6eeb 000b6ee1     .n...n...n...n..
   bb028:	000b6ed5 000b6ec9 000b714d 000b7155     .n...n..Mq..Uq..
   bb038:	000b6ebd 000b6eb5 000b6eab 000b6ea1     .n...n...n...n..
   bb048:	000b7185                                .q..

000bb04c <_ZTV7TwoWire>:
	...
   bb054:	000b6f1d 000b6f67 000b6f3f 000b6f1f     .o..go..?o...o..
   bb064:	000b6f47 000b6f4f 000b6f57 000b6f5f     Go..Oo..Wo.._o..

000bb074 <_ZTV9IPAddress>:
	...
   bb07c:	000b6ff1 000b6fe1 000b6fe3 00707061     .o...o...o..app.

000bb08c <_ZTVN5spark12NetworkClassE>:
	...
   bb094:	000b710d 000b7117 000b7121 000b712b     .q...q..!q..+q..
   bb0a4:	000b7135 000b7141 000b714d 000b7155     5q..Aq..Mq..Uq..
   bb0b4:	000b715d 000b7169 000b7171 000b717b     ]q..iq..qq..{q..
   bb0c4:	000b7185 006e616e 00666e69 0066766f     .q..nan.inf.ovf.
   bb0d4:	                                         ..

000bb0d6 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bb0d6:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   bb0e6:	20766365 6f727265 203d2072 00006425     ecv error = %d..
	...

000bb0f8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb100:	000b7889 000b78ad 000b7ddf 000b78bb     .x...x...}...x..
   bb110:	000b788d                                .x..

000bb114 <_ZTV9TCPClient>:
	...
   bb11c:	000b7939 000b796d 000b7805 000b781f     9y..my...x...x..
   bb12c:	000b7c75 000b7849 000b7aeb 000b787d     u|..Ix...z..}x..
   bb13c:	000b7b7d 000b79bd 000b7b19 000b7d29     }{...y...{..)}..
   bb14c:	000b7ab9 000b787f 000b7831 000b78c1     .z...x..1x...x..
   bb15c:	000b799d 252d5925 64252d6d 3a482554     .y..%Y-%m-%dT%H:
   bb16c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bb17c <_ZTV11USARTSerial>:
	...
   bb184:	000b7df9 000b7e65 000b7e3d 000b7271     .}..e~..=~..qr..
   bb194:	000b7e0d 000b7e29 000b7e1b 000b7e37     .~..)~...~..7~..
   bb1a4:	000b7dfb 000b7dff                       .}...}..

000bb1ac <_ZTV9USBSerial>:
	...
   bb1b4:	000b7ea3 000b7f0b 000b7ee1 000b7271     .~.......~..qr..
   bb1c4:	000b7ed3 000b7ea5 000b7eb5 000b7f05     .~...~...~......
   bb1d4:	000b7ec5 000b7e9d                       .~...~..

000bb1dc <_ZTVN5spark9WiFiClassE>:
	...
   bb1e4:	000b8003 000b7ff9 000b7fef 000b7fa5     ................
   bb1f4:	000b7fe3 000b7fd7 000b714d 000b7155     ........Mq..Uq..
   bb204:	000b7fcb 000b7fc3 000b7fb9 000b7faf     ................
   bb214:	000b7185                                .q..

000bb218 <_ZSt7nothrow>:
	...

000bb219 <_ZTSSt19_Sp_make_shared_tag>:
   bb219:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bb229:	5f646572 00676174                        red_tag....

000bb234 <_ZTISt19_Sp_make_shared_tag>:
   bb234:	000bb274 000bb219                       t.......

000bb23c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb23c:	000bb2d4 000bb248 000bb2f8              ....H.......

000bb248 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb248:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bb258:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bb268:	00000045                                E...

000bb26c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb26c:	00000000 000bb23c 000b839d 000b83b1     ....<...........
   bb27c:	000b8545 000b8545 000b841b 000b835d     E...E.......]...
   bb28c:	000b8403 000b83c5 000b838f              ............

000bb298 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb298:	000bb2d4 000bb2a4 000bb23c              ........<...

000bb2a4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb2a4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bb2b4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bb2c4:	456f666e 00000000                       nfoE....

000bb2cc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb2cc:	00000000 000bb298 000b8445 000b8459     ........E...Y...
   bb2dc:	000b8545 000b8545 000b841b 000b835d     E...E.......]...
   bb2ec:	000b8519 000b84a5 000b846d              ........m...

000bb2f8 <_ZTISt9type_info>:
   bb2f8:	000bb274 000bb300                       t.......

000bb300 <_ZTSSt9type_info>:
   bb300:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bb310:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bb320:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   bb330:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bb340:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bb350:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bb360:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bb370:	696c6474 61722f62 632e646e 696e6900     tdlib/rand.c.ini
   bb380:	00007974                                ty..

000bb384 <fpi.1>:
   bb384:	00000035 fffffbce 000003cb 00000001     5...............
   bb394:	00000000                                ....

000bb398 <fpinan.0>:
   bb398:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bb3b0 <tinytens>:
   bb3b0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bb3c0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bb3d0:	64ac6f43 11680628                       Co.d(.h.

000bb3d8 <_ctype_>:
   bb3d8:	20202000 20202020 28282020 20282828     .         ((((( 
   bb3e8:	20202020 20202020 20202020 20202020                     
   bb3f8:	10108820 10101010 10101010 10101010      ...............
   bb408:	04040410 04040404 10040404 10101010     ................
   bb418:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bb428:	01010101 01010101 01010101 10101010     ................
   bb438:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bb448:	02020202 02020202 02020202 10101010     ................
   bb458:	00000020 00000000 00000000 00000000      ...............
	...
   bb4d8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bb4e8:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bb4f8:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bb508:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bb518:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bb528:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bb538:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bb548:	0000632e                                .c..

000bb54c <_C_numeric_locale>:
   bb54c:	000bb0d4 000baa34 2003e448 4f500043     ....4...H.. C.PO
   bb55c:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
   bb56c:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bb57c:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bb58c:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bb59c:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bb5ac:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
   bb5bc:	00000000                                ....

000bb5c0 <__mprec_bigtens>:
   bb5c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bb5d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bb5e0:	7f73bf3c 75154fdd                       <.s..O.u

000bb5e8 <__mprec_tens>:
   bb5e8:	00000000 3ff00000 00000000 40240000     .......?......$@
   bb5f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bb608:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bb618:	00000000 412e8480 00000000 416312d0     .......A......cA
   bb628:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bb638:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bb648:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bb658:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bb668:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bb678:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bb688:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bb698:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bb6a8:	79d99db4 44ea7843                       ...yCx.D

000bb6b0 <p05.0>:
   bb6b0:	00000005 00000019 0000007d              ........}...

000bb6bc <link_const_data_end>:
   bb6bc:	000b4d71 	.word	0x000b4d71
   bb6c0:	000b6e91 	.word	0x000b6e91
   bb6c4:	000b6f09 	.word	0x000b6f09
   bb6c8:	000b70fd 	.word	0x000b70fd
   bb6cc:	000b725d 	.word	0x000b725d
   bb6d0:	000b7541 	.word	0x000b7541
   bb6d4:	000b77e1 	.word	0x000b77e1
   bb6d8:	000b7de5 	.word	0x000b7de5
   bb6dc:	000b800d 	.word	0x000b800d
